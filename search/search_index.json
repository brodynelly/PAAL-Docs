{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PAAL System Documentation","text":""},{"location":"#overview","title":"Overview","text":"<p>This documentation provides a comprehensive guide to the PAAL system architecture, components, and implementation details. It is designed to help deepen the understanding of the system's structure and functionality.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":""},{"location":"#i-frontend","title":"I. Frontend","text":"<ul> <li>Overall Architecture</li> <li>Key Components and Structure</li> <li>API Interactions</li> <li>State Management</li> <li>UI/UX Design System</li> <li>Testing Strategy</li> <li>Deployment Process</li> </ul>"},{"location":"#ii-backend","title":"II. Backend","text":"<ul> <li>Overall Architecture</li> <li>Service Decomposition</li> <li>API Design and Documentation</li> <li>Business Logic Layer</li> <li>Data Access Layer</li> <li>Caching Strategy</li> <li>Security Measures</li> <li>Logging and Monitoring</li> <li>Deployment Process</li> </ul>"},{"location":"#iii-architecture","title":"III. Architecture","text":"<ul> <li>High-Level System Architecture</li> <li>Scalability and Reliability</li> <li>Message Queuing and Asynchronous Processing</li> <li>Data Storage Architecture</li> <li>Network Architecture</li> <li>Security Architecture</li> </ul>"},{"location":"#iv-database","title":"IV. Database","text":"<ul> <li>Database Schema</li> <li>Data Models</li> <li>Query Optimization</li> <li>Data Replication and Backup</li> <li>Database Technology Choices</li> </ul>"},{"location":"#v-internal-structure-and-organization","title":"V. Internal Structure and Organization","text":"<ul> <li>Code Structure and Conventions</li> <li>Configuration Management</li> <li>Dependency Management</li> <li>Build and Deployment Pipelines</li> <li>Team Structure and Responsibilities</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>I recommend starting with the High-Level System Architecture document to get a broad understanding of the system, followed by the Overall Architecture documents for both Frontend and Backend.</p>"},{"location":"#contributing-to-documentation","title":"Contributing to Documentation","text":"<p>When updating this documentation, please follow these guidelines: 1. Keep information accurate and up-to-date 2. Use clear, concise language 3. Include diagrams where appropriate 4. Add code examples when explaining complex concepts 5. Link to related documents when referencing other parts of the system</p>"},{"location":"gettingstarted/","title":"PAAL Monitoring System","text":"<p>PAAL (Precision Agriculture and Animal Livestock) Monitoring System is a comprehensive web application designed for agricultural operations management. This system provides real-time monitoring, data analytics, and management tools for farms, barns, stalls, and livestock.</p>"},{"location":"gettingstarted/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Features</li> <li>System Requirements</li> <li>Installation Guide</li> <li>Prerequisites</li> <li>Step-by-Step Installation</li> <li>Usage Guide</li> <li>Logging In</li> <li>Dashboard</li> <li>Farm Management</li> <li>System Settings</li> <li>Troubleshooting</li> <li>Maintenance</li> <li>Support</li> <li>Developer Documentation</li> </ul>"},{"location":"gettingstarted/#overview","title":"Overview","text":"<p>PAAL Monitoring System is an enterprise-grade application that helps farm owners and managers monitor and manage their agricultural operations efficiently. The system provides a user-friendly interface for tracking livestock health, farm conditions, and operational metrics.</p>"},{"location":"gettingstarted/#tech-stack","title":"Tech Stack","text":""},{"location":"gettingstarted/#frontend","title":"Frontend","text":"<ul> <li>Next.js 14</li> <li>React</li> <li>TailwindCSS</li> <li>Recharts for data visualization</li> <li>Radix UI for accessible components</li> </ul>"},{"location":"gettingstarted/#backend","title":"Backend","text":"<ul> <li>Node.js</li> <li>Express</li> <li>MongoDB (configured as a replica set for high availability &amp; authentication)</li> <li>Mongoose</li> </ul>"},{"location":"gettingstarted/#system-requirements","title":"System Requirements","text":"<ul> <li>Operating System: Windows 10/11, macOS 10.15+, or Linux (Ubuntu 20.04+ recommended)</li> <li>Processor: 2 GHz dual-core processor or better</li> <li>Memory: 4 GB RAM minimum (8 GB recommended)</li> <li>Storage: 10 GB available space</li> <li>Internet Connection: Broadband internet connection</li> <li>Software: Docker and Docker Compose</li> </ul>"},{"location":"gettingstarted/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js 18.x or higher</li> <li>MongoDB (no need for a local install if using Docker)</li> <li>npm or pnpm</li> <li>Docker and Docker Compose</li> </ul> <p>Note: This repository includes a Docker Compose setup for MongoDB configured as a replica set (even in a single-node setup) along with a key file for secure internal authentication. It also includes automation scripts for backing up and restoring the database across machines, ensuring consistency without exposing sensitive production data.</p>"},{"location":"gettingstarted/#getting-started","title":"Getting Started","text":""},{"location":"gettingstarted/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/brodynelly/paal.git\ncd paal\n</code></pre>"},{"location":"gettingstarted/#2-create-and-switch-to-your-specified-localdev-branch","title":"2. Create and Switch to Your Specified <code>localDev</code> Branch","text":"<pre><code>git checkout -b &lt;user_name&gt;localDev\n</code></pre> <p>This command creates a new branch named <code>localDev</code> and switches you to it. Remember to replace <code>&lt;user_name&gt;</code> with your own git username. All changes you make now will be isolated from the main branch.</p>"},{"location":"gettingstarted/#3-install-local-dependancies-with-pnpm","title":"3. Install Local Dependancies with PNPM","text":"<pre><code>npm install\npnpm install\n</code></pre> <p>this command allows you to install the local depos for the web application. This is crucial in actually running the application and not running into compile time errors with docker</p>"},{"location":"gettingstarted/#4-set-up-environment-variables","title":"4. Set Up Environment Variables","text":"<p>Create a <code>.env</code> file in the root directory with the following content (adjust as needed):</p> <pre><code># MongoDB Initialization Variables\nMONGO_INITDB_ROOT_USERNAME=PAAL\nMONGO_INITDB_ROOT_PASSWORD=PAAL\nMONGO_INITDB_DATABASE=paalab\n\n# MongoDB Connection Settings\nDATABASE_HOST=mongo-c\nDATABASE_PORT=27017\nDATABASE_COLLECTION=paalab\n\n# Backend &amp; Server Variables\nSERVER_HOST=server-c\nSERVER_PORT=5005\nPORT=3000\n\n# Clerk URLs\nNEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in\nNEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up\nNEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/overview\nNEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/overview\n\n# API URL for React App\nREACT_APP_API_URL=http://localhost:8080\nNEXT_PUBLIC_API_URL=http://localhost:8080\nNEXT_PUBLIC_BASE_URL=http://localhost:8080\n\n# Authentication\nJWT_SECRET=your_jwt_secret_key_change_this_in_production\nCLERK_WEBHOOK_SECRET=your_clerk_webhook_secret\n\n# Environment\nNODE_ENV=development\n</code></pre> <p>Docker Compose automatically loads a file named <code>.env</code> from the root directory when you run <code>docker compose up</code>.</p>"},{"location":"gettingstarted/#41-creating-the-authentication-ssl-key-for-securitykeyfile","title":"4.1 . Creating the Authentication SSL Key for <code>security.keyFile</code>","text":"<p>To enable internal authentication for MongoDB using a key file, follow these steps:</p>"},{"location":"gettingstarted/#step-1-create-the-directory-for-the-key-file","title":"Step 1: Create the Directory for the Key File","text":"<p>Ensure that the directory structure exists on your host machine:</p> <pre><code>mkdir -p ./database/sslkey\n</code></pre> <p>This will create the <code>sslkey</code> directory inside <code>database/</code>.</p>"},{"location":"gettingstarted/#step-2-generate-the-key-file","title":"Step 2: Generate the Key File","text":"<p>Run the following command to create a random key and save it to <code>security.keyFile</code>:</p> <pre><code>openssl rand -base64 756 &gt; ./database/sslkey/security.keyFile\n</code></pre> <p>This generates a 756-byte base64-encoded key (recommended by MongoDB) and saves it to <code>security.keyFile</code>.</p>"},{"location":"gettingstarted/#step-3-set-proper-permissions","title":"Step 3: Set Proper Permissions","text":"<p>MongoDB requires that the key file is only readable by the owner (<code>600</code> permissions):</p> <pre><code>chmod 600 ./database/sslkey/security.keyFile\n</code></pre> <p>This ensures that only the owner can read and write the key file.</p>"},{"location":"gettingstarted/#step-4-verify-the-key-file","title":"Step 4: Verify the Key File","text":"<p>You can check the contents of the key file to confirm it was generated correctly:</p> <pre><code>cat ./database/sslkey/security.keyFile\n</code></pre> <p>You should see a long base64-encoded string.</p>"},{"location":"gettingstarted/#5-starting-the-mongo-replicaset","title":"5. Starting the Mongo Replicaset","text":""},{"location":"gettingstarted/#1-start-the-mongo-docker","title":"1. Start the Mongo Docker","text":"<pre><code>docker compose up --build mongo -d\n</code></pre>"},{"location":"gettingstarted/#2-initiate-the-mongodb-replica-set","title":"2. Initiate the MongoDB Replica Set","text":""},{"location":"gettingstarted/#21once-mongodb-is-running-connect-to-it-with-authentication-from-the-admin-database-this-is-a-seperate-database-from-paal-that-sets-the-user-auth","title":"2.1.Once MongoDB is running, connect to it with authentication from the admin database (this is a seperate database from PAAL that sets the user Auth) :","text":"<pre><code>mongosh \"mongodb://PAAL:PAAL@127.0.0.1:27017/admin?authSource=admin\"\n</code></pre> <p>or if mongosh isn't installed on machine. Load through docker container using command:</p> <pre><code>docker exec -it mongo-c mongosh -u PAAL -p PAAL --authenticationDatabase admin\n</code></pre>"},{"location":"gettingstarted/#22then-initiate-the-replica-set","title":"2.2.Then, initiate the replica set:","text":"<pre><code>rs.initiate({\n  _id: \"rs0\",\n  members: [\n    { _id: 0, host: \"mongo-c:27017\" }\n  ]\n})\n</code></pre>"},{"location":"gettingstarted/#23-optional-verify-the-configuration","title":"2.3. (OPTIONAL) Verify the configuration:","text":"<pre><code>rs.status()\n</code></pre>"},{"location":"gettingstarted/#usage-guide","title":"Usage Guide","text":""},{"location":"gettingstarted/#logging-in","title":"Logging In","text":"<ol> <li>On the login page, use one of the following test accounts:</li> <li>Admin: <code>admin@test.com</code> / <code>admin123</code></li> <li> <p>Farmer: <code>farmer@test.com</code> / <code>farmer123</code></p> </li> <li> <p>Click the \"Sign In\" button</p> </li> </ol>"},{"location":"gettingstarted/#dashboard","title":"Dashboard","text":"<p>The dashboard provides an overview of your farm operations:</p> <ul> <li>Admin Dashboard: Shows system information, user statistics, and farm metrics</li> <li>Farmer Dashboard: Shows farm-specific information and livestock metrics</li> </ul>"},{"location":"gettingstarted/#farm-management","title":"Farm Management","text":"<ol> <li>Navigate to the \"Farms\" section in the sidebar</li> <li>View the list of farms</li> <li>Click on a farm to view details</li> <li>Use the \"Edit\" button to modify farm information</li> </ol>"},{"location":"gettingstarted/#system-settings","title":"System Settings","text":"<p>Admin users only:</p> <ol> <li>Navigate to the \"System\" section in the sidebar</li> <li>Access various system settings:</li> <li>Backup &amp; Restore: Create and restore system backups</li> <li>Maintenance: Perform system maintenance tasks</li> <li>System Logs: View system activity logs</li> </ol>"},{"location":"gettingstarted/#starting-the-application","title":"Starting the Application","text":""},{"location":"gettingstarted/#1-closing-the-mongo-docker-image-after-initiating-rs0-image","title":"1. closing the mongo Docker Image after Initiating rs0 image","text":"<pre><code>docker compose down\n</code></pre> <p>this will close the docker image that you created the rs0 image in</p>"},{"location":"gettingstarted/#2-starting-the-web-service","title":"2. Starting the web service","text":"<pre><code>docker compose up --build -d\n</code></pre> <p>this with start the entire ecosystem for this design where you can access everything.</p>"},{"location":"gettingstarted/#3-start-the-development-servers","title":"3. Start the Development Servers","text":"<p>Make sure your frontend is running on port <code>8080</code> and your backend on port <code>8080/api</code>. Access the frontend via <code>http://localhost:8080/</code>.</p>"},{"location":"gettingstarted/#4-verify-connectivity","title":"4. Verify Connectivity","text":"<ul> <li>Test Application: Run the application to ensure it connects to MongoDB correctly.</li> <li>Check Containers: Use <code>docker ps</code> to verify that all containers are running.</li> <li>Logs: For troubleshooting, view logs with:<pre><code>docker-compose logs mongo\n</code></pre> </li> </ul>"},{"location":"gettingstarted/#6-seed-the-database-optional","title":"6. Seed the Database (Optional)","text":"<p>Now, when you first load the DB there will be no data. Lets populate it with some prop data, run:</p> <pre><code>docker exec -it server-c /bin/bash\nnpm run seed\n</code></pre> <p>We first load into the Docker CLI to execute our seed command, because the connection to the database is over the docker-network</p>"},{"location":"gettingstarted/#connecting-to-database-via-compass","title":"Connecting to Database Via Compass","text":""},{"location":"gettingstarted/#using-mongodb-compass","title":"Using mongodb Compass.","text":""},{"location":"gettingstarted/#1-open-compass-connection-window-and-enter-this-connection-string","title":"1. Open compass connection window and enter this connection string","text":"<pre><code>mongodb://PAAL:PAAL@localhost:27017/?directConnection=true\n</code></pre> <p>This will allow you to connect directly connect to the database via compass to see visual changes and updated to the database.</p>"},{"location":"gettingstarted/#troubleshooting","title":"Troubleshooting","text":""},{"location":"gettingstarted/#common-issues","title":"Common Issues","text":""},{"location":"gettingstarted/#application-not-starting","title":"Application Not Starting","text":"<ol> <li>Ensure Docker is running</li> <li>Check if the ports are available (8080 for the frontend, 27017 for MongoDB)</li> <li>Check the logs:    <code>docker-compose logs</code></li> </ol>"},{"location":"gettingstarted/#login-issues","title":"Login Issues","text":"<ol> <li>Ensure you're using the correct credentials</li> <li>Check if the database is properly initialized</li> <li>Run the fix-database script:    <code>./fix-database.sh</code></li> </ol>"},{"location":"gettingstarted/#database-connection-issues","title":"Database Connection Issues","text":"<ol> <li>Check if the MongoDB container is running:    <code>docker-compose ps</code></li> <li>Ensure the database credentials in the <code>.env</code> file match those in the application</li> </ol>"},{"location":"gettingstarted/#restarting-the-application","title":"Restarting the Application","text":"<p>If you encounter issues, try restarting the application:</p> <pre><code>docker-compose down\ndocker-compose up -d\n</code></pre>"},{"location":"gettingstarted/#backup-restore","title":"Backup &amp; Restore","text":""},{"location":"gettingstarted/#backup-script-overview","title":"Backup Script Overview","text":"<p>We include an automated script (<code>backup_to_github.sh</code>) that runs <code>mongodump</code> inside the MongoDB container to export the database, archive it, and commit the backup to GitHub. This helps ensure that all developers work with the same data across local machines.</p>"},{"location":"gettingstarted/#how-to-use-the-backup-script","title":"How to Use the Backup Script:","text":"<ol> <li> <p>Make the script executable:</p> <pre><code>chmod +x backup_to_github.sh\n</code></pre> </li> <li> <p>Run the script:</p> <pre><code>./backup_to_github.sh\n</code></pre> </li> </ol>"},{"location":"gettingstarted/#restoring-backups","title":"Restoring Backups","text":"<ul> <li>Pull the latest commit from the <code>localDev</code> branch.</li> <li> <p>If necessary, run <code>mongorestore</code> (or a provided script) to restore the database from the backup.</p> </li> <li> <p>TODO:</p> </li> <li>I will bind the docker <code>mongodb</code> image to a volume with backup data stored in this github repo for percistant data flow.</li> </ul>"},{"location":"gettingstarted/#project-structure","title":"Project Structure","text":"<pre><code>paal-test/\n\u251c\u2500\u2500 server/                   # Backend server files\n\u2502   \u251c\u2500\u2500 models/               # MongoDB models\n\u2502   \u251c\u2500\u2500 routes/               # API routes\n\u2502   \u2514\u2500\u2500 index.js              # Server entry point\n\u251c\u2500\u2500 src/                      # Frontend source code\n\u2502   \u251c\u2500\u2500 app/                 # Next.js pages and routes\n\u2502   \u251c\u2500\u2500 components/          # React components\n\u2502   \u251c\u2500\u2500 lib/                 # Utility functions\n\u2502   \u2514\u2500\u2500 types/               # TypeScript type definitions\n\u251c\u2500\u2500 docker-compose.yml        # Docker Compose configuration\n\u251c\u2500\u2500 .env                      # Environment variables for Docker Compose\n\u251c\u2500\u2500 Dockerfile.frontend       # Dockerfile for frontend build\n\u251c\u2500\u2500 backup_to_github.sh       # Database backup automation script\n\u2514\u2500\u2500 README.md                 # This file\n</code></pre>"},{"location":"gettingstarted/#snippet-into-docker-compose","title":"Snippet into Docker Compose","text":""},{"location":"gettingstarted/#4-docker-compose-setup-for-mongodb-with-replica-set","title":"4. Docker Compose Setup for MongoDB with Replica Set","text":"<p>Our Docker Compose file sets up MongoDB with a replica set (<code>rs0</code>) and internal authentication using a key file.</p> <ul> <li>Replica Set: Even a single node runs as a replica set for future scalability.</li> <li>Key File: The key file is mounted from <code>./database/sslkey/security.keyFile</code> into the container at <code>/etc/secrets/security.keyFile</code>.</li> <li>Authentication: The <code>--auth</code> flag is enabled, and the admin user is automatically created from environment variables.</li> </ul> <p>Snippet from <code>docker-compose.yml</code>:</p> <pre><code>version: \"3.8\"\nservices:\n  mongo:\n    image: mongo:latest\n    container_name: ${DATABASE_HOST}\n    restart: always\n    env_file: .env\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}\n      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}\n      MONGO_INITDB_DATABASE: ${DATABASE_COLLECTION}\n    ports:\n      - ${DATABASE_PORT}:27017\n    networks:\n      - app-net\n    volumes:\n      - database-v:/data/db\n      - ./database/sslkey/security.keyFile:/etc/secrets/security.keyFile:rw\n    command: [ \"mongod\", \"--replSet\", \"rs0\", \"--auth\", \"--keyFile\", \"/etc/secrets/security.keyFile\" ]\n</code></pre> <p>After starting the container, connect to MongoDB and run the replica set initiation command (see RUNNING THE APPLICATION SECTION).</p>"},{"location":"gettingstarted/#5-frontend-and-backend-services","title":"5. Frontend and Backend Services","text":"<p>The backend service runs the Node.js/Express server, the frontend service runs Next.js, and the Mongo service hosts the database. Each container operates in an isolated network environment. If you were to check your router, each Docker container would register as its own device. These containers communicate through a Docker network bridge, which provides a secure link between them. This setup is particularly useful in production, as it helps restrict communication gateways, reducing exposure to external threats and minimizing potential internal bugs.</p> <p>Now, let's examine what makes our Docker environment function. Everything is defined as services within our docker-compose.yml file. Each service is started based on its Dockerfile, which provides specific instructions for launching the server. And each service is operated with our 'DockerFile' identifier for specific instructions to start our server. There are two sets of DockerFiles in the main directory of the project. one is for production and has the suffix <code>.production</code>, and the other is for development with the suffix <code>.development</code>. For now, we will focus on the development build, which uses the Next.js development command that enables live reloading!!</p> <p>Example Docker Compose entry for Frontend (development override):</p> <pre><code>services:\n  frontend:\n    build:\n      context: .\n      dockerfile: Dockerfile.frontend\n    container_name: frontend\n    environment:\n      - NODE_ENV=development\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - ./:/usr/src/app\n      - /usr/src/app/node_modules\n    command: [\"npm\", \"run\", \"dev\"]\n</code></pre> <p>You can use a separate override file (e.g., <code>docker-compose.override.yml</code>) to differentiate between production and development setups.</p>"},{"location":"gettingstarted/#support","title":"Support","text":"<p>For additional support:</p> <ul> <li>Check the documentation in the <code>docs</code> folder</li> <li>Contact system administrator</li> <li>Email support at: support@paalmonitoring.com</li> </ul>"},{"location":"gettingstarted/#developer-documentation","title":"Developer Documentation","text":""},{"location":"gettingstarted/#how-it-all-works","title":"How It All Works","text":"<ul> <li>Docker &amp; Environment Variables: Docker Compose automatically loads your <code>.env</code> file to replace placeholders in the configuration. This ensures consistency across environments and levels of production. Simply by changing our env variables, we can have a production build in less than a week. This also makes it easy to adjust credentials, ports, and other settings.</li> <li>MongoDB Replica Set: MongoDB is configured to run as a replica set even if it's a single node. A key file is mounted for secure inter-node authentication, and the container automatically creates a root user based on your <code>.env</code> variables. After container startup, you manually initiate the replica set using <code>rs.initiate()</code>.</li> <li>Development Workflow: The frontend service is set up for development with live reloading by mounting your source code directory. The backend service connects to MongoDB using a connection string that includes the replica set and authentication parameters.</li> <li>Backup and Restore: The backup script leverages MongoDB\u2019s <code>mongodump</code> and <code>mongorestore</code> commands to maintain a consistent dataset across local machines, ensuring every developer works with the same data.</li> <li>Version Control: Always commit your changes to your local development branch (<code>localDev</code>) and avoid pushing directly to <code>main</code> or the default</li> </ul>"},{"location":"architecture/high-level-system/","title":"High-Level System Architecture","text":""},{"location":"architecture/high-level-system/#overview","title":"Overview","text":"<p>The PAAL (Pig Activity and Analytics Logger) system is designed to monitor, track, and analyze pig behavior and health metrics in agricultural settings. The system collects data from various sensors, processes it, and presents insights through a web-based dashboard. This document provides a high-level overview of the system architecture, its major components, and how they interact.</p>"},{"location":"architecture/high-level-system/#system-architecture-diagram","title":"System Architecture Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                           Client Devices                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  Web Browser \u2502   \u2502 Mobile Device\u2502   \u2502 Tablet       \u2502   \u2502 ...   \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502                \u2502 \u2502                \u2502 \u2502             \u2502 \u2502\n          \u2502                \u2502 \u2502                \u2502 \u2502             \u2502 \u2502\n          \u25bc                \u25bc \u25bc                \u25bc \u25bc             \u25bc \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                              NGINX Proxy                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502                         \u2502\n                              \u2502                         \u2502\n          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502                         \u2502\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n          \u2502                  \u2502\u2502                         \u2502\u2502                 \u2502\n          \u25bc                  \u25bc\u2502                         \u2502\u25bc                 \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Next.js Frontend \u2502 \u2502 Express.js Backend \u2502   \u2502 Socket.IO Server \u2502 \u2502 Static Assets   \u2502\n\u2502  (React SPA)      \u2502 \u2502 (REST API)         \u2502   \u2502 (Real-time)      \u2502 \u2502 (Images, etc.)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n          \u2502                  \u2502                          \u2502\n          \u2502                  \u2502                          \u2502\n          \u2502                  \u25bc                          \u2502\n          \u2502         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510              \u2502\n          \u2502         \u2502 Business Logic     \u2502              \u2502\n          \u2502         \u2502 - Authentication   \u2502              \u2502\n          \u2502         \u2502 - Data Processing  \u2502              \u2502\n          \u2502         \u2502 - Analytics        \u2502              \u2502\n          \u2502         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502\n          \u2502                    \u2502                        \u2502\n          \u2502                    \u2502                        \u2502\n          \u2502                    \u25bc                        \u2502\n          \u2502         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510              \u2502\n          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502 Data Access Layer  \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                               \u2502\n                               \u2502\n                               \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502     MongoDB        \u2502\n                    \u2502   (Database)       \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                               \u25b2\n                               \u2502\n                               \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                        Data Collection                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502 Posture      \u2502   \u2502 Temperature  \u2502   \u2502 Health       \u2502   \u2502 Other \u2502 \u2502\n\u2502  \u2502 Sensors      \u2502   \u2502 Sensors      \u2502   \u2502 Monitors     \u2502   \u2502Sensors\u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/high-level-system/#major-components","title":"Major Components","text":""},{"location":"architecture/high-level-system/#1-client-layer","title":"1. Client Layer","text":"<p>The client layer consists of various devices that users use to access the system:</p> <ul> <li>Web Browsers: The primary means of accessing the system through desktop or laptop computers</li> <li>Mobile Devices: Smartphones running the web application</li> <li>Tablets: Larger mobile devices often used in field settings</li> </ul>"},{"location":"architecture/high-level-system/#2-nginx-proxy","title":"2. NGINX Proxy","text":"<p>NGINX serves as a reverse proxy and load balancer, handling incoming requests and routing them to the appropriate backend services:</p> <ul> <li>Routes API requests to the Express.js backend</li> <li>Routes WebSocket connections to the Socket.IO server</li> <li>Serves the Next.js frontend application</li> <li>Handles SSL termination and basic security measures</li> </ul>"},{"location":"architecture/high-level-system/#3-frontend-application","title":"3. Frontend Application","text":"<p>The frontend is built with Next.js and React:</p> <ul> <li>Single Page Application (SPA): Provides a responsive and interactive user interface</li> <li>Component-Based Architecture: Modular UI components for different parts of the application</li> <li>Client-Side State Management: Manages application state using React Context and React Query</li> <li>Responsive Design: Adapts to different screen sizes and devices</li> </ul>"},{"location":"architecture/high-level-system/#4-backend-services","title":"4. Backend Services","text":"<p>The backend consists of several services:</p>"},{"location":"architecture/high-level-system/#expressjs-rest-api","title":"Express.js REST API","text":"<ul> <li>Handles HTTP requests from the frontend</li> <li>Implements RESTful endpoints for CRUD operations</li> <li>Processes and validates user input</li> <li>Enforces authentication and authorization</li> </ul>"},{"location":"architecture/high-level-system/#socketio-server","title":"Socket.IO Server","text":"<ul> <li>Provides real-time communication capabilities</li> <li>Pushes updates to connected clients</li> <li>Enables live monitoring of pig data</li> <li>Broadcasts system events and notifications</li> </ul>"},{"location":"architecture/high-level-system/#5-business-logic-layer","title":"5. Business Logic Layer","text":"<p>The business logic layer contains the core application logic:</p> <ul> <li>Authentication and Authorization: User management, role-based access control</li> <li>Data Processing: Transforming raw data into useful information</li> <li>Analytics: Generating insights and statistics from collected data</li> <li>Validation: Ensuring data integrity and consistency</li> </ul>"},{"location":"architecture/high-level-system/#6-data-access-layer","title":"6. Data Access Layer","text":"<p>The data access layer handles interactions with the database:</p> <ul> <li>Mongoose ODM: Object Data Modeling for MongoDB</li> <li>CRUD Operations: Create, Read, Update, Delete operations on data</li> <li>Query Building: Constructing efficient database queries</li> <li>Data Validation: Schema-level validation of data</li> </ul>"},{"location":"architecture/high-level-system/#7-database","title":"7. Database","text":"<p>MongoDB serves as the primary data store:</p> <ul> <li>Document-Oriented: Stores data in flexible, JSON-like documents</li> <li>Collections: Organizes documents into collections (similar to tables)</li> <li>Indexes: Optimizes query performance</li> <li>Change Streams: Enables real-time monitoring of data changes</li> </ul>"},{"location":"architecture/high-level-system/#8-data-collection","title":"8. Data Collection","text":"<p>The data collection layer consists of various sensors and devices that collect data from pigs:</p> <ul> <li>Posture Sensors: Track pig posture (standing, sitting, lying)</li> <li>Temperature Sensors: Monitor environmental conditions</li> <li>Health Monitors: Track vital signs and health indicators</li> <li>Other Sensors: Additional data collection devices</li> </ul>"},{"location":"architecture/high-level-system/#request-flow","title":"Request Flow","text":""},{"location":"architecture/high-level-system/#typical-user-request-flow","title":"Typical User Request Flow","text":"<ol> <li>Client Initiates Request: User interacts with the frontend application</li> <li>NGINX Routing: Request is received by NGINX and routed to the appropriate service</li> <li>Frontend Processing: For client-side operations, the frontend handles the request directly</li> <li>API Request: For server-side operations, the frontend sends a request to the backend API</li> <li>Authentication: Backend verifies the user's identity and permissions</li> <li>Business Logic: Request is processed according to business rules</li> <li>Data Access: Backend interacts with the database as needed</li> <li>Response Generation: Backend generates a response</li> <li>Client Update: Frontend updates the UI based on the response</li> <li>Real-time Updates: If applicable, Socket.IO pushes updates to connected clients</li> </ol>"},{"location":"architecture/high-level-system/#data-collection-flow","title":"Data Collection Flow","text":"<ol> <li>Sensor Data Collection: Sensors collect data from pigs and their environment</li> <li>Data Transmission: Data is transmitted to the backend API</li> <li>Data Validation: Backend validates the incoming data</li> <li>Data Storage: Valid data is stored in the database</li> <li>Real-time Processing: Data is processed in real-time for immediate insights</li> <li>Notification: If significant events are detected, notifications are generated</li> <li>Dashboard Update: Connected clients receive updates via Socket.IO</li> </ol>"},{"location":"architecture/high-level-system/#authentication-and-authorization","title":"Authentication and Authorization","text":""},{"location":"architecture/high-level-system/#authentication-flow","title":"Authentication Flow","text":"<ol> <li>User Login: User provides credentials (email/password)</li> <li>Credential Verification: Backend verifies credentials against stored data</li> <li>Token Generation: Upon successful verification, a JWT token is generated</li> <li>Token Storage: Token is stored in the client (localStorage)</li> <li>Authenticated Requests: Subsequent requests include the token in the Authorization header</li> <li>Token Verification: Backend verifies the token for each protected request</li> </ol>"},{"location":"architecture/high-level-system/#authorization-model","title":"Authorization Model","text":"<p>The system implements role-based access control (RBAC) with the following roles:</p> <ul> <li>Admin: Full access to all system features and data</li> <li>Manager: Access to manage farms, barns, stalls, and view all data</li> <li>Farmer: Access to specific assigned farms and their data</li> <li>Viewer: Read-only access to specific data</li> </ul>"},{"location":"architecture/high-level-system/#data-flow","title":"Data Flow","text":""},{"location":"architecture/high-level-system/#data-collection-and-storage","title":"Data Collection and Storage","text":"<ol> <li>Sensor Data Collection: Sensors collect raw data</li> <li>Data Transmission: Data is sent to the backend API</li> <li>Data Preprocessing: Raw data is cleaned and normalized</li> <li>Data Storage: Processed data is stored in the database</li> <li>Aggregation: Data is aggregated for analytics and reporting</li> </ol>"},{"location":"architecture/high-level-system/#data-retrieval-and-presentation","title":"Data Retrieval and Presentation","text":"<ol> <li>Data Request: Frontend requests data from the backend</li> <li>Query Execution: Backend queries the database</li> <li>Data Transformation: Raw data is transformed into a client-friendly format</li> <li>Data Transmission: Transformed data is sent to the frontend</li> <li>Data Visualization: Frontend renders the data in charts, tables, etc.</li> </ol>"},{"location":"architecture/high-level-system/#scalability-and-performance","title":"Scalability and Performance","text":""},{"location":"architecture/high-level-system/#horizontal-scalability","title":"Horizontal Scalability","text":"<p>The system is designed to scale horizontally:</p> <ul> <li>Stateless Backend: Backend services can be scaled by adding more instances</li> <li>Load Balancing: NGINX distributes traffic across multiple backend instances</li> <li>Database Scaling: MongoDB can be scaled through sharding and replication</li> </ul>"},{"location":"architecture/high-level-system/#performance-optimization","title":"Performance Optimization","text":"<p>Several strategies are employed to optimize performance:</p> <ul> <li>Caching: Frequently accessed data is cached</li> <li>Indexing: Database indexes improve query performance</li> <li>Pagination: Large result sets are paginated</li> <li>Lazy Loading: Data is loaded only when needed</li> <li>Code Splitting: Frontend code is split into smaller chunks</li> </ul>"},{"location":"architecture/high-level-system/#security-measures","title":"Security Measures","text":"<p>The system implements several security measures:</p> <ul> <li>Authentication: JWT-based authentication</li> <li>Authorization: Role-based access control</li> <li>Input Validation: All user input is validated</li> <li>HTTPS: Encrypted communication</li> <li>Rate Limiting: Protection against brute force attacks</li> <li>CORS: Controlled cross-origin resource sharing</li> <li>Password Hashing: Secure password storage using bcrypt</li> </ul>"},{"location":"architecture/high-level-system/#monitoring-and-logging","title":"Monitoring and Logging","text":"<p>The system includes monitoring and logging capabilities:</p> <ul> <li>Activity Logging: User actions are logged for audit purposes</li> <li>Error Logging: Errors are logged for troubleshooting</li> <li>Performance Monitoring: System performance is monitored</li> <li>Health Checks: Regular checks ensure system components are functioning properly</li> </ul>"},{"location":"architecture/high-level-system/#deployment-architecture","title":"Deployment Architecture","text":"<p>The system is deployed using Docker containers:</p> <ul> <li>Containerization: Each component runs in a Docker container</li> <li>Docker Compose: Containers are orchestrated using Docker Compose</li> <li>Environment Configuration: Environment-specific configuration is managed through environment variables</li> <li>CI/CD Pipeline: Automated build and deployment process</li> </ul>"},{"location":"architecture/high-level-system/#conclusion","title":"Conclusion","text":"<p>The PAAL system architecture is designed to be scalable, maintainable, and secure. It follows modern best practices for web application development, with a clear separation of concerns and modular components. The architecture supports the system's requirements for real-time data processing, analytics, and user interaction, while providing a foundation for future enhancements and scaling.</p>"},{"location":"backend/api-design/","title":"API Design and Documentation","text":""},{"location":"backend/api-design/#overview","title":"Overview","text":"<p>The backend utilizes RESTful API that allows clients to interact with the system's resources. This document details the API design principles, authentication mechanisms, endpoint specifications, and implementation details to serve as a complete reference for developers working with the API.</p>"},{"location":"backend/api-design/#api-design-principles","title":"API Design Principles","text":"<p>The API follows these key design principles to ensure consistency, reliability, and maintainability:</p>"},{"location":"backend/api-design/#1-restful-architecture","title":"1. RESTful Architecture","text":"<p>Resources are represented as URLs, and standard HTTP methods are used for operations:</p> <ul> <li>GET: Retrieve a resource or collection of resources</li> <li>POST: Create a new resource</li> <li>PUT: Update an existing resource (full update)</li> <li>PATCH: Partially update an existing resource</li> <li>DELETE: Remove a resource</li> </ul> <p>Example resource hierarchy:</p> <pre><code>/farms                  # Collection of farms\n/farms/{id}             # Specific farm\n/farms/{id}/barns       # Collection of barns in a farm\n/farms/{id}/barns/{id}  # Specific barn in a farm\n</code></pre>"},{"location":"backend/api-design/#2-json-format","title":"2. JSON Format","text":"<p>All requests and responses use JSON format for data exchange:</p> <ul> <li>Request bodies must use <code>Content-Type: application/json</code></li> <li>Responses are returned with <code>Content-Type: application/json</code></li> <li>Date fields use ISO 8601 format (e.g., <code>2023-06-15T10:30:45.123Z</code>)</li> <li>Numeric IDs are represented as strings when used as resource identifiers</li> </ul>"},{"location":"backend/api-design/#3-consistent-response-structure","title":"3. Consistent Response Structure","text":"<p>Responses follow a consistent structure for both success and error cases:</p> <p>Success Responses:</p> <pre><code>{\n  \"data\": {\n    // Resource data or collection\n  },\n  \"meta\": {\n    // Metadata about the response (pagination, etc.)\n  }\n}\n</code></pre> <p>Error Responses:</p> <pre><code>{\n  \"error\": {\n    \"code\": \"ERROR_CODE\",\n    \"message\": \"Human-readable error message\",\n    \"details\": [\n      // Optional additional error details\n    ]\n  }\n}\n</code></pre>"},{"location":"backend/api-design/#4-proper-http-status-codes","title":"4. Proper HTTP Status Codes","text":"<p>Appropriate HTTP status codes are used to indicate the result of operations:</p> Code Description Usage 200 OK Successful GET, PUT, PATCH, or DELETE 201 Created Successful resource creation (POST) 204 No Content Successful operation with no response body 400 Bad Request Invalid request format or parameters 401 Unauthorized Missing or invalid authentication 403 Forbidden Authentication succeeded but insufficient permissions 404 Not Found Resource not found 409 Conflict Request conflicts with current state (e.g., duplicate) 422 Unprocessable Entity Validation errors 429 Too Many Requests Rate limit exceeded 500 Internal Server Error Server-side error"},{"location":"backend/api-design/#5-authentication-required","title":"5. Authentication Required","text":"<p>Most endpoints require authentication via JWT:</p> <ul> <li>Tokens are obtained through the authentication endpoints</li> <li>Tokens must be included in the <code>Authorization</code> header</li> <li>Token expiration and refresh mechanisms are implemented</li> <li>Sensitive operations require re-authentication</li> </ul>"},{"location":"backend/api-design/#6-role-based-access-control","title":"6. Role-Based Access Control","text":"<p>Endpoints enforce appropriate authorization based on user roles:</p> Role Description Access Level Admin System administrator Full access to all resources Manager Farm manager Access to assigned farms and all their resources Farmer Farm worker Limited access to assigned farms Viewer Read-only user Read-only access to assigned resources"},{"location":"backend/api-design/#7-pagination","title":"7. Pagination","text":"<p>Large result sets are paginated to improve performance:</p> <ul> <li>Default page size is 20 items</li> <li>Maximum page size is 100 items</li> <li>Pagination parameters: <code>page</code> (1-based) and <code>limit</code></li> <li>Pagination metadata is included in the response</li> </ul> <p>Example pagination metadata:</p> <pre><code>\"meta\": {\n  \"pagination\": {\n    \"page\": 2,\n    \"limit\": 20,\n    \"totalItems\": 156,\n    \"totalPages\": 8,\n    \"hasNextPage\": true,\n    \"hasPrevPage\": true\n  }\n}\n</code></pre>"},{"location":"backend/api-design/#8-filtering-and-sorting","title":"8. Filtering and Sorting","text":"<p>Resources can be filtered and sorted using query parameters:</p> <ul> <li>Filtering: <code>?field=value</code> or <code>?field[operator]=value</code></li> <li>Sorting: <code>?sort=field</code> (ascending) or <code>?sort=-field</code> (descending)</li> <li>Multiple filters and sorts can be combined</li> <li>Complex filtering uses JSON-encoded filter objects</li> </ul> <p>Example filtering and sorting:</p> <pre><code>/api/pigs?breed=Yorkshire&amp;age[gte]=12&amp;sort=-updatedAt\n</code></pre>"},{"location":"backend/api-design/#9-versioning","title":"9. Versioning","text":"<p>API versioning is supported through URL paths:</p> <ul> <li>Current version: v1 (implicit in base URL)</li> <li>Future versions will use explicit versioning: <code>/api/v2/...</code></li> <li>Version changes are documented in the API changelog</li> <li>Multiple versions may be supported simultaneously during transitions</li> </ul>"},{"location":"backend/api-design/#10-rate-limiting","title":"10. Rate Limiting","text":"<p>API endpoints are protected by rate limiting:</p> <ul> <li>Rate limits vary by endpoint sensitivity</li> <li>Rate limit headers are included in responses</li> <li>Exceeding rate limits results in 429 responses</li> <li>Backoff strategies are recommended for clients</li> </ul> <p>Rate limit headers:</p> <pre><code>X-RateLimit-Limit: 100\nX-RateLimit-Remaining: 95\nX-RateLimit-Reset: 1623760500\n</code></pre>"},{"location":"backend/api-design/#11-comprehensive-documentation","title":"11. Comprehensive Documentation","text":"<p>All API endpoints are thoroughly documented:</p> <ul> <li>OpenAPI/Swagger specifications</li> <li>Request/response examples</li> <li>Authentication requirements</li> <li>Error scenarios</li> <li>Rate limiting information</li> </ul>"},{"location":"backend/api-design/#base-url","title":"Base URL","text":"<p>The base URL for all API endpoints is:</p> <pre><code>http://localhost:8080/api\n</code></pre> <p>In production environments, this would be replaced with the appropriate domain.</p>"},{"location":"backend/api-design/#authentication","title":"Authentication","text":""},{"location":"backend/api-design/#authentication-mechanism","title":"Authentication Mechanism","text":"<p>The API uses JSON Web Tokens (JWT) for authentication, providing a stateless, secure method for authenticating API requests. This section details the complete authentication flow, token structure, and security considerations.</p>"},{"location":"backend/api-design/#authentication-flow","title":"Authentication Flow","text":"<ol> <li>Client Authentication: Client submits credentials to the <code>/api/auth/login</code> endpoint</li> <li>Server Validation: Server validates credentials against the database</li> <li>Token Generation: Server generates a JWT token containing user information and permissions</li> <li>Token Response: Server returns the token to the client</li> <li>Token Storage: Client stores the token (typically in localStorage or secure cookie)</li> <li>Authenticated Requests: Client includes the token in the <code>Authorization</code> header of subsequent requests</li> <li>Token Verification: Server verifies the token signature and expiration</li> <li>Authorization: Server checks user permissions for the requested resource</li> <li>Response: Server returns the requested resource or an error</li> </ol>"},{"location":"backend/api-design/#token-structure","title":"Token Structure","text":"<p>The JWT token consists of three parts: header, payload, and signature.</p> <p>Header:</p> <pre><code>{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n</code></pre> <p>Payload:</p> <pre><code>{\n  \"id\": \"60d21b4667d0d8992e610c85\",\n  \"email\": \"user@example.com\",\n  \"role\": \"admin\",\n  \"permissions\": [\"read:farms\", \"write:pigs\"],\n  \"iat\": 1623760500,\n  \"exp\": 1623846900\n}\n</code></pre> <p>Signature: The signature is created by encoding the header and payload with a secret key.</p>"},{"location":"backend/api-design/#token-usage","title":"Token Usage","text":"<p>To access protected endpoints, clients must include the token in the <code>Authorization</code> header:</p> <pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwZDIxYjQ2NjdkMGQ4OTkyZTYxMGM4NSIsImVtYWlsIjoidXNlckBleGFtcGxlLmNvbSIsInJvbGUiOiJhZG1pbiIsInBlcm1pc3Npb25zIjpbInJlYWQ6ZmFybXMiLCJ3cml0ZTpwaWdzIl0sImlhdCI6MTYyMzc2MDUwMCwiZXhwIjoxNjIzODQ2OTAwfQ.8yF7MJoo2RL4xMw2Sy2CGF6YHF8L2Q3CMTHfNXfBnLc\n</code></pre>"},{"location":"backend/api-design/#token-expiration-and-refresh","title":"Token Expiration and Refresh","text":"<p>Tokens have a limited lifespan for security reasons:</p> <ul> <li>Access Tokens: Valid for 24 hours</li> <li>Refresh Tokens: Valid for 7 days (when implemented)</li> </ul> <p>When a token expires, clients can:</p> <ol> <li>Redirect the user to the login page</li> <li>Use a refresh token to obtain a new access token (when implemented)</li> <li>Implement silent refresh before token expiration</li> </ol>"},{"location":"backend/api-design/#token-refresh-flow","title":"Token Refresh Flow","text":"<ol> <li>Client detects token expiration (or proactively refreshes before expiration)</li> <li>Client sends refresh token to <code>/api/auth/refresh</code> endpoint</li> <li>Server validates refresh token</li> <li>Server issues new access token</li> <li>Client updates stored access token</li> </ol>"},{"location":"backend/api-design/#security-considerations","title":"Security Considerations","text":"<p>The authentication system implements several security measures:</p> <ol> <li>HTTPS Only: All authentication requests must use HTTPS</li> <li>Token Expiration: Tokens have a limited lifespan</li> <li>Secure Storage: Clients should store tokens securely</li> <li>CSRF Protection: Implemented for browser-based clients</li> <li>Rate Limiting: Login and token endpoints are rate-limited</li> <li>Token Revocation: Administrators can revoke tokens</li> <li>Password Policies: Strong password requirements are enforced</li> <li>Brute Force Protection: Account lockout after multiple failed attempts</li> </ol>"},{"location":"backend/api-design/#implementation-details","title":"Implementation Details","text":"<p>The authentication system is implemented using the following components:</p> <ol> <li>jsonwebtoken: Library for generating and verifying JWTs</li> <li>bcrypt: Library for password hashing</li> <li>express-rate-limit: Middleware for rate limiting</li> <li>helmet: Middleware for security headers</li> <li>Custom Middleware: For token verification and authorization</li> </ol> <pre><code>// Example token verification middleware\nconst authenticateJWT = (req, res, next) =&gt; {\n  const authHeader = req.headers.authorization;\n\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return res.status(401).json({\n      error: {\n        code: 'UNAUTHORIZED',\n        message: 'Authentication required'\n      }\n    });\n  }\n\n  const token = authHeader.split(' ')[1];\n\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    req.user = decoded;\n    next();\n  } catch (error) {\n    if (error.name === 'TokenExpiredError') {\n      return res.status(401).json({\n        error: {\n          code: 'TOKEN_EXPIRED',\n          message: 'Token has expired'\n        }\n      });\n    }\n\n    return res.status(401).json({\n      error: {\n        code: 'INVALID_TOKEN',\n        message: 'Invalid token'\n      }\n    });\n  }\n};\n</code></pre>"},{"location":"backend/api-design/#authentication-endpoints","title":"Authentication Endpoints","text":""},{"location":"backend/api-design/#login","title":"Login","text":"<p>Authenticates a user with email and password credentials and returns a JWT token.</p> <ul> <li>URL: <code>/api/auth/login</code></li> <li>Method: <code>POST</code></li> <li>Auth Required: No</li> <li>Rate Limit: 5 requests per minute per IP address</li> <li>Content-Type: <code>application/json</code></li> </ul>"},{"location":"backend/api-design/#request-parameters","title":"Request Parameters","text":"<p>Request Body:</p> Parameter Type Required Description <code>email</code> String Yes User's email address <code>password</code> String Yes User's password (min 8 characters) <code>rememberMe</code> Boolean No Whether to extend token expiration (default: false) <p>Example Request:</p> <pre><code>{\n  \"email\": \"user@example.com\",\n  \"password\": \"password123\",\n  \"rememberMe\": true\n}\n</code></pre>"},{"location":"backend/api-design/#response-parameters","title":"Response Parameters","text":"<p>Success Response (200 OK):</p> Parameter Type Description <code>token</code> String JWT authentication token <code>refreshToken</code> String JWT refresh token (only if rememberMe is true) <code>expiresIn</code> Number Token expiration time in seconds <code>user</code> Object User information <code>user.id</code> String User's unique identifier <code>user.email</code> String User's email address <code>user.firstName</code> String User's first name <code>user.lastName</code> String User's last name <code>user.role</code> String User's role (admin, manager, farmer, viewer) <code>user.lastLogin</code> String ISO 8601 timestamp of last login <code>user.assignedFarm</code> Object Farm assigned to the user (if applicable) <code>user.permissions</code> Array List of user permissions <p>Example Success Response:</p> <pre><code>{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwZDIxYjQ2NjdkMGQ4OTkyZTYxMGM4NSIsImVtYWlsIjoidXNlckBleGFtcGxlLmNvbSIsInJvbGUiOiJhZG1pbiIsInBlcm1pc3Npb25zIjpbInJlYWQ6ZmFybXMiLCJ3cml0ZTpwaWdzIl0sImlhdCI6MTYyMzc2MDUwMCwiZXhwIjoxNjIzODQ2OTAwfQ.8yF7MJoo2RL4xMw2Sy2CGF6YHF8L2Q3CMTHfNXfBnLc\",\n  \"refreshToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwZDIxYjQ2NjdkMGQ4OTkyZTYxMGM4NSIsInR5cGUiOiJyZWZyZXNoIiwiaWF0IjoxNjIzNzYwNTAwLCJleHAiOjE2MjQzNjUzMDB9.7UKIzA3sLVRaJaT_FIM9w7G_ZxH9bS1JV2cv7dxsQxE\",\n  \"expiresIn\": 86400,\n  \"user\": {\n    \"id\": \"60d21b4667d0d8992e610c85\",\n    \"email\": \"user@example.com\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"role\": \"admin\",\n    \"lastLogin\": \"2023-06-15T10:30:45.123Z\",\n    \"assignedFarm\": {\n      \"id\": \"60d21b4667d0d8992e610c87\",\n      \"name\": \"Farm 1\"\n    },\n    \"permissions\": [\n      \"read:farms\",\n      \"write:farms\",\n      \"read:barns\",\n      \"write:barns\",\n      \"read:stalls\",\n      \"write:stalls\",\n      \"read:pigs\",\n      \"write:pigs\",\n      \"read:users\",\n      \"write:users\"\n    ]\n  }\n}\n</code></pre>"},{"location":"backend/api-design/#error-responses","title":"Error Responses","text":"Status Code Error Code Description Possible Cause 400 <code>MISSING_CREDENTIALS</code> Missing email or password Required fields not provided 400 <code>INVALID_EMAIL_FORMAT</code> Invalid email format Email doesn't match expected format 401 <code>INVALID_CREDENTIALS</code> Invalid credentials Email or password is incorrect 403 <code>ACCOUNT_INACTIVE</code> Account is inactive User account has been deactivated 403 <code>ACCOUNT_LOCKED</code> Account is locked Too many failed login attempts 429 <code>RATE_LIMIT_EXCEEDED</code> Too many requests Rate limit exceeded <p>Example Error Response (401 Unauthorized):</p> <pre><code>{\n  \"error\": {\n    \"code\": \"INVALID_CREDENTIALS\",\n    \"message\": \"Invalid email or password\",\n    \"details\": {\n      \"remainingAttempts\": 4\n    }\n  }\n}\n</code></pre>"},{"location":"backend/api-design/#implementation-notes","title":"Implementation Notes","text":"<ol> <li>Password Validation:</li> <li>Passwords are hashed using bcrypt before comparison</li> <li> <p>Failed login attempts are tracked and limited</p> </li> <li> <p>Token Generation:</p> </li> <li>Tokens include user ID, role, and permissions</li> <li>Standard tokens expire in 24 hours</li> <li> <p>\"Remember me\" tokens expire in 7 days</p> </li> <li> <p>Security Measures:</p> </li> <li>Login attempts are rate-limited to prevent brute force attacks</li> <li>Account is temporarily locked after 5 failed attempts</li> <li>All login attempts are logged for security auditing</li> </ol>"},{"location":"backend/api-design/#code-example","title":"Code Example","text":"<pre><code>// routes/auth.js\nrouter.post('/login', loginLimiter, async (req, res) =&gt; {\n  try {\n    const { email, password, rememberMe = false } = req.body;\n\n    // Validate input\n    if (!email || !password) {\n      return res.status(400).json({\n        error: {\n          code: 'MISSING_CREDENTIALS',\n          message: 'Email and password are required'\n        }\n      });\n    }\n\n    // Validate email format\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      return res.status(400).json({\n        error: {\n          code: 'INVALID_EMAIL_FORMAT',\n          message: 'Invalid email format'\n        }\n      });\n    }\n\n    // Find user\n    const user = await User.findOne({ email: email.toLowerCase() });\n    if (!user) {\n      // Log failed attempt\n      await LoginAttempt.create({\n        email: email.toLowerCase(),\n        ipAddress: req.ip,\n        successful: false,\n        timestamp: new Date()\n      });\n\n      return res.status(401).json({\n        error: {\n          code: 'INVALID_CREDENTIALS',\n          message: 'Invalid email or password'\n        }\n      });\n    }\n\n    // Check if account is locked\n    const recentFailedAttempts = await LoginAttempt.countDocuments({\n      email: email.toLowerCase(),\n      successful: false,\n      timestamp: { $gt: new Date(Date.now() - 15 * 60 * 1000) } // Last 15 minutes\n    });\n\n    if (recentFailedAttempts &gt;= 5) {\n      return res.status(403).json({\n        error: {\n          code: 'ACCOUNT_LOCKED',\n          message: 'Account is locked due to too many failed attempts',\n          details: {\n            unlockTime: new Date(Date.now() + 15 * 60 * 1000)\n          }\n        }\n      });\n    }\n\n    // Check if user is active\n    if (!user.isActive) {\n      return res.status(403).json({\n        error: {\n          code: 'ACCOUNT_INACTIVE',\n          message: 'Account is inactive'\n        }\n      });\n    }\n\n    // Check password\n    const isMatch = await user.comparePassword(password);\n    if (!isMatch) {\n      // Log failed attempt\n      await LoginAttempt.create({\n        email: email.toLowerCase(),\n        ipAddress: req.ip,\n        successful: false,\n        timestamp: new Date(),\n        userId: user._id\n      });\n\n      return res.status(401).json({\n        error: {\n          code: 'INVALID_CREDENTIALS',\n          message: 'Invalid email or password',\n          details: {\n            remainingAttempts: 5 - recentFailedAttempts - 1\n          }\n        }\n      });\n    }\n\n    // Get user permissions\n    const permissions = await getUserPermissions(user);\n\n    // Generate JWT token\n    const tokenExpiration = rememberMe ? '7d' : '1d';\n    const expiresIn = rememberMe ? 7 * 24 * 60 * 60 : 24 * 60 * 60; // in seconds\n\n    const token = jwt.sign(\n      {\n        id: user._id,\n        role: user.role,\n        email: user.email,\n        permissions\n      },\n      process.env.JWT_SECRET,\n      { expiresIn: tokenExpiration }\n    );\n\n    // Generate refresh token if rememberMe is true\n    let refreshToken = null;\n    if (rememberMe) {\n      refreshToken = jwt.sign(\n        {\n          id: user._id,\n          type: 'refresh'\n        },\n        process.env.JWT_REFRESH_SECRET,\n        { expiresIn: '7d' }\n      );\n\n      // Store refresh token hash in database\n      const refreshTokenHash = await bcrypt.hash(refreshToken, 10);\n      await RefreshToken.create({\n        userId: user._id,\n        token: refreshTokenHash,\n        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)\n      });\n    }\n\n    // Update last login\n    user.lastLogin = new Date();\n    await user.save();\n\n    // Log successful login\n    await LoginAttempt.create({\n      email: email.toLowerCase(),\n      ipAddress: req.ip,\n      successful: true,\n      timestamp: new Date(),\n      userId: user._id\n    });\n\n    // Prepare user response (exclude sensitive data)\n    const userResponse = {\n      id: user._id,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      role: user.role,\n      lastLogin: user.lastLogin,\n      permissions\n    };\n\n    // Include assigned farm if exists\n    if (user.assignedFarm) {\n      const farm = await Farm.findById(user.assignedFarm);\n      if (farm) {\n        userResponse.assignedFarm = {\n          id: farm._id,\n          name: farm.name\n        };\n      }\n    }\n\n    // Return response\n    const response = {\n      token,\n      expiresIn\n    };\n\n    if (refreshToken) {\n      response.refreshToken = refreshToken;\n    }\n\n    response.user = userResponse;\n\n    res.json(response);\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({\n      error: {\n        code: 'SERVER_ERROR',\n        message: 'An unexpected error occurred'\n      }\n    });\n  }\n});\n</code></pre>"},{"location":"backend/api-design/#verify-token","title":"Verify Token","text":"<p>Verifies a token and returns the associated user information.</p> <ul> <li>URL: <code>/api/auth/token</code></li> <li>Method: <code>GET</code></li> <li>Auth Required: Yes</li> </ul> <p>Success Response (200 OK):</p> <pre><code>{\n  \"user\": {\n    \"id\": \"60d21b4667d0d8992e610c85\",\n    \"email\": \"user@example.com\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"role\": \"admin\",\n    \"assignedFarm\": {\n      \"id\": \"60d21b4667d0d8992e610c86\",\n      \"name\": \"Farm 1\"\n    }\n  },\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n}\n</code></pre> <p>Error Responses: - <code>401 Unauthorized</code>: Invalid or expired token - <code>404 Not Found</code>: User not found</p>"},{"location":"backend/api-design/#user-management-api","title":"User Management API","text":""},{"location":"backend/api-design/#get-all-users","title":"Get All Users","text":"<p>Retrieves a list of all users (admin only).</p> <ul> <li>URL: <code>/api/users</code></li> <li>Method: <code>GET</code></li> <li>Auth Required: Yes (Admin)</li> </ul> <p>Query Parameters: - <code>limit</code> (optional): Maximum number of users to return (default: 100) - <code>page</code> (optional): Page number for pagination (default: 1) - <code>sort</code> (optional): Field to sort by (default: \"lastName\") - <code>order</code> (optional): Sort order, \"asc\" or \"desc\" (default: \"asc\") - <code>search</code> (optional): Search term for filtering users</p> <p>Success Response (200 OK):</p> <pre><code>[\n  {\n    \"_id\": \"60d21b4667d0d8992e610c85\",\n    \"email\": \"admin@example.com\",\n    \"firstName\": \"Admin\",\n    \"lastName\": \"User\",\n    \"role\": \"admin\",\n    \"isActive\": true,\n    \"lastLogin\": \"2023-06-15T10:30:45.123Z\"\n  },\n  {\n    \"_id\": \"60d21b4667d0d8992e610c86\",\n    \"email\": \"farmer@example.com\",\n    \"firstName\": \"Farmer\",\n    \"lastName\": \"User\",\n    \"role\": \"farmer\",\n    \"isActive\": true,\n    \"lastLogin\": \"2023-06-14T08:15:30.456Z\",\n    \"assignedFarm\": \"60d21b4667d0d8992e610c87\"\n  }\n]\n</code></pre> <p>Error Responses: - <code>401 Unauthorized</code>: Not authenticated - <code>403 Forbidden</code>: Not authorized as admin - <code>500 Internal Server Error</code>: Server error</p>"},{"location":"backend/api-design/#get-user-by-id","title":"Get User by ID","text":"<p>Retrieves a specific user by ID.</p> <ul> <li>URL: <code>/api/users/:id</code></li> <li>Method: <code>GET</code></li> <li>Auth Required: Yes (Admin or self)</li> </ul> <p>Success Response (200 OK):</p> <pre><code>{\n  \"_id\": \"60d21b4667d0d8992e610c85\",\n  \"email\": \"user@example.com\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"role\": \"farmer\",\n  \"isActive\": true,\n  \"lastLogin\": \"2023-06-15T10:30:45.123Z\",\n  \"assignedFarm\": {\n    \"_id\": \"60d21b4667d0d8992e610c87\",\n    \"name\": \"Farm 1\"\n  },\n  \"permissions\": [\"read:farms\", \"write:pigs\"]\n}\n</code></pre> <p>Error Responses: - <code>401 Unauthorized</code>: Not authenticated - <code>403 Forbidden</code>: Not authorized to view this user - <code>404 Not Found</code>: User not found - <code>500 Internal Server Error</code>: Server error</p>"},{"location":"backend/api-design/#create-user","title":"Create User","text":"<p>Creates a new user (admin only).</p> <ul> <li>URL: <code>/api/auth/register</code></li> <li>Method: <code>POST</code></li> <li>Auth Required: Yes (Admin)</li> </ul> <p>Request Body:</p> <pre><code>{\n  \"email\": \"newuser@example.com\",\n  \"password\": \"password123\",\n  \"firstName\": \"New\",\n  \"lastName\": \"User\",\n  \"role\": \"farmer\",\n  \"permissions\": [\"read:farms\", \"write:pigs\"],\n  \"assignedFarm\": \"60d21b4667d0d8992e610c87\"\n}\n</code></pre> <p>Success Response (201 Created):</p> <pre><code>{\n  \"_id\": \"60d21b4667d0d8992e610c88\",\n  \"email\": \"newuser@example.com\",\n  \"firstName\": \"New\",\n  \"lastName\": \"User\",\n  \"role\": \"farmer\",\n  \"isActive\": true,\n  \"permissions\": [\"read:farms\", \"write:pigs\"],\n  \"assignedFarm\": \"60d21b4667d0d8992e610c87\"\n}\n</code></pre> <p>Error Responses: - <code>400 Bad Request</code>: Invalid input or user already exists - <code>401 Unauthorized</code>: Not authenticated - <code>403 Forbidden</code>: Not authorized as admin - <code>500 Internal Server Error</code>: Server error</p>"},{"location":"backend/api-design/#update-user","title":"Update User","text":"<p>Updates an existing user.</p> <ul> <li>URL: <code>/api/users/:id</code></li> <li>Method: <code>PUT</code></li> <li>Auth Required: Yes (Admin or self)</li> </ul> <p>Request Body:</p> <pre><code>{\n  \"firstName\": \"Updated\",\n  \"lastName\": \"Name\",\n  \"role\": \"farmer\",\n  \"isActive\": true,\n  \"assignedFarm\": \"60d21b4667d0d8992e610c87\"\n}\n</code></pre> <p>Success Response (200 OK):</p> <pre><code>{\n  \"_id\": \"60d21b4667d0d8992e610c85\",\n  \"email\": \"user@example.com\",\n  \"firstName\": \"Updated\",\n  \"lastName\": \"Name\",\n  \"role\": \"farmer\",\n  \"isActive\": true,\n  \"lastLogin\": \"2023-06-15T10:30:45.123Z\",\n  \"assignedFarm\": \"60d21b4667d0d8992e610c87\"\n}\n</code></pre> <p>Error Responses: - <code>400 Bad Request</code>: Invalid input - <code>401 Unauthorized</code>: Not authenticated - <code>403 Forbidden</code>: Not authorized to update this user - <code>404 Not Found</code>: User not found - <code>500 Internal Server Error</code>: Server error</p>"},{"location":"backend/api-design/#delete-user","title":"Delete User","text":"<p>Deletes a user (admin only).</p> <ul> <li>URL: <code>/api/users/:id</code></li> <li>Method: <code>DELETE</code></li> <li>Auth Required: Yes (Admin)</li> </ul> <p>Success Response (200 OK):</p> <pre><code>{\n  \"message\": \"User deleted successfully\"\n}\n</code></pre> <p>Error Responses: - <code>401 Unauthorized</code>: Not authenticated - <code>403 Forbidden</code>: Not authorized as admin - <code>404 Not Found</code>: User not found - <code>500 Internal Server Error</code>: Server error</p>"},{"location":"backend/api-design/#farm-management-api","title":"Farm Management API","text":""},{"location":"backend/api-design/#get-all-farms","title":"Get All Farms","text":"<p>Retrieves a list of all farms.</p> <ul> <li>URL: <code>/api/farms</code></li> <li>Method: <code>GET</code></li> <li>Auth Required: Yes</li> </ul> <p>Success Response (200 OK):</p> <pre><code>[\n  {\n    \"_id\": \"60d21b4667d0d8992e610c87\",\n    \"name\": \"Farm 1\",\n    \"location\": \"Location 1\",\n    \"description\": \"Description for Farm 1\",\n    \"isActive\": true,\n    \"counts\": {\n      \"barns\": 5,\n      \"stalls\": 20,\n      \"pigs\": 100\n    }\n  },\n  {\n    \"_id\": \"60d21b4667d0d8992e610c88\",\n    \"name\": \"Farm 2\",\n    \"location\": \"Location 2\",\n    \"description\": \"Description for Farm 2\",\n    \"isActive\": true,\n    \"counts\": {\n      \"barns\": 3,\n      \"stalls\": 12,\n      \"pigs\": 60\n    }\n  }\n]\n</code></pre> <p>Error Responses: - <code>401 Unauthorized</code>: Not authenticated - <code>500 Internal Server Error</code>: Server error</p>"},{"location":"backend/api-design/#get-farm-by-id","title":"Get Farm by ID","text":"<p>Retrieves a specific farm by ID.</p> <ul> <li>URL: <code>/api/farms/:id</code></li> <li>Method: <code>GET</code></li> <li>Auth Required: Yes</li> </ul> <p>Success Response (200 OK):</p> <pre><code>{\n  \"_id\": \"60d21b4667d0d8992e610c87\",\n  \"name\": \"Farm 1\",\n  \"location\": \"Location 1\",\n  \"description\": \"Description for Farm 1\",\n  \"isActive\": true,\n  \"counts\": {\n    \"barns\": 5,\n    \"stalls\": 20,\n    \"pigs\": 100,\n    \"devices\": 15\n  },\n  \"healthStatus\": {\n    \"healthy\": 80,\n    \"atRisk\": 15,\n    \"critical\": 5\n  },\n  \"barns\": [\n    {\n      \"_id\": \"60d21b4667d0d8992e610c89\",\n      \"name\": \"Barn A\",\n      \"farmId\": \"60d21b4667d0d8992e610c87\",\n      \"stallCount\": 8\n    },\n    {\n      \"_id\": \"60d21b4667d0d8992e610c90\",\n      \"name\": \"Barn B\",\n      \"farmId\": \"60d21b4667d0d8992e610c87\",\n      \"stallCount\": 12\n    }\n  ],\n  \"recentPigs\": [\n    {\n      \"pigId\": 1001,\n      \"tag\": \"PIG-1001\",\n      \"breed\": \"Yorkshire\",\n      \"age\": 12\n    }\n  ],\n  \"devices\": [\n    {\n      \"_id\": \"60d21b4667d0d8992e610c91\",\n      \"deviceId\": \"DEV-001\",\n      \"type\": \"temperature\",\n      \"status\": \"active\"\n    }\n  ]\n}\n</code></pre> <p>Error Responses: - <code>401 Unauthorized</code>: Not authenticated - <code>403 Forbidden</code>: Not authorized to access this farm - <code>404 Not Found</code>: Farm not found - <code>500 Internal Server Error</code>: Server error</p>"},{"location":"backend/api-design/#create-farm","title":"Create Farm","text":"<p>Creates a new farm (admin only).</p> <ul> <li>URL: <code>/api/farms</code></li> <li>Method: <code>POST</code></li> <li>Auth Required: Yes (Admin)</li> </ul> <p>Request Body:</p> <pre><code>{\n  \"name\": \"New Farm\",\n  \"location\": \"New Location\",\n  \"description\": \"Description for New Farm\",\n  \"isActive\": true\n}\n</code></pre> <p>Success Response (201 Created):</p> <pre><code>{\n  \"_id\": \"60d21b4667d0d8992e610c92\",\n  \"name\": \"New Farm\",\n  \"location\": \"New Location\",\n  \"description\": \"Description for New Farm\",\n  \"isActive\": true\n}\n</code></pre> <p>Error Responses: - <code>400 Bad Request</code>: Invalid input - <code>401 Unauthorized</code>: Not authenticated - <code>403 Forbidden</code>: Not authorized as admin - <code>500 Internal Server Error</code>: Server error</p>"},{"location":"backend/api-design/#update-farm","title":"Update Farm","text":"<p>Updates an existing farm (admin only).</p> <ul> <li>URL: <code>/api/farms/:id</code></li> <li>Method: <code>PUT</code></li> <li>Auth Required: Yes (Admin)</li> </ul> <p>Request Body:</p> <pre><code>{\n  \"name\": \"Updated Farm\",\n  \"location\": \"Updated Location\",\n  \"description\": \"Updated description\",\n  \"isActive\": true\n}\n</code></pre> <p>Success Response (200 OK):</p> <pre><code>{\n  \"_id\": \"60d21b4667d0d8992e610c87\",\n  \"name\": \"Updated Farm\",\n  \"location\": \"Updated Location\",\n  \"description\": \"Updated description\",\n  \"isActive\": true\n}\n</code></pre> <p>Error Responses: - <code>400 Bad Request</code>: Invalid input - <code>401 Unauthorized</code>: Not authenticated - <code>403 Forbidden</code>: Not authorized as admin - <code>404 Not Found</code>: Farm not found - <code>500 Internal Server Error</code>: Server error</p>"},{"location":"backend/api-design/#delete-farm","title":"Delete Farm","text":"<p>Deletes a farm (admin only).</p> <ul> <li>URL: <code>/api/farms/:id</code></li> <li>Method: <code>DELETE</code></li> <li>Auth Required: Yes (Admin)</li> </ul> <p>Query Parameters: - <code>cascade</code> (optional): If \"true\", deletes all associated barns, stalls, and pigs</p> <p>Success Response (200 OK):</p> <pre><code>{\n  \"message\": \"Farm deleted successfully\"\n}\n</code></pre> <p>Error Responses: - <code>401 Unauthorized</code>: Not authenticated - <code>403 Forbidden</code>: Not authorized as admin - <code>404 Not Found</code>: Farm not found - <code>500 Internal Server Error</code>: Server error</p>"},{"location":"backend/api-design/#pig-management-api","title":"Pig Management API","text":""},{"location":"backend/api-design/#get-all-pigs","title":"Get All Pigs","text":"<p>Retrieves a list of all pigs.</p> <ul> <li>URL: <code>/api/pigs</code></li> <li>Method: <code>GET</code></li> <li>Auth Required: Yes</li> </ul> <p>Success Response (200 OK):</p> <pre><code>[\n  {\n    \"owner\": \"PIG-001\",\n    \"status\": \"healthy\",\n    \"costs\": \"12\",\n    \"region\": \"Stall A\",\n    \"stability\": 0.8,\n    \"lastEdited\": \"01/01/2023, 12:00\",\n    \"breed\": \"Yorkshire\",\n    \"active\": true\n  },\n  {\n    \"owner\": \"PIG-002\",\n    \"status\": \"at risk\",\n    \"costs\": \"8\",\n    \"region\": \"Stall B\",\n    \"stability\": 0.4,\n    \"lastEdited\": \"02/01/2023, 14:30\",\n    \"breed\": \"Duroc\",\n    \"active\": true\n  }\n]\n</code></pre> <p>Error Responses: - <code>401 Unauthorized</code>: Not authenticated - <code>500 Internal Server Error</code>: Server error</p>"},{"location":"backend/api-design/#get-pig-overview","title":"Get Pig Overview","text":"<p>Retrieves aggregated pig data for the dashboard.</p> <ul> <li>URL: <code>/api/pigs/overview</code></li> <li>Method: <code>GET</code></li> <li>Auth Required: Yes</li> </ul> <p>Query Parameters: - <code>filter</code> (optional): Filter by category (e.g., \"breeding\", \"new\", \"healthy\")</p> <p>Success Response (200 OK):</p> <pre><code>{\n  \"success\": true,\n  \"data\": [\n    {\n      \"name\": \"Breeding\",\n      \"Farm 1\": 10,\n      \"Farm 2\": 5,\n      \"averageWeight\": 120\n    },\n    {\n      \"name\": \"Healthy\",\n      \"Farm 1\": 80,\n      \"Farm 2\": 40,\n      \"averageWeight\": 100\n    },\n    {\n      \"name\": \"At Risk\",\n      \"Farm 1\": 15,\n      \"Farm 2\": 10,\n      \"averageWeight\": 90\n    }\n  ],\n  \"stats\": {\n    \"totalPigs\": 160,\n    \"categories\": [\"Breeding\", \"Healthy\", \"At Risk\"],\n    \"locations\": [\"Farm 1\", \"Farm 2\"]\n  }\n}\n</code></pre> <p>Error Responses: - <code>401 Unauthorized</code>: Not authenticated - <code>500 Internal Server Error</code>: Server error</p>"},{"location":"backend/api-design/#get-pig-by-id","title":"Get Pig by ID","text":"<p>Retrieves a specific pig by ID.</p> <ul> <li>URL: <code>/api/pigs/:id</code></li> <li>Method: <code>GET</code></li> <li>Auth Required: Yes</li> </ul> <p>Success Response (200 OK):</p> <pre><code>{\n  \"pigId\": 1001,\n  \"tag\": \"PIG-1001\",\n  \"breed\": \"Yorkshire\",\n  \"age\": 12,\n  \"currentLocation\": {\n    \"farmId\": {\n      \"_id\": \"60d21b4667d0d8992e610c87\",\n      \"name\": \"Farm 1\"\n    },\n    \"barnId\": {\n      \"_id\": \"60d21b4667d0d8992e610c89\",\n      \"name\": \"Barn A\"\n    },\n    \"stallId\": {\n      \"_id\": \"60d21b4667d0d8992e610c93\",\n      \"name\": \"Stall 1\"\n    }\n  },\n  \"active\": true\n}\n</code></pre> <p>Error Responses: - <code>400 Bad Request</code>: Invalid pig ID - <code>401 Unauthorized</code>: Not authenticated - <code>404 Not Found</code>: Pig not found - <code>500 Internal Server Error</code>: Server error</p>"},{"location":"backend/api-design/#get-pig-posture-data","title":"Get Pig Posture Data","text":"<p>Retrieves posture data for a specific pig.</p> <ul> <li>URL: <code>/api/pigs/:id/posture/aggregated</code></li> <li>Method: <code>GET</code></li> <li>Auth Required: Yes</li> </ul> <p>Query Parameters: - <code>start</code> (optional): Start date (YYYY-MM-DD) - <code>end</code> (optional): End date (YYYY-MM-DD)</p> <p>Success Response (200 OK):</p> <pre><code>[\n  {\n    \"date\": \"2022-08-01\",\n    \"standing\": 45,\n    \"sitting\": 30,\n    \"lying\": 25\n  },\n  {\n    \"date\": \"2022-08-02\",\n    \"standing\": 40,\n    \"sitting\": 35,\n    \"lying\": 25\n  },\n  {\n    \"date\": \"2022-08-03\",\n    \"standing\": 50,\n    \"sitting\": 25,\n    \"lying\": 25\n  }\n]\n</code></pre> <p>Error Responses: - <code>400 Bad Request</code>: Invalid pig ID or date range - <code>401 Unauthorized</code>: Not authenticated - <code>404 Not Found</code>: Pig not found - <code>500 Internal Server Error</code>: Server error</p>"},{"location":"backend/api-design/#create-pig","title":"Create Pig","text":"<p>Creates a new pig.</p> <ul> <li>URL: <code>/api/pigs</code></li> <li>Method: <code>POST</code></li> <li>Auth Required: Yes</li> </ul> <p>Request Body:</p> <pre><code>{\n  \"pigId\": 1003,\n  \"tag\": \"PIG-1003\",\n  \"breed\": \"Yorkshire\",\n  \"age\": 10,\n  \"currentLocation\": {\n    \"farmId\": \"60d21b4667d0d8992e610c87\",\n    \"barnId\": \"60d21b4667d0d8992e610c89\",\n    \"stallId\": \"60d21b4667d0d8992e610c93\"\n  }\n}\n</code></pre> <p>Success Response (201 Created):</p> <pre><code>{\n  \"success\": true,\n  \"pig\": {\n    \"pigId\": 1003,\n    \"tag\": \"PIG-1003\",\n    \"breed\": \"Yorkshire\",\n    \"age\": 10,\n    \"currentLocation\": {\n      \"farmId\": \"60d21b4667d0d8992e610c87\",\n      \"barnId\": \"60d21b4667d0d8992e610c89\",\n      \"stallId\": \"60d21b4667d0d8992e610c93\"\n    },\n    \"active\": true,\n    \"_id\": \"60d21b4667d0d8992e610c94\"\n  }\n}\n</code></pre> <p>Error Responses: - <code>400 Bad Request</code>: Invalid input or pig ID already exists - <code>401 Unauthorized</code>: Not authenticated - <code>500 Internal Server Error</code>: Server error</p>"},{"location":"backend/api-design/#statistics-api","title":"Statistics API","text":""},{"location":"backend/api-design/#get-system-statistics","title":"Get System Statistics","text":"<p>Retrieves system-wide statistics.</p> <ul> <li>URL: <code>/api/stats</code></li> <li>Method: <code>GET</code></li> <li>Auth Required: Yes</li> </ul> <p>Success Response (200 OK):</p> <pre><code>{\n  \"counts\": {\n    \"pigs\": 160,\n    \"farms\": 2,\n    \"barns\": 8,\n    \"stalls\": 32,\n    \"devices\": 15\n  },\n  \"healthStatus\": {\n    \"healthy\": 120,\n    \"at risk\": 25,\n    \"critical\": 10,\n    \"no movement\": 5\n  },\n  \"recentActivity\": [\n    {\n      \"_id\": \"60d21b4667d0d8992e610c95\",\n      \"type\": \"pig\",\n      \"action\": \"created\",\n      \"description\": \"Pig PIG-1003 was added to the system\",\n      \"timestamp\": \"2023-06-15T14:30:45.123Z\",\n      \"userId\": {\n        \"firstName\": \"John\",\n        \"lastName\": \"Doe\",\n        \"email\": \"john@example.com\"\n      }\n    }\n  ]\n}\n</code></pre> <p>Error Responses: - <code>401 Unauthorized</code>: Not authenticated - <code>500 Internal Server Error</code>: Server error</p>"},{"location":"backend/api-design/#activity-logging-api","title":"Activity Logging API","text":""},{"location":"backend/api-design/#get-recent-activities","title":"Get Recent Activities","text":"<p>Retrieves recent system activities.</p> <ul> <li>URL: <code>/api/activities</code></li> <li>Method: <code>GET</code></li> <li>Auth Required: Yes</li> </ul> <p>Query Parameters: - <code>limit</code> (optional): Maximum number of activities to return (default: 10) - <code>type</code> (optional): Filter by activity type (e.g., \"user\", \"pig\", \"farm\") - <code>userId</code> (optional): Filter by user ID</p> <p>Success Response (200 OK):</p> <pre><code>[\n  {\n    \"_id\": \"60d21b4667d0d8992e610c95\",\n    \"type\": \"pig\",\n    \"action\": \"created\",\n    \"description\": \"Pig PIG-1003 was added to the system\",\n    \"timestamp\": \"2023-06-15T14:30:45.123Z\",\n    \"userId\": {\n      \"_id\": \"60d21b4667d0d8992e610c85\",\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"email\": \"john@example.com\"\n    },\n    \"entityId\": \"60d21b4667d0d8992e610c94\",\n    \"metadata\": {\n      \"pigId\": 1003,\n      \"tag\": \"PIG-1003\"\n    }\n  },\n  {\n    \"_id\": \"60d21b4667d0d8992e610c96\",\n    \"type\": \"user\",\n    \"action\": \"login\",\n    \"description\": \"User \\\"john@example.com\\\" logged in\",\n    \"timestamp\": \"2023-06-15T10:30:45.123Z\",\n    \"userId\": {\n      \"_id\": \"60d21b4667d0d8992e610c85\",\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"email\": \"john@example.com\"\n    },\n    \"metadata\": {\n      \"email\": \"john@example.com\",\n      \"role\": \"admin\"\n    }\n  }\n]\n</code></pre> <p>Error Responses: - <code>401 Unauthorized</code>: Not authenticated - <code>500 Internal Server Error</code>: Server error</p>"},{"location":"backend/api-design/#data-upload-api","title":"Data Upload API","text":""},{"location":"backend/api-design/#upload-posture-data","title":"Upload Posture Data","text":"<p>Uploads posture data for a pig.</p> <ul> <li>URL: <code>/api/upload/postureupload</code></li> <li>Method: <code>POST</code></li> <li>Auth Required: Yes</li> </ul> <p>Request Body:</p> <pre><code>{\n  \"pigId\": 1001,\n  \"timestamp\": \"2023-06-15T12:00:00.000Z\",\n  \"score\": 3\n}\n</code></pre> <p>Success Response (201 Created):</p> <pre><code>{\n  \"success\": true,\n  \"data\": {\n    \"pigId\": 1001,\n    \"timestamp\": \"2023-06-15T12:00:00.000Z\",\n    \"score\": 3,\n    \"_id\": \"60d21b4667d0d8992e610c97\"\n  }\n}\n</code></pre> <p>Error Responses: - <code>400 Bad Request</code>: Invalid input - <code>401 Unauthorized</code>: Not authenticated - <code>404 Not Found</code>: Pig not found - <code>500 Internal Server Error</code>: Server error</p>"},{"location":"backend/api-design/#real-time-communication","title":"Real-time Communication","text":"<p>In addition to the RESTful API, the system provides real-time updates via Socket.IO.</p>"},{"location":"backend/api-design/#socketio-events","title":"Socket.IO Events","text":""},{"location":"backend/api-design/#connection","title":"Connection","text":"<p>Clients connect to the Socket.IO server:</p> <pre><code>// Client-side code\nimport { io } from 'socket.io-client';\n\nconst socket = io('http://localhost:8080', {\n  path: '/socket.io',\n  transports: ['websocket']\n});\n\nsocket.on('connect', () =&gt; {\n  console.log('Connected to Socket.IO server');\n\n  // Join rooms based on user role\n  socket.emit('join', {\n    userId: 'user-id',\n    role: 'admin',\n    assignedFarm: 'farm-id'\n  });\n});\n</code></pre>"},{"location":"backend/api-design/#stats-update","title":"Stats Update","text":"<p>Clients receive updated statistics:</p> <pre><code>// Client-side code\nsocket.on('stats_update', (stats) =&gt; {\n  console.log('Received updated stats:', stats);\n  // Update UI with new stats\n});\n</code></pre>"},{"location":"backend/api-design/#activity-update","title":"Activity Update","text":"<p>Clients receive new activity logs:</p> <pre><code>// Client-side code\nsocket.on('activity', (activity) =&gt; {\n  console.log('New activity:', activity);\n  // Update activity feed in UI\n});\n</code></pre>"},{"location":"backend/api-design/#rate-limiting","title":"Rate Limiting","text":"<p>To protect the API from abuse, rate limiting is implemented on certain endpoints:</p> <ul> <li><code>/api/auth/login</code>: 5 requests per minute per IP</li> <li>Most other endpoints: 100 requests per 15 minutes per IP</li> </ul> <p>When a rate limit is exceeded, the API returns a <code>429 Too Many Requests</code> response with information about when the limit will reset.</p>"},{"location":"backend/api-design/#error-handling","title":"Error Handling","text":"<p>The PAAL API implements a comprehensive and consistent error handling strategy to provide clear, actionable feedback to clients. This section details the error response format, error categorization, and implementation details.</p>"},{"location":"backend/api-design/#error-response-format","title":"Error Response Format","text":"<p>All API error responses follow a consistent structure:</p> <pre><code>{\n  \"error\": {\n    \"code\": \"ERROR_CODE\",\n    \"message\": \"Human-readable error message\",\n    \"details\": {\n      // Additional context-specific error details\n    },\n    \"path\": \"/api/resource/123\",\n    \"timestamp\": \"2023-06-15T10:30:45.123Z\",\n    \"requestId\": \"req-123456\"\n  }\n}\n</code></pre>"},{"location":"backend/api-design/#error-response-fields","title":"Error Response Fields","text":"Field Type Description Always Present <code>error.code</code> String Machine-readable error code Yes <code>error.message</code> String Human-readable error description Yes <code>error.details</code> Object Additional error context No <code>error.path</code> String API endpoint path that generated the error Yes <code>error.timestamp</code> String ISO 8601 timestamp when the error occurred Yes <code>error.requestId</code> String Unique identifier for the request (for support/debugging) Yes"},{"location":"backend/api-design/#http-status-codes","title":"HTTP Status Codes","text":"<p>The API uses appropriate HTTP status codes to indicate the nature of errors:</p> Status Code Category Description Example Scenarios 400 Bad Request The request contains invalid parameters or is malformed Missing required fields, invalid data format 401 Unauthorized Authentication is required or has failed Missing token, expired token, invalid credentials 403 Forbidden The authenticated user lacks permission Attempting to access restricted resources 404 Not Found The requested resource does not exist Invalid ID, deleted resource 409 Conflict The request conflicts with the current state Duplicate entry, concurrent modification 422 Unprocessable Entity The request is well-formed but contains semantic errors Validation errors 429 Too Many Requests The client has sent too many requests Rate limit exceeded 500 Internal Server Error An unexpected error occurred on the server Database errors, unhandled exceptions 503 Service Unavailable The service is temporarily unavailable Maintenance, overload"},{"location":"backend/api-design/#error-codes","title":"Error Codes","text":"<p>The API uses standardized error codes to provide machine-readable error information:</p>"},{"location":"backend/api-design/#authentication-errors","title":"Authentication Errors","text":"Error Code HTTP Status Description <code>UNAUTHORIZED</code> 401 Authentication is required <code>INVALID_CREDENTIALS</code> 401 Invalid username or password <code>INVALID_TOKEN</code> 401 The provided token is invalid <code>TOKEN_EXPIRED</code> 401 The provided token has expired <code>ACCOUNT_INACTIVE</code> 403 The user account is inactive <code>ACCOUNT_LOCKED</code> 403 The account is temporarily locked <code>INSUFFICIENT_PERMISSIONS</code> 403 The user lacks required permissions"},{"location":"backend/api-design/#validation-errors","title":"Validation Errors","text":"Error Code HTTP Status Description <code>VALIDATION_ERROR</code> 422 The request contains validation errors <code>MISSING_REQUIRED_FIELD</code> 400 A required field is missing <code>INVALID_FIELD_FORMAT</code> 400 A field has an invalid format <code>INVALID_FIELD_VALUE</code> 400 A field has an invalid value <code>INVALID_QUERY_PARAMETER</code> 400 A query parameter is invalid"},{"location":"backend/api-design/#resource-errors","title":"Resource Errors","text":"Error Code HTTP Status Description <code>RESOURCE_NOT_FOUND</code> 404 The requested resource does not exist <code>RESOURCE_ALREADY_EXISTS</code> 409 The resource already exists <code>RESOURCE_CONFLICT</code> 409 The request conflicts with the current state <code>RESOURCE_GONE</code> 410 The resource is no longer available"},{"location":"backend/api-design/#rate-limiting-errors","title":"Rate Limiting Errors","text":"Error Code HTTP Status Description <code>RATE_LIMIT_EXCEEDED</code> 429 The rate limit has been exceeded"},{"location":"backend/api-design/#server-errors","title":"Server Errors","text":"Error Code HTTP Status Description <code>INTERNAL_SERVER_ERROR</code> 500 An unexpected error occurred <code>SERVICE_UNAVAILABLE</code> 503 The service is temporarily unavailable <code>DATABASE_ERROR</code> 500 A database error occurred"},{"location":"backend/api-design/#error-handling-implementation","title":"Error Handling Implementation","text":"<p>The API implements error handling using middleware and utility functions:</p>"},{"location":"backend/api-design/#error-middleware","title":"Error Middleware","text":"<pre><code>// middleware/errorHandler.js\nconst errorHandler = (err, req, res, next) =&gt; {\n  // Default to 500 Internal Server Error\n  let statusCode = err.statusCode || 500;\n  let errorCode = err.code || 'INTERNAL_SERVER_ERROR';\n  let message = err.message || 'An unexpected error occurred';\n  let details = err.details || {};\n\n  // Handle specific error types\n  if (err.name === 'ValidationError') {\n    // Mongoose validation error\n    statusCode = 422;\n    errorCode = 'VALIDATION_ERROR';\n    message = 'Validation failed';\n    details = Object.keys(err.errors).reduce((acc, key) =&gt; {\n      acc[key] = err.errors[key].message;\n      return acc;\n    }, {});\n  } else if (err.name === 'CastError') {\n    // Mongoose cast error (invalid ID)\n    statusCode = 400;\n    errorCode = 'INVALID_FIELD_VALUE';\n    message = `Invalid ${err.path}`;\n  } else if (err.code === 11000) {\n    // MongoDB duplicate key error\n    statusCode = 409;\n    errorCode = 'RESOURCE_ALREADY_EXISTS';\n    message = 'Duplicate entry';\n    const field = Object.keys(err.keyValue)[0];\n    details = {\n      field,\n      value: err.keyValue[field]\n    };\n  }\n\n  // Log server errors\n  if (statusCode &gt;= 500) {\n    console.error('Server error:', err);\n  }\n\n  // Send error response\n  res.status(statusCode).json({\n    error: {\n      code: errorCode,\n      message,\n      details,\n      path: req.path,\n      timestamp: new Date().toISOString(),\n      requestId: req.id // Added by request ID middleware\n    }\n  });\n};\n\nmodule.exports = errorHandler;\n</code></pre>"},{"location":"backend/api-design/#custom-error-classes","title":"Custom Error Classes","text":"<pre><code>// utils/errors.js\nclass ApiError extends Error {\n  constructor(statusCode, code, message, details = {}) {\n    super(message);\n    this.statusCode = statusCode;\n    this.code = code;\n    this.details = details;\n    this.name = this.constructor.name;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\nclass BadRequestError extends ApiError {\n  constructor(message, code = 'BAD_REQUEST', details = {}) {\n    super(400, code, message, details);\n  }\n}\n\nclass UnauthorizedError extends ApiError {\n  constructor(message = 'Authentication required', code = 'UNAUTHORIZED', details = {}) {\n    super(401, code, message, details);\n  }\n}\n\nclass ForbiddenError extends ApiError {\n  constructor(message = 'Access denied', code = 'FORBIDDEN', details = {}) {\n    super(403, code, message, details);\n  }\n}\n\nclass NotFoundError extends ApiError {\n  constructor(resource = 'Resource', code = 'RESOURCE_NOT_FOUND', details = {}) {\n    super(404, code, `${resource} not found`, details);\n  }\n}\n\nclass ConflictError extends ApiError {\n  constructor(message = 'Resource conflict', code = 'RESOURCE_CONFLICT', details = {}) {\n    super(409, code, message, details);\n  }\n}\n\nclass ValidationError extends ApiError {\n  constructor(message = 'Validation failed', details = {}) {\n    super(422, 'VALIDATION_ERROR', message, details);\n  }\n}\n\nclass RateLimitError extends ApiError {\n  constructor(message = 'Rate limit exceeded', details = {}) {\n    super(429, 'RATE_LIMIT_EXCEEDED', message, details);\n  }\n}\n\nmodule.exports = {\n  ApiError,\n  BadRequestError,\n  UnauthorizedError,\n  ForbiddenError,\n  NotFoundError,\n  ConflictError,\n  ValidationError,\n  RateLimitError\n};\n</code></pre>"},{"location":"backend/api-design/#usage-in-route-handlers","title":"Usage in Route Handlers","text":"<pre><code>// Example route handler with error handling\nconst { NotFoundError, ValidationError } = require('../utils/errors');\n\nrouter.get('/pigs/:id', async (req, res, next) =&gt; {\n  try {\n    const id = parseInt(req.params.id, 10);\n\n    // Validate ID\n    if (isNaN(id)) {\n      throw new ValidationError('Invalid pig ID', {\n        id: 'Must be a number'\n      });\n    }\n\n    // Find pig by ID\n    const pig = await Pig.findOne({ pigId: id });\n\n    // Check if pig exists\n    if (!pig) {\n      throw new NotFoundError('Pig', 'PIG_NOT_FOUND', {\n        pigId: id\n      });\n    }\n\n    // Return pig data\n    res.json(pig);\n  } catch (error) {\n    // Pass error to error handling middleware\n    next(error);\n  }\n});\n</code></pre>"},{"location":"backend/api-design/#error-logging-and-monitoring","title":"Error Logging and Monitoring","text":"<p>All errors are logged and monitored:</p> <ol> <li>Development Environment:</li> <li>Detailed error information is logged to the console</li> <li> <p>Stack traces are included in logs</p> </li> <li> <p>Production Environment:</p> </li> <li>Errors are logged to a structured logging system</li> <li>Critical errors trigger alerts</li> <li> <p>Error metrics are collected for monitoring</p> </li> <li> <p>Error Tracking:</p> </li> <li>Integration with error tracking services (e.g., Sentry)</li> <li>Grouping of similar errors</li> <li>Tracking of error frequency and impact</li> </ol>"},{"location":"backend/api-design/#client-side-error-handling-recommendations","title":"Client-Side Error Handling Recommendations","text":"<p>Clients should implement the following error handling strategies:</p> <ol> <li>HTTP Status Code Handling:</li> <li>Handle different status codes appropriately</li> <li> <p>Implement retry logic for 5xx errors</p> </li> <li> <p>Error Code Parsing:</p> </li> <li>Parse the <code>error.code</code> field for programmatic handling</li> <li> <p>Display user-friendly messages based on error codes</p> </li> <li> <p>Validation Error Handling:</p> </li> <li>Map validation errors to form fields</li> <li> <p>Display field-specific error messages</p> </li> <li> <p>Rate Limit Handling:</p> </li> <li>Implement exponential backoff for rate limit errors</li> <li> <p>Parse rate limit headers to adjust request timing</p> </li> <li> <p>Authentication Error Handling:</p> </li> <li>Redirect to login page for 401 errors</li> <li>Clear invalid tokens from storage</li> </ol>"},{"location":"backend/api-design/#example-error-responses","title":"Example Error Responses","text":""},{"location":"backend/api-design/#validation-error-422-unprocessable-entity","title":"Validation Error (422 Unprocessable Entity)","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Validation failed\",\n    \"details\": {\n      \"name\": \"Name is required\",\n      \"age\": \"Age must be a positive number\",\n      \"email\": \"Invalid email format\"\n    },\n    \"path\": \"/api/pigs\",\n    \"timestamp\": \"2023-06-15T10:30:45.123Z\",\n    \"requestId\": \"req-123456\"\n  }\n}\n</code></pre>"},{"location":"backend/api-design/#resource-not-found-404-not-found","title":"Resource Not Found (404 Not Found)","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"PIG_NOT_FOUND\",\n    \"message\": \"Pig not found\",\n    \"details\": {\n      \"pigId\": 1001\n    },\n    \"path\": \"/api/pigs/1001\",\n    \"timestamp\": \"2023-06-15T10:30:45.123Z\",\n    \"requestId\": \"req-123456\"\n  }\n}\n</code></pre>"},{"location":"backend/api-design/#authentication-error-401-unauthorized","title":"Authentication Error (401 Unauthorized)","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"TOKEN_EXPIRED\",\n    \"message\": \"Token has expired\",\n    \"path\": \"/api/farms\",\n    \"timestamp\": \"2023-06-15T10:30:45.123Z\",\n    \"requestId\": \"req-123456\"\n  }\n}\n</code></pre>"},{"location":"backend/api-design/#rate-limit-error-429-too-many-requests","title":"Rate Limit Error (429 Too Many Requests)","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"RATE_LIMIT_EXCEEDED\",\n    \"message\": \"Rate limit exceeded\",\n    \"details\": {\n      \"retryAfter\": 60,\n      \"limit\": 100,\n      \"remaining\": 0,\n      \"reset\": 1623760800\n    },\n    \"path\": \"/api/auth/login\",\n    \"timestamp\": \"2023-06-15T10:30:45.123Z\",\n    \"requestId\": \"req-123456\"\n  }\n}\n</code></pre>"},{"location":"backend/api-design/#api-versioning","title":"API Versioning","text":"<p>The current API version is v1, which is implicit in the base URL. Future versions would be accessed via:</p> <pre><code>http://localhost:8080/api/v2/...\n</code></pre>"},{"location":"backend/api-design/#cross-origin-resource-sharing-cors","title":"Cross-Origin Resource Sharing (CORS)","text":"<p>The API supports CORS with the following configuration:</p> <pre><code>const CORS_CONFIG = {\n  origin: process.env.CORS_ORIGIN || '*',\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization']\n};\n</code></pre> <p>In production, the <code>origin</code> would be restricted to specific domains.</p>"},{"location":"backend/data-access/","title":"Data Access Layer","text":""},{"location":"backend/data-access/#overview","title":"Overview","text":"<p>The data access layer is responsible for interacting with the MongoDB database. This document outlines the data access patterns, models, and techniques used in the system.</p>"},{"location":"backend/data-access/#mongodb-and-mongoose","title":"MongoDB and Mongoose","text":"<p>The PAAL system uses MongoDB as its primary database and Mongoose as the Object Data Modeling (ODM) library. Mongoose provides a schema-based solution to model application data and includes built-in type casting, validation, query building, and logic hooks.</p>"},{"location":"backend/data-access/#database-connection","title":"Database Connection","text":"<p>The database connection is established in the <code>db/connection.js</code> file:</p> <pre><code>// db/connection.js\nconst mongoose = require('mongoose');\nconst { DATABASE_CONFIG } = require('../config');\n\n/**\n * Connect to MongoDB database\n * @returns {Promise&lt;void&gt;}\n */\nconst connectToDatabase = async () =&gt; {\n  try {\n    // Construct connection string\n    const connectionString = `mongodb://${DATABASE_CONFIG.username}:${DATABASE_CONFIG.password}@${DATABASE_CONFIG.host}:${DATABASE_CONFIG.port}/${DATABASE_CONFIG.database}?authSource=admin`;\n\n    // Connect to MongoDB\n    await mongoose.connect(connectionString, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true\n    });\n\n    console.log('Connected to MongoDB');\n\n    // Register models after connection is established\n    require('./models');\n  } catch (error) {\n    console.error('Failed to connect to MongoDB:', error);\n    throw error;\n  }\n};\n\nmodule.exports = {\n  connectToDatabase\n};\n</code></pre>"},{"location":"backend/data-access/#model-registration","title":"Model Registration","text":"<p>Models are registered in the <code>db/models.js</code> file:</p> <pre><code>// db/models.js\nconst mongoose = require('mongoose');\n\n/**\n * Register all models\n */\nconst registerModels = () =&gt; {\n  // Define all models to register\n  const models = [\n    '../models/Pig',\n    '../models/PigBCS',\n    '../models/PostureData',\n    '../models/PigHeatStatus',\n    '../models/PigHealthStatus',\n    '../models/PigVulvaSwelling',\n    '../models/PigBreathRate',\n    '../models/Device',\n    '../models/TemperatureData',\n    '../models/Farm',\n    '../models/Barn',\n    '../models/Stall',\n    '../models/User',\n    '../models/ActivityLog'\n  ];\n\n  // Register each model\n  models.forEach(modelPath =&gt; {\n    try {\n      require(modelPath);\n    } catch (error) {\n      console.error(`Error loading model from ${modelPath}:`, error);\n    }\n  });\n\n  console.log(`Registered ${models.length} models successfully`);\n};\n\n/**\n * Set up MongoDB change streams for real-time updates\n * @param {Function} emitUpdatedStats - Function to emit updated stats\n */\nconst setupChangeStreams = (emitUpdatedStats) =&gt; {\n  // Watch Pig model changes\n  const Pig = mongoose.model('Pig');\n  const pigChangeStream = Pig.watch([], { fullDocument: 'updateLookup' });\n\n  pigChangeStream.on('change', async (change) =&gt; {\n    await emitUpdatedStats();\n\n    // Additional change stream handling...\n  });\n\n  // Watch other model changes...\n};\n\nmodule.exports = {\n  registerModels,\n  setupChangeStreams\n};\n</code></pre>"},{"location":"backend/data-access/#data-models","title":"Data Models","text":""},{"location":"backend/data-access/#core-models","title":"Core Models","text":"<p>The system includes several core data models:</p>"},{"location":"backend/data-access/#pig-model","title":"Pig Model","text":"<pre><code>// models/Pig.js\nconst mongoose = require('mongoose');\nconst { Schema } = mongoose;\n\nconst PigSchema = new Schema({\n  pigId: {\n    type: Number,\n    required: true,\n    unique: true,\n    index: true,\n    validate: {\n      validator: Number.isInteger,\n      message: '{VALUE} is not an integer value'\n    }\n  },\n  tag: { type: String, required: true, unique: true },\n  breed: { type: String },\n  age: { type: Number, min: 0 },\n  currentLocation: {\n    farmId: { type: Schema.Types.ObjectId, ref: 'Farm' },\n    barnId: { type: Schema.Types.ObjectId, ref: 'Barn'},\n    stallId: { type: Schema.Types.ObjectId, ref: 'Stall' }\n  },\n  active: { type: Boolean, default: true }\n}, { \n  timestamps: true,\n  toJSON: { virtuals: true },\n  toObject: { virtuals: true }\n});\n\n// Indexes for efficient queries\nPigSchema.index({ 'currentLocation.farmId': 1 });\nPigSchema.index({ 'currentLocation.barnId': 1 });\nPigSchema.index({ 'currentLocation.stallId': 1 });\n\nmodule.exports = mongoose.model('Pig', PigSchema);\n</code></pre>"},{"location":"backend/data-access/#farm-model","title":"Farm Model","text":"<pre><code>// models/Farm.js\nconst mongoose = require('mongoose');\nconst { Schema } = mongoose;\n\nconst FarmSchema = new Schema({\n  name: { \n    type: String, \n    required: true,\n    trim: true\n  },\n  location: { \n    type: String, \n    required: true,\n    trim: true\n  },\n  description: { \n    type: String,\n    default: ''\n  },\n  isActive: { \n    type: Boolean, \n    default: true \n  }\n}, { \n  timestamps: true \n});\n\nmodule.exports = mongoose.model('Farm', FarmSchema);\n</code></pre>"},{"location":"backend/data-access/#user-model","title":"User Model","text":"<pre><code>// models/User.js\nconst mongoose = require('mongoose');\nconst bcrypt = require('bcrypt');\nconst { Schema } = mongoose;\n\nconst UserSchema = new Schema({\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    lowercase: true,\n    trim: true\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  firstName: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  lastName: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  role: {\n    type: String,\n    enum: ['admin', 'manager', 'farmer', 'viewer'],\n    default: 'farmer'\n  },\n  isActive: {\n    type: Boolean,\n    default: true\n  },\n  lastLogin: {\n    type: Date\n  },\n  assignedFarm: {\n    type: Schema.Types.ObjectId,\n    ref: 'Farm'\n  },\n  permissions: {\n    type: [String],\n    default: []\n  }\n}, {\n  timestamps: true\n});\n\n// Pre-save hook to hash password\nUserSchema.pre('save', async function(next) {\n  const user = this;\n\n  // Only hash the password if it has been modified or is new\n  if (!user.isModified('password')) {\n    return next();\n  }\n\n  try {\n    // Generate salt\n    const salt = await bcrypt.genSalt(10);\n\n    // Hash password\n    const hash = await bcrypt.hash(user.password, salt);\n\n    // Replace plain text password with hash\n    user.password = hash;\n    next();\n  } catch (error) {\n    return next(error);\n  }\n});\n\n// Method to compare password\nUserSchema.methods.comparePassword = async function(candidatePassword) {\n  try {\n    return await bcrypt.compare(candidatePassword, this.password);\n  } catch (error) {\n    throw error;\n  }\n};\n\nmodule.exports = mongoose.model('User', UserSchema);\n</code></pre>"},{"location":"backend/data-access/#data-collection-models","title":"Data Collection Models","text":"<p>The system includes several models for collecting and storing sensor data:</p>"},{"location":"backend/data-access/#posture-data-model","title":"Posture Data Model","text":"<pre><code>// models/PostureData.js\nconst mongoose = require('mongoose');\nconst { Schema } = mongoose;\n\nconst PigPostureSchema = new Schema({\n  pigId: { type: Number, required: true },\n  timestamp: { type: Date, default: Date.now },\n  score: { type: Number, min: 0, max: 5, required: true }\n}, {\n  toJSON: { virtuals: true, getters: true },\n  toObject: { virtuals: true, getters: true }\n});\n\n// Add a virtual property for formatted date\nPigPostureSchema.virtual('formattedDate').get(function() {\n  return this.timestamp ? this.timestamp.toISOString().split('T')[0] : '';\n});\n\n// Indexes for efficient queries\nPigPostureSchema.index({ pigId: 1 });\nPigPostureSchema.index({ timestamp: -1 });\nPigPostureSchema.index({ pigId: 1, timestamp: -1 });\n\nmodule.exports = mongoose.model('PigPosture', PigPostureSchema);\n</code></pre>"},{"location":"backend/data-access/#data-access-patterns","title":"Data Access Patterns","text":""},{"location":"backend/data-access/#basic-crud-operations","title":"Basic CRUD Operations","text":"<p>The system uses Mongoose's built-in methods for basic CRUD operations:</p>"},{"location":"backend/data-access/#create","title":"Create","text":"<pre><code>// Example: Creating a new pig\nconst newPig = await Pig.create({\n  pigId: 1001,\n  tag: 'PIG-1001',\n  breed: 'Yorkshire',\n  age: 12,\n  currentLocation: {\n    farmId: farmId,\n    barnId: barnId,\n    stallId: stallId\n  },\n  active: true\n});\n</code></pre>"},{"location":"backend/data-access/#read","title":"Read","text":"<pre><code>// Example: Finding a pig by ID\nconst pig = await Pig.findOne({ pigId: id })\n  .populate('currentLocation.farmId')\n  .populate('currentLocation.barnId')\n  .populate('currentLocation.stallId');\n\n// Example: Finding all pigs with pagination\nconst page = parseInt(req.query.page) || 1;\nconst limit = parseInt(req.query.limit) || 10;\nconst skip = (page - 1) * limit;\n\nconst pigs = await Pig.find({ active: true })\n  .sort({ updatedAt: -1 })\n  .skip(skip)\n  .limit(limit);\n</code></pre>"},{"location":"backend/data-access/#update","title":"Update","text":"<pre><code>// Example: Updating a pig\nconst updatedPig = await Pig.findOneAndUpdate(\n  { pigId: id },\n  {\n    breed: req.body.breed,\n    age: req.body.age,\n    currentLocation: {\n      farmId: req.body.currentLocation.farmId,\n      barnId: req.body.currentLocation.barnId,\n      stallId: req.body.currentLocation.stallId\n    }\n  },\n  { new: true, runValidators: true }\n);\n</code></pre>"},{"location":"backend/data-access/#delete","title":"Delete","text":"<pre><code>// Example: Soft delete (marking as inactive)\nawait Pig.findOneAndUpdate(\n  { pigId: id },\n  { active: false },\n  { new: true }\n);\n\n// Example: Hard delete (removing from database)\nawait Pig.findOneAndDelete({ pigId: id });\n</code></pre>"},{"location":"backend/data-access/#advanced-query-patterns","title":"Advanced Query Patterns","text":""},{"location":"backend/data-access/#aggregation-pipeline","title":"Aggregation Pipeline","text":"<p>The system uses MongoDB's aggregation pipeline for complex data transformations:</p> <pre><code>// Example: Aggregating posture data by day\nconst postureData = await PigPosture.aggregate([\n  {\n    $match: {\n      pigId: id,\n      timestamp: { $gte: startDate, $lte: endDate }\n    }\n  },\n  {\n    $group: {\n      _id: { $dateToString: { format: '%Y-%m-%d', date: '$timestamp' } },\n      scores: { $push: '$score' }\n    }\n  },\n  {\n    $project: {\n      _id: 0,\n      date: '$_id',\n      standing: {\n        $multiply: [\n          {\n            $divide: [\n              { $size: { $filter: { input: '$scores', as: 'score', cond: { $eq: ['$$score', 0] } } } },\n              { $size: '$scores' }\n            ]\n          },\n          100\n        ]\n      },\n      sitting: {\n        $multiply: [\n          {\n            $divide: [\n              { $size: { $filter: { input: '$scores', as: 'score', cond: { $eq: ['$$score', 1] } } } },\n              { $size: '$scores' }\n            ]\n          },\n          100\n        ]\n      },\n      lying: {\n        $multiply: [\n          {\n            $divide: [\n              { $size: { $filter: { input: '$scores', as: 'score', cond: { $eq: ['$$score', 2] } } } },\n              { $size: '$scores' }\n            ]\n          },\n          100\n        ]\n      }\n    }\n  },\n  {\n    $sort: { date: 1 }\n  }\n]);\n</code></pre>"},{"location":"backend/data-access/#population-and-joins","title":"Population and Joins","text":"<p>The system uses Mongoose's populate method to perform \"joins\" between collections:</p> <pre><code>// Example: Populating related data\nconst farm = await Farm.findById(req.params.id);\n\nconst barns = await Barn.find({ farmId: farm._id })\n  .populate({\n    path: 'stalls',\n    select: 'name occupancy'\n  });\n\nconst pigs = await Pig.find({ 'currentLocation.farmId': farm._id })\n  .populate('currentLocation.stallId')\n  .populate({\n    path: 'healthStatus',\n    options: { sort: { timestamp: -1 }, limit: 1 }\n  });\n</code></pre>"},{"location":"backend/data-access/#transactions","title":"Transactions","text":"<p>For operations that require atomicity, the system uses MongoDB transactions:</p> <pre><code>// Example: Using transactions for atomic operations\nconst session = await mongoose.startSession();\nsession.startTransaction();\n\ntry {\n  // Create a new farm\n  const farm = await Farm.create([{\n    name: req.body.name,\n    location: req.body.location,\n    description: req.body.description,\n    isActive: true\n  }], { session });\n\n  // Create a default barn for the farm\n  const barn = await Barn.create([{\n    name: 'Default Barn',\n    farmId: farm[0]._id,\n    description: 'Default barn created with farm'\n  }], { session });\n\n  // Create a default stall for the barn\n  await Stall.create([{\n    name: 'Default Stall',\n    farmId: farm[0]._id,\n    barnId: barn[0]._id,\n    capacity: 10,\n    description: 'Default stall created with farm'\n  }], { session });\n\n  // Commit the transaction\n  await session.commitTransaction();\n  session.endSession();\n\n  res.status(201).json(farm[0]);\n} catch (error) {\n  // Abort the transaction on error\n  await session.abortTransaction();\n  session.endSession();\n\n  console.error('Error creating farm with default structures:', error);\n  res.status(500).json({ error: 'Failed to create farm' });\n}\n</code></pre>"},{"location":"backend/data-access/#indexing-strategy","title":"Indexing Strategy","text":"<p>The system uses indexes to improve query performance:</p>"},{"location":"backend/data-access/#single-field-indexes","title":"Single Field Indexes","text":"<pre><code>// Example: Single field index on pigId\nPigSchema.index({ pigId: 1 });\n\n// Example: Single field index on timestamp with descending order\nPigPostureSchema.index({ timestamp: -1 });\n</code></pre>"},{"location":"backend/data-access/#compound-indexes","title":"Compound Indexes","text":"<pre><code>// Example: Compound index on pigId and timestamp\nPigPostureSchema.index({ pigId: 1, timestamp: -1 });\n\n// Example: Compound index on location fields\nPigSchema.index({ 'currentLocation.farmId': 1, 'currentLocation.barnId': 1 });\n</code></pre>"},{"location":"backend/data-access/#text-indexes","title":"Text Indexes","text":"<pre><code>// Example: Text index for search functionality\nFarmSchema.index({ name: 'text', location: 'text', description: 'text' });\n</code></pre>"},{"location":"backend/data-access/#data-validation","title":"Data Validation","text":""},{"location":"backend/data-access/#schema-level-validation","title":"Schema-Level Validation","text":"<p>The system uses Mongoose's built-in validation features:</p> <pre><code>// Example: Validation in Pig schema\nconst PigSchema = new Schema({\n  pigId: {\n    type: Number,\n    required: true,\n    unique: true,\n    validate: {\n      validator: Number.isInteger,\n      message: '{VALUE} is not an integer value'\n    }\n  },\n  age: { \n    type: Number, \n    min: 0 \n  },\n  // Other fields...\n});\n</code></pre>"},{"location":"backend/data-access/#custom-validators","title":"Custom Validators","text":"<pre><code>// Example: Custom validator for email\nconst UserSchema = new Schema({\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    lowercase: true,\n    trim: true,\n    validate: {\n      validator: function(v) {\n        return /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(v);\n      },\n      message: props =&gt; `${props.value} is not a valid email address!`\n    }\n  },\n  // Other fields...\n});\n</code></pre>"},{"location":"backend/data-access/#change-streams","title":"Change Streams","text":"<p>The system uses MongoDB Change Streams to monitor and react to data changes in real-time:</p> <pre><code>// Example: Setting up a change stream for the Pig model\nconst setupPigChangeStream = (io) =&gt; {\n  const Pig = mongoose.model('Pig');\n  const pigChangeStream = Pig.watch([], { fullDocument: 'updateLookup' });\n\n  pigChangeStream.on('change', async (change) =&gt; {\n    // React to changes\n    if (change.operationType === 'insert') {\n      // A new pig was added\n      io.emit('pig_added', change.fullDocument);\n\n      // Log the activity\n      await logActivity({\n        type: 'pig',\n        action: 'created',\n        description: `Pig ${change.fullDocument.tag} was added to the system`,\n        entityId: change.fullDocument._id\n      });\n    } else if (change.operationType === 'update') {\n      // A pig was updated\n      io.emit('pig_updated', change.fullDocument);\n\n      // Log the activity\n      await logActivity({\n        type: 'pig',\n        action: 'updated',\n        description: `Pig ${change.fullDocument.tag} was updated`,\n        entityId: change.fullDocument._id\n      });\n    } else if (change.operationType === 'delete') {\n      // A pig was deleted\n      io.emit('pig_deleted', change.documentKey._id);\n\n      // Log the activity\n      await logActivity({\n        type: 'pig',\n        action: 'deleted',\n        description: `A pig was removed from the system`,\n        entityId: change.documentKey._id\n      });\n    }\n  });\n\n  return pigChangeStream;\n};\n</code></pre>"},{"location":"backend/data-access/#error-handling","title":"Error Handling","text":"<p>The system implements consistent error handling for database operations:</p> <pre><code>// Example: Error handling for database operations\ntry {\n  const pig = await Pig.findOne({ pigId: id });\n\n  if (!pig) {\n    return res.status(404).json({ error: 'Pig not found' });\n  }\n\n  // Process pig data...\n} catch (error) {\n  console.error('Error fetching pig:', error);\n\n  // Determine appropriate error response\n  if (error.name === 'CastError') {\n    return res.status(400).json({ error: 'Invalid pig ID format' });\n  } else if (error.name === 'ValidationError') {\n    return res.status(400).json({ error: error.message });\n  } else {\n    return res.status(500).json({ error: 'Database error' });\n  }\n}\n</code></pre>"},{"location":"backend/overall-architecture/","title":"Backend Overall Architecture","text":""},{"location":"backend/overall-architecture/#architecture-type","title":"Architecture Type","text":"<p>The Backend is built using Node.js and Express.js. This architecture was chosen for its simplicity, ease of development, and suitability for the current scale of the application. This Approach allows for a straightforward deployment and maintenance while still providing modular organization.</p>"},{"location":"backend/overall-architecture/#core-technologies","title":"Core Technologies","text":""},{"location":"backend/overall-architecture/#framework-and-libraries","title":"Framework and Libraries","text":"<ul> <li>Node.js: JavaScript runtime for building the server-side application</li> <li>Express.js: Web application framework for handling HTTP requests and routing</li> <li>Mongoose: Object Data Modeling (ODM) library for MongoDB</li> <li>Socket.IO: Library for real-time, bidirectional communication</li> </ul>"},{"location":"backend/overall-architecture/#database","title":"Database","text":"<ul> <li>MongoDB: NoSQL database used for storing all application data</li> <li>MongoDB Change Streams: Used for real-time data updates</li> </ul>"},{"location":"backend/overall-architecture/#authentication-and-security","title":"Authentication and Security","text":"<ul> <li>JSON Web Tokens (JWT): Used for authentication and authorization</li> <li>bcrypt: Library for password hashing</li> <li>express-rate-limit: Middleware for rate limiting API requests</li> </ul>"},{"location":"backend/overall-architecture/#development-tools","title":"Development Tools","text":"<ul> <li>npm: Package manager for managing dependencies</li> <li>nodemon: Development tool for automatic server restarts</li> <li>ESLint: Static code analysis tool for identifying problematic patterns</li> </ul>"},{"location":"backend/overall-architecture/#application-structure","title":"Application Structure","text":"<p>The backend application follows a modular structure organized by feature:</p> <pre><code>server/\n\u251c\u2500\u2500 config/             # Configuration settings\n\u2502   \u2514\u2500\u2500 index.js        # Exports configuration objects\n\u251c\u2500\u2500 db/                 # Database connection and models\n\u2502   \u251c\u2500\u2500 connection.js   # Manages MongoDB connection\n\u2502   \u2514\u2500\u2500 models.js       # Registers all Mongoose models\n\u251c\u2500\u2500 middleware/         # Express middleware\n\u2502   \u251c\u2500\u2500 authMiddleware.js # Authentication middleware\n\u2502   \u251c\u2500\u2500 role.js         # Role-based access control\n\u2502   \u2514\u2500\u2500 index.js        # Configures middleware\n\u251c\u2500\u2500 models/             # Mongoose models\n\u2502   \u251c\u2500\u2500 Pig.js          # Pig data model\n\u2502   \u251c\u2500\u2500 Farm.js         # Farm data model\n\u2502   \u251c\u2500\u2500 Barn.js         # Barn data model\n\u2502   \u251c\u2500\u2500 Stall.js        # Stall data model\n\u2502   \u251c\u2500\u2500 User.js         # User data model\n\u2502   \u251c\u2500\u2500 PostureData.js  # Pig posture data model\n\u2502   \u2514\u2500\u2500 ...             # Other data models\n\u251c\u2500\u2500 routes/             # API routes\n\u2502   \u251c\u2500\u2500 pig.js          # Pig-related endpoints\n\u2502   \u251c\u2500\u2500 farm.js         # Farm-related endpoints\n\u2502   \u251c\u2500\u2500 auth.js         # Authentication endpoints\n\u2502   \u251c\u2500\u2500 user.js         # User management endpoints\n\u2502   \u2514\u2500\u2500 ...             # Other route files\n\u251c\u2500\u2500 scripts/            # Utility scripts\n\u2502   \u251c\u2500\u2500 seed-all.js     # Database seeding script\n\u2502   \u2514\u2500\u2500 ...             # Other scripts\n\u251c\u2500\u2500 services/           # Business logic services\n\u2502   \u251c\u2500\u2500 activityLogger.js # Activity logging service\n\u2502   \u2514\u2500\u2500 ...             # Other services\n\u251c\u2500\u2500 socket/             # Socket.IO related code\n\u2502   \u251c\u2500\u2500 events.js       # Socket event handlers\n\u2502   \u251c\u2500\u2500 stats.js        # Statistics emission\n\u2502   \u2514\u2500\u2500 index.js        # Socket.IO initialization\n\u251c\u2500\u2500 utils/              # Utility functions\n\u2502   \u2514\u2500\u2500 routeValidator.js # Route validation utility\n\u251c\u2500\u2500 index.js            # Legacy entry point\n\u2514\u2500\u2500 server.js           # Main entry point\n</code></pre>"},{"location":"backend/overall-architecture/#request-flow","title":"Request Flow","text":"<p>The flow of a request through the backend system is as follows:</p> <ol> <li>HTTP Request: Client sends an HTTP request to the server</li> <li>NGINX Proxy: Request is received by NGINX and forwarded to the Node.js application</li> <li>Express Middleware: Request passes through middleware for:<ul> <li>CORS handling <ul> <li>(DEVMODE: PLEASE UPDATE CORS TO RESTRICT ACCESS ON DEPLOYMENT)</li> </ul> </li> <li>Body parsing</li> <li>Authentication (if required)</li> <li>Request logging</li> </ul> </li> <li>Route Handler: Request is routed to the appropriate handler based on the URL path</li> <li>Business Logic: Route handler executes business logic, often interacting with the database</li> <li>Database Interaction: Mongoose models are used to query or update the MongoDB database</li> <li>Response: Handler sends an HTTP response back to the client</li> <li>Real-time Updates: If the request resulted in data changes, Socket.IO may emit events to connected clients</li> </ol>"},{"location":"backend/overall-architecture/#authentication-and-authorization","title":"Authentication and Authorization","text":""},{"location":"backend/overall-architecture/#authentication-flow","title":"Authentication Flow","text":"<ol> <li>Login Request: Client sends credentials to <code>/api/auth/login</code></li> <li>Credential Verification: Server verifies email and password</li> <li>Token Generation: Server generates a JWT containing user information</li> <li>Token Response: Token is sent back to the client</li> <li>Subsequent Requests: Client includes token in Authorization header</li> <li>Token Verification: <code>authenticateJWT</code> middleware verifies token on protected routes</li> </ol>"},{"location":"backend/overall-architecture/#authorization","title":"Authorization","text":"<p>Role-based access control is implemented using middleware:</p> <pre><code>// middleware/authMiddleware.js\nconst isAdmin = (req, res, next) =&gt; {\n  if (!req.user) {\n    return res.status(401).json({ error: 'Not authenticated' });\n  }\n\n  if (req.user.role !== 'admin') {\n    return res.status(403).json({ error: 'Not authorized as admin' });\n  }\n\n  next();\n};\n</code></pre>"},{"location":"backend/overall-architecture/#data-flow","title":"Data Flow","text":""},{"location":"backend/overall-architecture/#database-interactions","title":"Database Interactions","text":"<p>The application uses Mongoose models to interact with MongoDB:</p> <pre><code>// Example of database interaction in routes/pig.js\nrouter.get('/', async (req, res) =&gt; {\n  try {\n    const pigs = await Pig.find({})\n      .populate('currentLocation.farmId')\n      .populate('currentLocation.barnId')\n      .populate('currentLocation.stallId')\n      .populate('healthStatus')\n      .sort({ updatedAt: -1 });\n\n    // Transform data for response\n    const transformedPigs = pigs.map(pig =&gt; ({\n      owner: `PIG-${pig.pigId.toString().padStart(3, '0')}`,\n      status: pig.healthStatus?.status || '------',\n      costs: pig.age || '------',\n      region: pig.currentLocation.stallId?.name\n        ? `${pig.currentLocation.stallId.name}`\n        : '------',\n      stability: pig.stability || 0,\n      lastEdited: pig.updatedAt\n        ? new Date(pig.updatedAt).toLocaleDateString('en-GB', {\n          day: '2-digit',\n          month: '2-digit',\n          year: 'numeric',\n          hour: '2-digit',\n          minute: '2-digit'\n        })\n        : new Date().toLocaleDateString('en-GB', {\n          day: '2-digit',\n          month: '2-digit',\n          year: 'numeric',\n          hour: '2-digit',\n          minute: '2-digit'\n        }),\n      breed: pig.breed || '------',\n      active: pig.active\n    }));\n\n    res.json(transformedPigs);\n  } catch (error) {\n    console.error('Error fetching pigs:', error);\n    res.status(500).json({ error: 'Failed to fetch pigs' });\n  }\n});\n</code></pre>"},{"location":"backend/overall-architecture/#real-time-updates","title":"Real-time Updates","text":"<p>The application uses MongoDB Change Streams and Socket.IO to provide real-time updates:</p> <pre><code>// db/models.js\nconst setupChangeStreams = (emitUpdatedStats) =&gt; {\n  // Watch Pig model changes\n  const Pig = mongoose.model('Pig');\n  const pigChangeStream = Pig.watch([], { fullDocument: 'updateLookup' });\n\n  pigChangeStream.on('change', async (change) =&gt; {\n    await emitUpdatedStats();\n\n    // Log the activity\n    if (change.operationType === 'insert') {\n      const activity = await logActivity({\n        type: 'pig',\n        action: 'created',\n        description: `Pig ${change.fullDocument.tag} was added to the system`,\n        entityId: change.fullDocument._id\n      });\n\n      // Emit the activity to all connected clients\n      emitActivity(io, activity);\n    }\n    // Handle other change types...\n  });\n\n  // Watch other model changes...\n};\n</code></pre>"},{"location":"backend/overall-architecture/#error-handling","title":"Error Handling","text":"<p>The application implements consistent error handling throughout:</p> <pre><code>// Example error handling pattern\ntry {\n  // Operation that might fail\n} catch (error) {\n  console.error('Error description:', error);\n  res.status(500).json({ \n    error: 'User-friendly error message',\n    details: process.env.NODE_ENV === 'development' ? error.message : undefined\n  });\n}\n</code></pre>"},{"location":"backend/overall-architecture/#configuration-management","title":"Configuration Management","text":"<p>Configuration is centralized in the <code>config</code> directory:</p> <pre><code>// config/index.js\nrequire('dotenv').config();\n\n// Server configuration\nconst SERVER_PORT = 5005;\n\n// Database configuration\nconst DATABASE_CONFIG = {\n  host: process.env.DATABASE_HOST,\n  port: process.env.DATABASE_PORT,\n  database: process.env.MONGO_INITDB_DATABASE,\n  username: process.env.MONGO_INITDB_ROOT_USERNAME,\n  password: process.env.MONGO_INITDB_ROOT_PASSWORD,\n};\n\n// CORS configuration\nconst CORS_CONFIG = {\n  origin: process.env.CORS_ORIGIN || '*',\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization'],\n};\n\nmodule.exports = {\n  SERVER_PORT,\n  DATABASE_CONFIG,\n  CORS_CONFIG,\n};\n</code></pre>"},{"location":"backend/overall-architecture/#security-measures","title":"Security Measures","text":"<p>The application implements several security measures:</p> <ol> <li>Authentication: JWT-based authentication for API access</li> <li>Password Security: Passwords are hashed using bcrypt</li> <li>Input Validation: All user inputs are validated before processing</li> <li>Rate Limiting: Protection against brute force attacks</li> <li>CORS Configuration: Restricted cross-origin resource sharing</li> <li>HTTP Headers: Security-related HTTP headers are set</li> <li>Environment Variables: Sensitive information is stored in environment variables</li> </ol>"},{"location":"backend/security-measures/","title":"Security Measures","text":""},{"location":"backend/security-measures/#overview","title":"Overview","text":"<p>This document outlines the security architecture, authentication mechanisms, authorization rules, and other security practices implemented in the system.</p>"},{"location":"backend/security-measures/#security-architecture","title":"Security Architecture","text":"<p>The PAAL system follows a defense-in-depth approach with multiple layers of security:</p> <ol> <li>Application Layer<ul> <li>input validation, Business Logic, Output Encoding</li> </ul> </li> <li>Access Control Layer<ul> <li>Authenciation, Authorization, Session Management</li> </ul> </li> <li>Transport Layer<ul> <li>HTTPS/TLS Encryption, API Gateway, Network Segmentation</li> </ul> </li> <li>Data Layer<ul> <li>Encryption at REST, Backup Security, Data Minimization</li> </ul> </li> </ol>"},{"location":"backend/security-measures/#authentication-implementation","title":"Authentication Implementation","text":""},{"location":"backend/security-measures/#jwt-based-authentication","title":"JWT-Based Authentication","text":"<p>The system uses JSON Web Tokens (JWT) for authentication:</p>"},{"location":"backend/security-measures/#token-generation","title":"Token Generation","text":"<pre><code>// Token generation during login\nconst generateToken = (user) =&gt; {\n  return jwt.sign(\n    {\n      id: user._id,\n      email: user.email,\n      role: user.role,\n      permissions: user.permissions\n    },\n    process.env.JWT_SECRET,\n    { expiresIn: '24h' }\n  );\n};\n</code></pre>"},{"location":"backend/security-measures/#token-validation","title":"Token Validation","text":"<pre><code>// Middleware for validating JWT tokens\nconst authenticateJWT = (req, res, next) =&gt; {\n  const authHeader = req.headers.authorization;\n\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return res.status(401).json({ error: 'Authentication required' });\n  }\n\n  const token = authHeader.split(' ')[1];\n\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    req.user = decoded;\n    next();\n  } catch (error) {\n    if (error.name === 'TokenExpiredError') {\n      return res.status(401).json({ error: 'Token has expired' });\n    }\n    return res.status(401).json({ error: 'Invalid token' });\n  }\n};\n</code></pre>"},{"location":"backend/security-measures/#password-security","title":"Password Security","text":"<p>Passwords are securely hashed using bcrypt:</p> <pre><code>// Password hashing in User model\nUserSchema.pre('save', async function(next) {\n  if (!this.isModified('password')) return next();\n\n  try {\n    const salt = await bcrypt.genSalt(10);\n    this.password = await bcrypt.hash(this.password, salt);\n    next();\n  } catch (error) {\n    next(error);\n  }\n});\n\n// Password verification\nUserSchema.methods.comparePassword = async function(candidatePassword) {\n  return bcrypt.compare(candidatePassword, this.password);\n};\n</code></pre>"},{"location":"backend/security-measures/#session-management","title":"Session Management","text":"<p>The system implements secure session management:</p> <ul> <li>Token Expiration: JWTs expire after 24 hours</li> <li>Token Storage: Tokens are stored in localStorage on the client</li> <li>Token Refresh: Refresh tokens can be implemented for extended sessions</li> <li>Session Termination: Logout functionality clears tokens</li> </ul>"},{"location":"backend/security-measures/#authorization-rules","title":"Authorization Rules","text":""},{"location":"backend/security-measures/#role-based-access-control-rbac","title":"Role-Based Access Control (RBAC)","text":"<p>The system implements role-based access control with the following roles:</p> Role Description Access Level Admin System administrator Full access to all resources Manager Farm manager Access to assigned farms and all their resources Farmer Farm worker Limited access to assigned farms Viewer Read-only user Read-only access to assigned resources"},{"location":"backend/security-measures/#role-middleware","title":"Role Middleware","text":"<pre><code>// Middleware for checking admin role\nconst isAdmin = (req, res, next) =&gt; {\n  if (!req.user) {\n    return res.status(401).json({ error: 'Authentication required' });\n  }\n\n  if (req.user.role !== 'admin') {\n    return res.status(403).json({ error: 'Admin access required' });\n  }\n\n  next();\n};\n\n// Middleware for checking manager role\nconst isManager = (req, res, next) =&gt; {\n  if (!req.user) {\n    return res.status(401).json({ error: 'Authentication required' });\n  }\n\n  if (req.user.role !== 'admin' &amp;&amp; req.user.role !== 'manager') {\n    return res.status(403).json({ error: 'Manager access required' });\n  }\n\n  next();\n};\n</code></pre>"},{"location":"backend/security-measures/#permission-based-access-control","title":"Permission-Based Access Control","text":"<p>For more granular control, the system also implements permission-based access:</p> <pre><code>// Middleware for checking specific permissions\nconst hasPermission = (permission) =&gt; {\n  return (req, res, next) =&gt; {\n    if (!req.user) {\n      return res.status(401).json({ error: 'Authentication required' });\n    }\n\n    if (req.user.role === 'admin') {\n      // Admins have all permissions\n      return next();\n    }\n\n    if (!req.user.permissions || !req.user.permissions.includes(permission)) {\n      return res.status(403).json({ error: `Permission '${permission}' required` });\n    }\n\n    next();\n  };\n};\n\n// Usage in routes\nrouter.post('/farms', authenticateJWT, hasPermission('create:farms'), createFarm);\n</code></pre>"},{"location":"backend/security-measures/#resource-based-access-control","title":"Resource-Based Access Control","text":"<p>The system restricts access to resources based on ownership and assignment:</p> <pre><code>// Middleware for checking farm access\nconst checkFarmAccess = async (req, res, next) =&gt; {\n  try {\n    const farmId = req.params.id;\n\n    // Admins have access to all farms\n    if (req.user.role === 'admin') {\n      return next();\n    }\n\n    // Check if user is assigned to this farm\n    if (req.user.assignedFarm &amp;&amp; req.user.assignedFarm.toString() === farmId) {\n      return next();\n    }\n\n    // Check if user has explicit permission for this farm\n    const userFarmAccess = await UserFarmAccess.findOne({\n      userId: req.user.id,\n      farmId: farmId\n    });\n\n    if (userFarmAccess) {\n      return next();\n    }\n\n    return res.status(403).json({ error: 'You do not have access to this farm' });\n  } catch (error) {\n    next(error);\n  }\n};\n</code></pre>"},{"location":"backend/security-measures/#input-validation-and-sanitization","title":"Input Validation and Sanitization","text":""},{"location":"backend/security-measures/#request-validation","title":"Request Validation","text":"<p>The system validates all input data using validation middleware:</p> <pre><code>// Validation middleware using express-validator\nconst validatePigInput = [\n  body('tag').notEmpty().withMessage('Tag is required'),\n  body('breed').optional(),\n  body('age').optional().isInt({ min: 0 }).withMessage('Age must be a positive number'),\n  body('currentLocation.farmId').notEmpty().withMessage('Farm ID is required'),\n\n  // Validation handler\n  (req, res, next) =&gt; {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n    next();\n  }\n];\n\n// Usage in routes\nrouter.post('/pigs', authenticateJWT, validatePigInput, createPig);\n</code></pre>"},{"location":"backend/security-measures/#data-sanitization","title":"Data Sanitization","text":"<p>Input data is sanitized to prevent injection attacks:</p> <pre><code>// Sanitization middleware\nconst sanitizePigInput = [\n  body('tag').trim().escape(),\n  body('breed').trim().escape(),\n  body('notes').trim()\n];\n\n// Usage in routes\nrouter.post('/pigs', authenticateJWT, sanitizePigInput, validatePigInput, createPig);\n</code></pre>"},{"location":"backend/security-measures/#protection-against-common-attacks","title":"Protection Against Common Attacks","text":""},{"location":"backend/security-measures/#csrf-protection","title":"CSRF Protection","text":"<p>Cross-Site Request Forgery protection is implemented:</p> <pre><code>// CSRF protection middleware\nconst csrf = require('csurf');\nconst csrfProtection = csrf({ cookie: true });\n\n// Apply to routes that handle state changes\napp.post('/api/auth/login', csrfProtection, loginHandler);\napp.post('/api/pigs', csrfProtection, createPigHandler);\n</code></pre>"},{"location":"backend/security-measures/#xss-prevention","title":"XSS Prevention","text":"<p>Cross-Site Scripting prevention measures:</p> <ol> <li> <p>Content Security Policy: Restricts sources of executable scripts    <code>javascript    // CSP middleware    app.use((req, res, next) =&gt; {      res.setHeader(        'Content-Security-Policy',        \"default-src 'self'; script-src 'self'; style-src 'self'; img-src 'self' data:;\"      );      next();    });</code></p> </li> <li> <p>Output Encoding: All dynamic content is properly encoded before rendering    ```javascript    // In frontend components   {sanitizeHtml(pig.notes)}</p> </li> </ol> <p>```</p> <ol> <li>HttpOnly Cookies: Prevents JavaScript access to cookies    <code>javascript    // Cookie configuration    app.use(cookieParser());    app.use(session({      secret: process.env.SESSION_SECRET,      cookie: {        httpOnly: true,        secure: process.env.NODE_ENV === 'production',        sameSite: 'strict'      }    }));</code></li> </ol>"},{"location":"backend/security-measures/#sql-injection-prevention","title":"SQL Injection Prevention","text":"<p>MongoDB injection is prevented through:</p> <ol> <li> <p>Parameterized Queries: Using Mongoose models and schemas    <code>javascript    // Safe query using Mongoose    const pig = await Pig.findOne({ pigId: pigId });</code></p> </li> <li> <p>Input Validation: Validating and sanitizing all inputs    <code>javascript    // Validate ID before using in query    const id = parseInt(req.params.id, 10);    if (isNaN(id)) {      return res.status(400).json({ error: 'Invalid ID format' });    }</code></p> </li> <li> <p>Schema Validation: Enforcing data types and constraints    <code>javascript    const PigSchema = new Schema({      pigId: {        type: Number,        required: true,        validate: {          validator: Number.isInteger,          message: '{VALUE} is not an integer value'        }      }    });</code></p> </li> </ol>"},{"location":"backend/security-measures/#security-headers","title":"Security Headers","text":"<p>The application sets various security headers:</p> <pre><code>// Security headers middleware\nconst helmet = require('helmet');\napp.use(helmet());\n\n// Additional custom headers\napp.use((req, res, next) =&gt; {\n  // Strict Transport Security\n  res.setHeader('Strict-Transport-Security', 'max-age=31536000; includeSubDomains');\n\n  // Content Type Options\n  res.setHeader('X-Content-Type-Options', 'nosniff');\n\n  // Frame Options\n  res.setHeader('X-Frame-Options', 'DENY');\n\n  // XSS Protection\n  res.setHeader('X-XSS-Protection', '1; mode=block');\n\n  // Referrer Policy\n  res.setHeader('Referrer-Policy', 'same-origin');\n\n  next();\n});\n</code></pre>"},{"location":"backend/security-measures/#rate-limiting","title":"Rate Limiting","text":"<p>Rate limiting is implemented to prevent brute force attacks:</p> <pre><code>// Rate limiting middleware\nconst rateLimit = require('express-rate-limit');\n\n// Login rate limit\nconst loginLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // 5 requests per window\n  message: 'Too many login attempts, please try again after 15 minutes',\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\n// API rate limit\nconst apiLimiter = rateLimit({\n  windowMs: 60 * 1000, // 1 minute\n  max: 100, // 100 requests per minute\n  message: 'Too many requests, please try again later',\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\n// Apply to routes\napp.post('/api/auth/login', loginLimiter, loginHandler);\napp.use('/api/', apiLimiter);\n</code></pre>"},{"location":"backend/security-measures/#encryption-implementation","title":"Encryption Implementation","text":""},{"location":"backend/security-measures/#data-encryption","title":"Data Encryption","text":"<p>Sensitive data is encrypted in the database:</p> <pre><code>// Encryption utility\nconst crypto = require('crypto');\n\nconst encrypt = (text) =&gt; {\n  const iv = crypto.randomBytes(16);\n  const cipher = crypto.createCipheriv(\n    'aes-256-cbc',\n    Buffer.from(process.env.ENCRYPTION_KEY, 'hex'),\n    iv\n  );\n\n  let encrypted = cipher.update(text);\n  encrypted = Buffer.concat([encrypted, cipher.final()]);\n\n  return iv.toString('hex') + ':' + encrypted.toString('hex');\n};\n\nconst decrypt = (text) =&gt; {\n  const parts = text.split(':');\n  const iv = Buffer.from(parts[0], 'hex');\n  const encryptedText = Buffer.from(parts[1], 'hex');\n\n  const decipher = crypto.createDecipheriv(\n    'aes-256-cbc',\n    Buffer.from(process.env.ENCRYPTION_KEY, 'hex'),\n    iv\n  );\n\n  let decrypted = decipher.update(encryptedText);\n  decrypted = Buffer.concat([decrypted, decipher.final()]);\n\n  return decrypted.toString();\n};\n\n// Usage in schema\nconst PigSchema = new Schema({\n  // Other fields...\n  medicalNotes: {\n    type: String,\n    set: function(value) {\n      if (!value) return value;\n      return encrypt(value);\n    },\n    get: function(value) {\n      if (!value) return value;\n      return decrypt(value);\n    }\n  }\n});\n</code></pre>"},{"location":"backend/security-measures/#transport-layer-security","title":"Transport Layer Security","text":"<p>All communication is secured using HTTPS:</p> <pre><code>// HTTPS server setup\nconst https = require('https');\nconst fs = require('fs');\n\nconst options = {\n  key: fs.readFileSync('path/to/private.key'),\n  cert: fs.readFileSync('path/to/certificate.crt')\n};\n\nconst server = https.createServer(options, app);\nserver.listen(443, () =&gt; {\n  console.log('HTTPS server running on port 443');\n});\n</code></pre>"},{"location":"backend/security-measures/#logging-and-monitoring","title":"Logging and Monitoring","text":""},{"location":"backend/security-measures/#security-logging","title":"Security Logging","text":"<p>Security-relevant events are logged:</p> <pre><code>// Security logger\nconst winston = require('winston');\n\nconst securityLogger = winston.createLogger({\n  level: 'info',\n  format: winston.format.json(),\n  defaultMeta: { service: 'security-service' },\n  transports: [\n    new winston.transports.File({ filename: 'logs/security.log' })\n  ]\n});\n\n// Log authentication attempts\nconst logAuthAttempt = (req, success, userId = null) =&gt; {\n  securityLogger.info({\n    event: 'authentication_attempt',\n    success,\n    userId,\n    ip: req.ip,\n    userAgent: req.headers['user-agent'],\n    timestamp: new Date().toISOString()\n  });\n};\n\n// Log access to sensitive resources\nconst logResourceAccess = (req, resourceType, resourceId) =&gt; {\n  securityLogger.info({\n    event: 'resource_access',\n    userId: req.user?.id,\n    resourceType,\n    resourceId,\n    method: req.method,\n    ip: req.ip,\n    timestamp: new Date().toISOString()\n  });\n};\n</code></pre>"},{"location":"backend/security-measures/#security-monitoring","title":"Security Monitoring","text":"<p>The system implements security monitoring:</p> <ol> <li>Failed Login Monitoring: Alerts on multiple failed login attempts</li> <li>Unusual Access Patterns: Detects and alerts on unusual access patterns</li> <li>Error Rate Monitoring: Monitors for spikes in error rates</li> <li>Dependency Vulnerability Scanning: Regular scanning of dependencies for vulnerabilities</li> </ol>"},{"location":"backend/security-measures/#security-configuration","title":"Security Configuration","text":"<p>Security settings are managed through environment variables:</p> <pre><code># .env.example\n# JWT Configuration\nJWT_SECRET=your-secret-key-at-least-32-chars-long\nJWT_EXPIRATION=24h\n\n# Encryption\nENCRYPTION_KEY=32-char-hex-encryption-key\n\n# Security Headers\nENABLE_CSP=true\nCSP_REPORT_URI= ---\n\n# Rate Limiting\nRATE_LIMIT_WINDOW_MS=900000\nRATE_LIMIT_MAX_REQUESTS=100\n</code></pre>"},{"location":"backend/service-decomposition/","title":"Service Decomposition","text":""},{"location":"backend/service-decomposition/#overview","title":"Overview","text":"<p>The Backend System is currently organized in a modular way that follows service-oriented principles. This document outlines the routes and endpoints for the application, their responsibilities, and how they interact with each other.</p>"},{"location":"backend/service-decomposition/#system-orginization","title":"System Orginization","text":"<p>Here is the outline of the services operated within the backend for the system</p> <ol> <li>Authentication Service</li> <li>User Management Service</li> <li>Farm Management Service</li> <li>Pig Management Service</li> <li>Data Collection Service</li> <li>Analytics Service</li> <li>Notification Service</li> <li>Activity Logging Service</li> </ol>"},{"location":"backend/service-decomposition/#authentication","title":"Authentication","text":""},{"location":"backend/service-decomposition/#responsibilities","title":"Responsibilities","text":"<ul> <li>User authentication (login/logout)</li> <li>Token generation and validation</li> <li>Password management (reset, change)</li> <li>Session management</li> </ul>"},{"location":"backend/service-decomposition/#key-components","title":"Key Components","text":"<ul> <li>Routes: <code>/api/auth/*</code></li> <li>Models: <code>User</code></li> <li>Middleware: <code>authMiddleware.js</code></li> </ul>"},{"location":"backend/service-decomposition/#api-endpoints","title":"API Endpoints","text":"Endpoint Method Description <code>/api/auth/login</code> POST Authenticate user and generate token <code>/api/auth/token</code> GET Verify token and return user info <code>/api/auth/register</code> POST Register a new user (admin only)"},{"location":"backend/service-decomposition/#communication-between-services","title":"Communication between services","text":"<ul> <li>User Management Service: Shares the User model for user information</li> <li>Activity Logging Service: Logs authentication events</li> </ul>"},{"location":"backend/service-decomposition/#code-example","title":"Code Example","text":"<pre><code>// routes/auth.js (excerpt)\nrouter.post('/login', loginLimiter, async (req, res) =&gt; {\n  try {\n    const { email, password } = req.body;\n\n    // Validate input\n    if (!email || !password) {\n      return res.status(400).json({ error: 'Email and password are required' });\n    }\n\n    // Find user\n    const user = await User.findOne({ email: email.toLowerCase() });\n    if (!user) {\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n\n    // Check if user is active\n    if (!user.isActive) {\n      return res.status(401).json({ error: 'Account is inactive' });\n    }\n\n    // Check password\n    const isMatch = await user.comparePassword(password);\n    if (!isMatch) {\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n\n    // Generate JWT token\n    const token = jwt.sign(\n      {\n        id: user._id,\n        role: user.role,\n        email: user.email\n      },\n      process.env.JWT_SECRET || 'fallback_secret',\n      { expiresIn: '1d' }\n    );\n\n    // Update last login\n    user.lastLogin = new Date();\n    await User.updateOne({ email: user.email }, { lastLogin: new Date() });\n\n    // Log the login activity\n    const activity = await logActivity({\n      type: 'user',\n      action: 'login',\n      description: `User \"${user.email}\" logged in`,\n      userId: user._id,\n      ipAddress: req.ip,\n      metadata: {\n        email: user.email,\n        role: user.role,\n        name: `${user.firstName} ${user.lastName}`\n      }\n    });\n\n    // Return user info and token\n    const userResponse = user.toObject();\n    delete userResponse.password;\n\n    res.json({\n      token,\n      user: userResponse\n    });\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({ error: 'Server error' });\n  }\n});\n</code></pre>"},{"location":"backend/service-decomposition/#user-management-service","title":"User Management Service","text":""},{"location":"backend/service-decomposition/#responsibilities_1","title":"Responsibilities","text":"<ul> <li>User CRUD operations</li> <li>Role and permission management</li> <li>User profile management</li> </ul>"},{"location":"backend/service-decomposition/#key-components_1","title":"Key Components","text":"<ul> <li>Routes: <code>/api/users/*</code></li> <li>Models: <code>User</code></li> <li>Middleware: <code>authMiddleware.js</code>, <code>role.js</code></li> </ul>"},{"location":"backend/service-decomposition/#api-endpoints_1","title":"API Endpoints","text":"Endpoint Method Description <code>/api/users</code> GET Get all users (admin only) <code>/api/users/:id</code> GET Get user by ID <code>/api/users/:id</code> PUT Update user <code>/api/users/:id</code> DELETE Delete user <code>/api/users/:id/permissions</code> PUT Update user permissions"},{"location":"backend/service-decomposition/#interaction-with-other-services","title":"Interaction with Other Services","text":"<ul> <li>Authentication Service: Shares the User model</li> <li>Farm Management Service: Users can be assigned to farms</li> <li>Activity Logging Service: Logs user management activities</li> </ul>"},{"location":"backend/service-decomposition/#code-example_1","title":"Code Example","text":"<pre><code>// routes/user.js (excerpt)\nrouter.get('/', authenticateJWT, isAdmin, async (req, res) =&gt; {\n  try {\n    const users = await User.find({})\n      .select('-password')\n      .sort({ lastName: 1, firstName: 1 });\n\n    res.json(users);\n  } catch (error) {\n    console.error('Error fetching users:', error);\n    res.status(500).json({ error: 'Failed to fetch users' });\n  }\n});\n\nrouter.put('/:id', authenticateJWT, isAdmin, async (req, res) =&gt; {\n  try {\n    const { firstName, lastName, email, role, isActive, assignedFarm } = req.body;\n\n    // Find user\n    const user = await User.findById(req.params.id);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    // Update user fields\n    if (firstName) user.firstName = firstName;\n    if (lastName) user.lastName = lastName;\n    if (email) user.email = email.toLowerCase();\n    if (role) user.role = role;\n    if (isActive !== undefined) user.isActive = isActive;\n    if (assignedFarm) user.assignedFarm = assignedFarm;\n\n    await user.save();\n\n    // Log activity\n    await logActivity({\n      type: 'user',\n      action: 'updated',\n      description: `User \"${user.email}\" was updated`,\n      userId: req.user.id,\n      entityId: user._id,\n      metadata: {\n        email: user.email,\n        role: user.role,\n        name: `${user.firstName} ${user.lastName}`\n      }\n    });\n\n    // Return updated user without password\n    const userResponse = user.toObject();\n    delete userResponse.password;\n\n    res.json(userResponse);\n  } catch (error) {\n    console.error('Error updating user:', error);\n    res.status(500).json({ error: 'Failed to update user' });\n  }\n});\n</code></pre>"},{"location":"backend/service-decomposition/#farm-management-service","title":"Farm Management Service","text":""},{"location":"backend/service-decomposition/#responsibilities_2","title":"Responsibilities","text":"<ul> <li>Farm CRUD operations</li> <li>Barn and stall management</li> <li>Location hierarchy management</li> </ul>"},{"location":"backend/service-decomposition/#key-components_2","title":"Key Components","text":"<ul> <li>Routes: <code>/api/farms/*</code>, <code>/api/barns/*</code>, <code>/api/stalls/*</code></li> <li>Models: <code>Farm</code>, <code>Barn</code>, <code>Stall</code></li> </ul>"},{"location":"backend/service-decomposition/#api-endpoints_2","title":"API Endpoints","text":"Endpoint Method Description <code>/api/farms</code> GET Get all farms <code>/api/farms</code> POST Create a new farm <code>/api/farms/:id</code> GET Get farm by ID <code>/api/farms/:id</code> PUT Update farm <code>/api/farms/:id</code> DELETE Delete farm <code>/api/barns/farm/:farmId</code> GET Get barns by farm ID <code>/api/stalls/barn/:barnId</code> GET Get stalls by barn ID"},{"location":"backend/service-decomposition/#interaction-with-other-services_1","title":"Interaction with Other Services","text":"<ul> <li>User Management Service: Farms can be assigned to users</li> <li>Pig Management Service: Pigs are located in stalls</li> <li>Activity Logging Service: Logs farm management activities</li> </ul>"},{"location":"backend/service-decomposition/#code-example_2","title":"Code Example","text":"<pre><code>// routes/farm.js (excerpt)\nrouter.get('/', authenticateJWT, async (req, res) =&gt; {\n  try {\n    // If user is a farmer, they can only see their assigned farm\n    if (req.user.role === 'farmer' &amp;&amp; req.user.assignedFarm) {\n      const farmId = req.user.assignedFarm;\n\n      // Filter to only show the assigned farm\n      const farm = await Farm.findById(farmId);\n      if (!farm) {\n        return res.status(404).json({ error: 'Farm not found' });\n      }\n\n      // Get counts for this farm\n      const [barns, stalls, pigs] = await Promise.all([\n        Barn.countDocuments({ farmId: farm._id }),\n        Stall.countDocuments({ farmId: farm._id }),\n        Pig.countDocuments({ 'currentLocation.farmId': farm._id })\n      ]);\n\n      const farmWithCounts = {\n        ...farm.toObject(),\n        counts: {\n          barns,\n          stalls,\n          pigs\n        }\n      };\n\n      return res.json([farmWithCounts]);\n    }\n\n    // For admins, get all farms with counts\n    const farms = await Farm.find({});\n\n    // Get counts for each farm\n    const farmsWithCounts = await Promise.all(\n      farms.map(async (farm) =&gt; {\n        const [barns, stalls, pigs] = await Promise.all([\n          Barn.countDocuments({ farmId: farm._id }),\n          Stall.countDocuments({ farmId: farm._id }),\n          Pig.countDocuments({ 'currentLocation.farmId': farm._id })\n        ]);\n\n        return {\n          ...farm.toObject(),\n          counts: {\n            barns,\n            stalls,\n            pigs\n          }\n        };\n      })\n    );\n\n    res.json(farmsWithCounts);\n  } catch (error) {\n    console.error('Error fetching farms:', error);\n    res.status(500).json({ error: 'Failed to fetch farms' });\n  }\n});\n</code></pre>"},{"location":"backend/service-decomposition/#pig-management-service","title":"Pig Management Service","text":""},{"location":"backend/service-decomposition/#responsibilities_3","title":"Responsibilities","text":"<ul> <li>Pig CRUD operations</li> <li>Pig health record management</li> <li>Pig location management</li> </ul>"},{"location":"backend/service-decomposition/#key-components_3","title":"Key Components","text":"<ul> <li>Routes: <code>/api/pigs/*</code></li> <li>Models: <code>Pig</code>, <code>PigHealthStatus</code>, <code>PigBCS</code></li> </ul>"},{"location":"backend/service-decomposition/#api-endpoints_3","title":"API Endpoints","text":"Endpoint Method Description <code>/api/pigs</code> GET Get all pigs <code>/api/pigs</code> POST Create a new pig <code>/api/pigs/:id</code> GET Get pig by ID <code>/api/pigs/:id</code> PUT Update pig <code>/api/pigs/:id</code> DELETE Delete pig <code>/api/pigs/:id/health</code> POST Add health record <code>/api/pigs/:id/bcs</code> GET Get body condition score history"},{"location":"backend/service-decomposition/#interaction-with-other-services_2","title":"Interaction with Other Services","text":"<ul> <li>Farm Management Service: Pigs are located in stalls</li> <li>Data Collection Service: Collects posture and health data for pigs</li> <li>Activity Logging Service: Logs pig management activities</li> </ul>"},{"location":"backend/service-decomposition/#code-example_3","title":"Code Example","text":"<pre><code>// routes/pig.js (excerpt)\nrouter.get('/:id', async (req, res) =&gt; {\n  try {\n    const id = parseInt(req.params.id, 10);\n    if (isNaN(id)) {\n      return res.status(400).json({ error: 'Invalid pig id' });\n    }\n\n    const pig = await Pig.findOne({ pigId: id })\n      .populate('currentLocation.farmId')\n      .populate('currentLocation.barnId')\n      .populate('currentLocation.stallId');\n\n    if (!pig) {\n      return res.status(404).json({ error: 'Pig not found' });\n    }\n\n    res.json(pig);\n  } catch (error) {\n    console.error('Error fetching pig:', error);\n    res.status(500).json({ error: 'Failed to fetch pig' });\n  }\n});\n\nrouter.post('/', async (req, res) =&gt; {\n  try {\n    const { pigId, tag, breed, age, currentLocation } = req.body;\n\n    // Validate pigId\n    if (typeof pigId !== 'string' &amp;&amp; typeof pigId !== 'number') {\n      return res.status(400).json({ error: 'Invalid pigId' });\n    }\n\n    // Check if pig with this ID already exists\n    const existingPig = await Pig.findOne({ pigId: { $eq: pigId } });\n    if (existingPig) {\n      return res.status(400).json({ error: 'Pig with this ID already exists' });\n    }\n\n    // Create new pig\n    const newPig = await Pig.create({\n      pigId: pigId,\n      tag: tag,\n      breed: breed,\n      age: age,\n      currentLocation: {\n        farmId: currentLocation.farmId,\n        barnId: currentLocation.barnId,\n        stallId: currentLocation.stallId\n      },\n      active: true\n    });\n\n    res.status(201).json({\n      success: true,\n      pig: newPig\n    });\n  } catch (error) {\n    console.error('Error creating pig:', error);\n    res.status(500).json({ error: 'Failed to create pig' });\n  }\n});\n</code></pre>"},{"location":"backend/service-decomposition/#analytics-service","title":"Analytics Service","text":""},{"location":"backend/service-decomposition/#responsibilities_4","title":"Responsibilities","text":"<ul> <li>Generating statistics and insights</li> <li>Aggregating data for dashboards</li> <li>Providing time-series analysis</li> </ul>"},{"location":"backend/service-decomposition/#key-components_4","title":"Key Components","text":"<ul> <li>Routes: <code>/api/stats/*</code></li> <li>Socket: <code>socket/stats.js</code></li> </ul>"},{"location":"backend/service-decomposition/#api-endpoints_4","title":"API Endpoints","text":"Endpoint Method Description <code>/api/stats</code> GET Get system-wide statistics <code>/api/stats/pigs</code> GET Get pig-related statistics <code>/api/stats/farms</code> GET Get farm-related statistics"},{"location":"backend/service-decomposition/#interaction-with-other-services_3","title":"Interaction with Other Services","text":"<ul> <li>Data Collection Service: Uses collected data for analysis</li> <li>Pig Management Service: Analyzes pig health and posture data</li> <li>Farm Management Service: Analyzes farm performance data</li> </ul>"},{"location":"backend/service-decomposition/#code-example_4","title":"Code Example","text":"<pre><code>// routes/stats.js (excerpt)\nrouter.get('/', async (req, res) =&gt; {\n  try {\n    // Get counts\n    const [pigCount, farmCount, barnCount, stallCount, deviceCount] = await Promise.all([\n      Pig.countDocuments({ active: true }),\n      Farm.countDocuments({ isActive: true }),\n      Barn.countDocuments({}),\n      Stall.countDocuments({}),\n      Device.countDocuments({ isActive: true })\n    ]);\n\n    // Get health status distribution\n    const healthStatusAggregation = await PigHealthStatus.aggregate([\n      {\n        $sort: { timestamp: -1 }\n      },\n      {\n        $group: {\n          _id: '$pigId',\n          status: { $first: '$status' },\n          timestamp: { $first: '$timestamp' }\n        }\n      },\n      {\n        $group: {\n          _id: '$status',\n          count: { $sum: 1 }\n        }\n      }\n    ]);\n\n    const healthStatus = healthStatusAggregation.reduce((acc, item) =&gt; {\n      acc[item._id] = item.count;\n      return acc;\n    }, {\n      healthy: 0,\n      'at risk': 0,\n      critical: 0,\n      'no movement': 0\n    });\n\n    // Get recent activity\n    const recentActivity = await ActivityLog.find({})\n      .sort({ timestamp: -1 })\n      .limit(5)\n      .populate('userId', 'firstName lastName email');\n\n    res.json({\n      counts: {\n        pigs: pigCount,\n        farms: farmCount,\n        barns: barnCount,\n        stalls: stallCount,\n        devices: deviceCount\n      },\n      healthStatus,\n      recentActivity\n    });\n  } catch (error) {\n    console.error('Error fetching stats:', error);\n    res.status(500).json({ error: 'Failed to fetch stats' });\n  }\n});\n</code></pre>"},{"location":"backend/service-decomposition/#activity-logging-service","title":"Activity Logging Service","text":""},{"location":"backend/service-decomposition/#responsibilities_5","title":"Responsibilities","text":"<ul> <li>Logging system activities</li> <li>Providing activity history</li> <li>Supporting audit trails</li> </ul>"},{"location":"backend/service-decomposition/#key-components_5","title":"Key Components","text":"<ul> <li>Routes: <code>/api/activities/*</code></li> <li>Models: <code>ActivityLog</code></li> <li>Services: <code>services/activityLogger.js</code></li> </ul>"},{"location":"backend/service-decomposition/#api-endpoints_5","title":"API Endpoints","text":"Endpoint Method Description <code>/api/activities</code> GET Get recent activities <code>/api/activities</code> POST Log a new activity"},{"location":"backend/service-decomposition/#interaction-with-other-services_4","title":"Interaction with Other Services","text":"<ul> <li>All Services: Receives activity logs from all services</li> <li>Notification Service: Sends activities for real-time broadcasting</li> <li>User Management Service: Links activities to users</li> </ul>"},{"location":"backend/service-decomposition/#code-example_5","title":"Code Example","text":"<pre><code>// services/activityLogger.js\nconst ActivityLog = require('../models/ActivityLog');\n\n/**\n * Log a system activity\n * @param {Object} activityData - Activity data\n * @param {string} activityData.type - Activity type (e.g., 'user', 'pig', 'farm')\n * @param {string} activityData.action - Action performed (e.g., 'created', 'updated', 'deleted')\n * @param {string} activityData.description - Human-readable description\n * @param {string} [activityData.userId] - ID of the user who performed the action\n * @param {string} [activityData.entityId] - ID of the entity affected\n * @param {Object} [activityData.metadata] - Additional metadata\n * @returns {Promise&lt;Object&gt;} Created activity log\n */\nconst logActivity = async (activityData) =&gt; {\n  try {\n    const activity = new ActivityLog({\n      type: activityData.type,\n      action: activityData.action,\n      description: activityData.description,\n      userId: activityData.userId,\n      entityId: activityData.entityId,\n      metadata: activityData.metadata,\n      ipAddress: activityData.ipAddress\n    });\n\n    await activity.save();\n    return activity;\n  } catch (error) {\n    console.error('Error logging activity:', error);\n    // Still return something even if logging fails\n    return {\n      type: activityData.type,\n      action: activityData.action,\n      description: activityData.description,\n      timestamp: new Date()\n    };\n  }\n};\n\n/**\n * Get recent activities\n * @param {Object} options - Query options\n * @param {number} [options.limit=10] - Maximum number of activities to return\n * @param {string} [options.type] - Filter by activity type\n * @param {string} [options.userId] - Filter by user ID\n * @returns {Promise&lt;Array&gt;} Array of activity logs\n */\nconst getRecentActivities = async (options = {}) =&gt; {\n  try {\n    const { limit = 10, type, userId } = options;\n\n    const query = {};\n    if (type) query.type = type;\n    if (userId) query.userId = userId;\n\n    const activities = await ActivityLog.find(query)\n      .sort({ timestamp: -1 })\n      .limit(limit)\n      .populate('userId', 'firstName lastName email')\n      .lean();\n\n    return activities;\n  } catch (error) {\n    console.error('Error getting recent activities:', error);\n    return [];\n  }\n};\n\nmodule.exports = {\n  logActivity,\n  getRecentActivities\n};\n</code></pre>"},{"location":"backend/service-decomposition/#api-endpoint-comunication","title":"API ENDPOINT COMUNICATION","text":""},{"location":"backend/service-decomposition/#direct-method-calls","title":"Direct Method Calls","text":"<p>Services communicate primarily through direct method calls:</p> <pre><code>// Example of direct service communication\nconst { logActivity } = require('../services/activityLogger');\n\n// In a route handler\nawait logActivity({\n  type: 'pig',\n  action: 'created',\n  description: `Pig ${newPig.tag} was added to the system`,\n  userId: req.user.id,\n  entityId: newPig._id\n});\n</code></pre>"},{"location":"backend/service-decomposition/#database-mediated-communication","title":"Database-Mediated Communication","text":"<p>Services also communicate indirectly through the database:</p> <ol> <li>Service A writes data to the database</li> <li>MongoDB Change Streams detect the change</li> <li>Service B reacts to the change</li> </ol>"},{"location":"backend/service-decomposition/#socketio-for-real-time-updates","title":"Socket.IO for Real-time Updates","text":"<p>For real-time communication with clients, Socket.IO is used:</p> <pre><code>// socket/stats.js\nconst emitUpdatedStats = async () =&gt; {\n  try {\n    const stats = await calculateStats();\n    io.emit('stats_update', stats);\n    return stats;\n  } catch (error) {\n    console.error('Error emitting updated stats:', error);\n  }\n};\n</code></pre>"},{"location":"database/database-schema/","title":"Database Schema","text":""},{"location":"database/database-schema/#overview","title":"Overview","text":"<p>The PAAL system uses MongoDB as its primary database. MongoDB is a document-oriented NoSQL database that stores data in flexible, JSON-like documents. This document provides a comprehensive description of the database schema, including detailed collection structures, field specifications, relationships, indexing strategies, validation rules, and data management practices.</p>"},{"location":"database/database-schema/#why-mongodb","title":"Why MongoDB?","text":"<p>MongoDB was chosen for the PAAL system for several key reasons:</p> <ol> <li>Flexible Schema: Allows for easy evolution of data models as requirements change</li> <li>Document Structure: Natural fit for hierarchical data like farm \u2192 barn \u2192 stall relationships</li> <li>Horizontal Scalability: Supports sharding for future growth</li> <li>Rich Query Language: Powerful query capabilities including aggregation pipeline</li> <li>Change Streams: Native support for real-time data updates</li> <li>Geospatial Support: Built-in capabilities for location-based queries (for future farm mapping features)</li> </ol>"},{"location":"database/database-schema/#database-design-principles","title":"Database Design Principles","text":"<p>The database schema follows these design principles:</p> <ol> <li>Denormalization Where Appropriate: Strategic denormalization to optimize read performance</li> <li>Normalization for Consistency: Normalized references for data that changes frequently</li> <li>Indexing for Query Patterns: Indexes designed based on actual query patterns</li> <li>Data Integrity: Schema validation rules to ensure data consistency</li> <li>Performance Optimization: Collection and index design optimized for common operations</li> <li>Future Scalability: Design decisions made with future growth in mind</li> </ol>"},{"location":"database/database-schema/#collections-overview","title":"Collections Overview","text":"<p>The database consists of the following main collections:</p> <ol> <li>Pigs: Stores information about individual pigs</li> <li>Farms: Stores information about farms</li> <li>Barns: Stores information about barns within farms</li> <li>Stalls: Stores information about stalls within barns</li> <li>Users: Stores user account information</li> <li>PostureData: Stores pig posture measurements</li> <li>PigHealthStatus: Stores pig health status records</li> <li>PigBCS: Stores body condition score records</li> <li>Devices: Stores information about monitoring devices</li> <li>TemperatureData: Stores temperature measurements</li> <li>ActivityLog: Stores system activity logs</li> </ol>"},{"location":"database/database-schema/#collection-schemas","title":"Collection Schemas","text":""},{"location":"database/database-schema/#pigs-collection","title":"Pigs Collection","text":"<p>Stores information about individual pigs in the system. This is a core collection that maintains the primary data about each pig being monitored.</p>"},{"location":"database/database-schema/#schema-definition","title":"Schema Definition","text":"<pre><code>{\n  _id: ObjectId,                // MongoDB generated ID\n  pigId: Number,                // Unique pig identifier (integer)\n  tag: String,                  // Pig tag/name (e.g., \"PIG-001\")\n  breed: String,                // Pig breed (e.g., \"Yorkshire\")\n  age: Number,                  // Age in months\n  birthDate: Date,              // Date of birth (if known)\n  weight: Number,               // Weight in kilograms\n  gender: String,               // Gender (\"male\", \"female\")\n  currentLocation: {            // Current location of the pig\n    farmId: ObjectId,           // Reference to Farm collection\n    barnId: ObjectId,           // Reference to Barn collection\n    stallId: ObjectId           // Reference to Stall collection\n  },\n  healthRisk: Number,           // Calculated health risk score (0-1)\n  active: Boolean,              // Whether the pig is active in the system\n  status: String,               // Current status (\"active\", \"sold\", \"deceased\")\n  notes: String,                // Additional notes about the pig\n  metadata: {                   // Additional metadata\n    source: String,             // Source of the pig (e.g., \"born\", \"purchased\")\n    purchaseDate: Date,         // Date when the pig was purchased (if applicable)\n    purchasePrice: Number,      // Purchase price (if applicable)\n    genetics: {                 // Genetic information\n      sire: String,             // Father's tag/ID\n      dam: String               // Mother's tag/ID\n    }\n  },\n  createdAt: Date,              // When the record was created\n  updatedAt: Date               // When the record was last updated\n}\n</code></pre>"},{"location":"database/database-schema/#field-details","title":"Field Details","text":"Field Type Required Description Validation Rules <code>_id</code> ObjectId Yes (auto) MongoDB's auto-generated unique identifier Generated by MongoDB <code>pigId</code> Number Yes Unique numeric identifier for the pig Integer, unique, &gt; 0 <code>tag</code> String Yes Human-readable tag/name for the pig Non-empty string, unique, max 50 chars <code>breed</code> String No Breed of the pig String, max 100 chars <code>age</code> Number No Age in months Number \u2265 0 <code>birthDate</code> Date No Date of birth if known Valid date, not in future <code>weight</code> Number No Weight in kilograms Number &gt; 0 <code>gender</code> String No Gender of the pig Enum: \"male\", \"female\" <code>currentLocation.farmId</code> ObjectId Yes Reference to the farm Valid ObjectId in Farms collection <code>currentLocation.barnId</code> ObjectId No Reference to the barn Valid ObjectId in Barns collection <code>currentLocation.stallId</code> ObjectId No Reference to the stall Valid ObjectId in Stalls collection <code>healthRisk</code> Number No Calculated health risk score Number between 0 and 1 <code>active</code> Boolean Yes Whether the pig is active Boolean <code>status</code> String No Current status Enum: \"active\", \"sold\", \"deceased\" <code>notes</code> String No Additional notes String, max 1000 chars <code>metadata.source</code> String No Source of the pig String, max 100 chars <code>metadata.purchaseDate</code> Date No Purchase date Valid date <code>metadata.purchasePrice</code> Number No Purchase price Number \u2265 0 <code>metadata.genetics.sire</code> String No Father's tag/ID String, max 50 chars <code>metadata.genetics.dam</code> String No Mother's tag/ID String, max 50 chars <code>createdAt</code> Date Yes (auto) Creation timestamp Auto-generated <code>updatedAt</code> Date Yes (auto) Last update timestamp Auto-generated"},{"location":"database/database-schema/#sample-document","title":"Sample Document","text":"<pre><code>{\n  \"_id\": ObjectId(\"60d21b4667d0d8992e610c85\"),\n  \"pigId\": 1001,\n  \"tag\": \"PIG-1001\",\n  \"breed\": \"Yorkshire\",\n  \"age\": 12,\n  \"birthDate\": ISODate(\"2022-06-15T00:00:00.000Z\"),\n  \"weight\": 120.5,\n  \"gender\": \"female\",\n  \"currentLocation\": {\n    \"farmId\": ObjectId(\"60d21b4667d0d8992e610c87\"),\n    \"barnId\": ObjectId(\"60d21b4667d0d8992e610c89\"),\n    \"stallId\": ObjectId(\"60d21b4667d0d8992e610c93\")\n  },\n  \"healthRisk\": 0.2,\n  \"active\": true,\n  \"status\": \"active\",\n  \"notes\": \"Excellent health, good breeding candidate\",\n  \"metadata\": {\n    \"source\": \"purchased\",\n    \"purchaseDate\": ISODate(\"2022-06-15T00:00:00.000Z\"),\n    \"purchasePrice\": 500,\n    \"genetics\": {\n      \"sire\": \"BOAR-42\",\n      \"dam\": \"SOW-123\"\n    }\n  },\n  \"createdAt\": ISODate(\"2022-06-15T10:30:00.000Z\"),\n  \"updatedAt\": ISODate(\"2023-01-20T14:15:00.000Z\")\n}\n</code></pre>"},{"location":"database/database-schema/#indexes","title":"Indexes","text":"Index Fields Type Description Justification <code>pigId_1</code> <code>{ pigId: 1 }</code> Unique Efficient lookups by pig ID Primary lookup field, must be unique <code>tag_1</code> <code>{ tag: 1 }</code> Unique Efficient lookups by tag Common lookup field, must be unique <code>currentLocation.farmId_1</code> <code>{ \"currentLocation.farmId\": 1 }</code> Regular Query pigs by farm Common filter for listing pigs by farm <code>currentLocation.barnId_1</code> <code>{ \"currentLocation.barnId\": 1 }</code> Regular Query pigs by barn Common filter for listing pigs by barn <code>currentLocation.stallId_1</code> <code>{ \"currentLocation.stallId\": 1 }</code> Regular Query pigs by stall Common filter for listing pigs by stall <code>active_1</code> <code>{ active: 1 }</code> Regular Filter active/inactive pigs Common filter condition <code>status_1</code> <code>{ status: 1 }</code> Regular Filter by status Common filter condition <code>breed_1</code> <code>{ breed: 1 }</code> Regular Filter by breed Used for breed-specific queries <code>healthRisk_-1_updatedAt_-1</code> <code>{ healthRisk: -1, updatedAt: -1 }</code> Compound Sort by health risk and update time Used for health monitoring dashboards <code>currentLocation.farmId_1_active_1</code> <code>{ \"currentLocation.farmId\": 1, active: 1 }</code> Compound Filter by farm and active status Common combined filter"},{"location":"database/database-schema/#common-queries","title":"Common Queries","text":"<pre><code>// Find a specific pig by ID\ndb.pigs.findOne({ pigId: 1001 })\n\n// Find all active pigs in a specific farm\ndb.pigs.find({\n  \"currentLocation.farmId\": ObjectId(\"60d21b4667d0d8992e610c87\"),\n  \"active\": true\n})\n\n// Find pigs with high health risk\ndb.pigs.find({\n  \"healthRisk\": { $gt: 0.7 },\n  \"active\": true\n}).sort({ healthRisk: -1 })\n\n// Count pigs by breed\ndb.pigs.aggregate([\n  { $match: { active: true } },\n  { $group: { _id: \"$breed\", count: { $sum: 1 } } },\n  { $sort: { count: -1 } }\n])\n\n// Find pigs in a specific stall\ndb.pigs.find({\n  \"currentLocation.stallId\": ObjectId(\"60d21b4667d0d8992e610c93\"),\n  \"active\": true\n})\n</code></pre>"},{"location":"database/database-schema/#schema-validation","title":"Schema Validation","text":"<pre><code>db.createCollection(\"pigs\", {\n  validator: {\n    $jsonSchema: {\n      bsonType: \"object\",\n      required: [\"pigId\", \"tag\", \"currentLocation\", \"active\"],\n      properties: {\n        pigId: {\n          bsonType: \"int\",\n          minimum: 1,\n          description: \"must be a positive integer and is required\"\n        },\n        tag: {\n          bsonType: \"string\",\n          minLength: 1,\n          maxLength: 50,\n          description: \"must be a non-empty string up to 50 characters and is required\"\n        },\n        breed: {\n          bsonType: \"string\",\n          maxLength: 100,\n          description: \"must be a string up to 100 characters if the field exists\"\n        },\n        age: {\n          bsonType: \"number\",\n          minimum: 0,\n          description: \"must be a non-negative number if the field exists\"\n        },\n        birthDate: {\n          bsonType: \"date\",\n          description: \"must be a valid date if the field exists\"\n        },\n        weight: {\n          bsonType: \"number\",\n          minimum: 0,\n          description: \"must be a positive number if the field exists\"\n        },\n        gender: {\n          enum: [\"male\", \"female\"],\n          description: \"must be either 'male' or 'female' if the field exists\"\n        },\n        currentLocation: {\n          bsonType: \"object\",\n          required: [\"farmId\"],\n          properties: {\n            farmId: {\n              bsonType: \"objectId\",\n              description: \"must be an objectId and is required\"\n            },\n            barnId: {\n              bsonType: \"objectId\",\n              description: \"must be an objectId if the field exists\"\n            },\n            stallId: {\n              bsonType: \"objectId\",\n              description: \"must be an objectId if the field exists\"\n            }\n          }\n        },\n        healthRisk: {\n          bsonType: \"number\",\n          minimum: 0,\n          maximum: 1,\n          description: \"must be a number between 0 and 1 if the field exists\"\n        },\n        active: {\n          bsonType: \"bool\",\n          description: \"must be a boolean and is required\"\n        },\n        status: {\n          enum: [\"active\", \"sold\", \"deceased\"],\n          description: \"must be one of 'active', 'sold', or 'deceased' if the field exists\"\n        }\n        // Additional validation rules for other fields...\n      }\n    }\n  },\n  validationLevel: \"strict\",\n  validationAction: \"error\"\n});\n</code></pre>"},{"location":"database/database-schema/#farms-collection","title":"Farms Collection","text":"<p>Stores information about farms in the system.</p> <pre><code>{\n  _id: ObjectId,                // MongoDB generated ID\n  name: String,                 // Farm name\n  location: String,             // Farm location/address\n  description: String,          // Farm description\n  isActive: Boolean,            // Whether the farm is active\n  createdAt: Date,              // When the record was created\n  updatedAt: Date               // When the record was last updated\n}\n</code></pre> <p>Indexes: - <code>name</code>: Index for searching farms by name - <code>isActive</code>: Index for filtering active/inactive farms</p>"},{"location":"database/database-schema/#barns-collection","title":"Barns Collection","text":"<p>Stores information about barns within farms.</p> <pre><code>{\n  _id: ObjectId,                // MongoDB generated ID\n  name: String,                 // Barn name\n  farmId: ObjectId,             // Reference to Farm collection\n  description: String,          // Barn description\n  createdAt: Date,              // When the record was created\n  updatedAt: Date               // When the record was last updated\n}\n</code></pre> <p>Indexes: - <code>farmId</code>: Index for querying barns by farm - <code>name</code>: Index for searching barns by name</p>"},{"location":"database/database-schema/#stalls-collection","title":"Stalls Collection","text":"<p>Stores information about stalls within barns.</p> <pre><code>{\n  _id: ObjectId,                // MongoDB generated ID\n  name: String,                 // Stall name\n  farmId: ObjectId,             // Reference to Farm collection\n  barnId: ObjectId,             // Reference to Barn collection\n  capacity: Number,             // Stall capacity (number of pigs)\n  description: String,          // Stall description\n  createdAt: Date,              // When the record was created\n  updatedAt: Date               // When the record was last updated\n}\n</code></pre> <p>Indexes: - <code>farmId</code>: Index for querying stalls by farm - <code>barnId</code>: Index for querying stalls by barn - <code>name</code>: Index for searching stalls by name</p>"},{"location":"database/database-schema/#users-collection","title":"Users Collection","text":"<p>Stores user account information.</p> <pre><code>{\n  _id: ObjectId,                // MongoDB generated ID\n  email: String,                // User email (unique)\n  password: String,             // Hashed password\n  firstName: String,            // User's first name\n  lastName: String,             // User's last name\n  role: String,                 // User role (admin, manager, farmer, viewer)\n  isActive: Boolean,            // Whether the user account is active\n  lastLogin: Date,              // When the user last logged in\n  assignedFarm: ObjectId,       // Reference to Farm collection (for farmers)\n  permissions: [String],        // Array of permission strings\n  createdAt: Date,              // When the record was created\n  updatedAt: Date               // When the record was last updated\n}\n</code></pre> <p>Indexes: - <code>email</code>: Unique index for user lookup by email - <code>role</code>: Index for filtering users by role - <code>assignedFarm</code>: Index for querying users by assigned farm - <code>isActive</code>: Index for filtering active/inactive users</p>"},{"location":"database/database-schema/#posturedata-collection","title":"PostureData Collection","text":"<p>Stores pig posture measurements.</p> <pre><code>{\n  _id: ObjectId,                // MongoDB generated ID\n  pigId: Number,                // Reference to Pig collection (pigId field)\n  timestamp: Date,              // When the measurement was taken\n  score: Number,                // Posture score (0-5)\n                                // 0: Standing\n                                // 1: Sitting\n                                // 2: Lying on side\n                                // 3: Lying on belly\n                                // 4: Moving\n                                // 5: Other\n}\n</code></pre> <p>Indexes: - <code>pigId</code>: Index for querying posture data by pig - <code>timestamp</code>: Index for time-based queries - <code>pigId_timestamp</code>: Compound index for efficient queries by pig and time</p>"},{"location":"database/database-schema/#pighealthstatus-collection","title":"PigHealthStatus Collection","text":"<p>Stores pig health status records.</p> <pre><code>{\n  _id: ObjectId,                // MongoDB generated ID\n  pigId: Number,                // Reference to Pig collection (pigId field)\n  timestamp: Date,              // When the status was recorded\n  status: String,               // Health status (healthy, at risk, critical, no movement)\n  notes: String,                // Additional notes about the health status\n  recordedBy: ObjectId          // Reference to User collection (who recorded this)\n}\n</code></pre> <p>Indexes: - <code>pigId</code>: Index for querying health status by pig - <code>timestamp</code>: Index for time-based queries - <code>pigId_timestamp</code>: Compound index for efficient queries by pig and time - <code>status</code>: Index for filtering by status</p>"},{"location":"database/database-schema/#pigbcs-collection","title":"PigBCS Collection","text":"<p>Stores body condition score records.</p> <pre><code>{\n  _id: ObjectId,                // MongoDB generated ID\n  pigId: Number,                // Reference to Pig collection (pigId field)\n  timestamp: Date,              // When the score was recorded\n  score: Number,                // Body condition score (1-5)\n  notes: String,                // Additional notes about the score\n  recordedBy: ObjectId          // Reference to User collection (who recorded this)\n}\n</code></pre> <p>Indexes: - <code>pigId</code>: Index for querying BCS by pig - <code>timestamp</code>: Index for time-based queries - <code>pigId_timestamp</code>: Compound index for efficient queries by pig and time</p>"},{"location":"database/database-schema/#devices-collection","title":"Devices Collection","text":"<p>Stores information about monitoring devices.</p> <pre><code>{\n  _id: ObjectId,                // MongoDB generated ID\n  deviceId: String,             // Unique device identifier\n  type: String,                 // Device type (temperature, posture, etc.)\n  location: {                   // Device location\n    farmId: ObjectId,           // Reference to Farm collection\n    barnId: ObjectId,           // Reference to Barn collection\n    stallId: ObjectId           // Reference to Stall collection\n  },\n  status: String,               // Device status (active, inactive, maintenance)\n  lastSeen: Date,               // When the device last communicated\n  firmware: String,             // Device firmware version\n  createdAt: Date,              // When the record was created\n  updatedAt: Date               // When the record was last updated\n}\n</code></pre> <p>Indexes: - <code>deviceId</code>: Unique index for device lookup - <code>location.farmId</code>: Index for querying devices by farm - <code>location.barnId</code>: Index for querying devices by barn - <code>location.stallId</code>: Index for querying devices by stall - <code>status</code>: Index for filtering by status - <code>type</code>: Index for filtering by device type</p>"},{"location":"database/database-schema/#temperaturedata-collection","title":"TemperatureData Collection","text":"<p>Stores temperature measurements.</p> <pre><code>{\n  _id: ObjectId,                // MongoDB generated ID\n  deviceId: String,             // Reference to Device collection (deviceId field)\n  timestamp: Date,              // When the measurement was taken\n  temperature: Number,          // Temperature in Celsius\n  humidity: Number,             // Humidity percentage (optional)\n  location: {                   // Measurement location\n    farmId: ObjectId,           // Reference to Farm collection\n    barnId: ObjectId,           // Reference to Barn collection\n    stallId: ObjectId           // Reference to Stall collection\n  }\n}\n</code></pre> <p>Indexes: - <code>deviceId</code>: Index for querying temperature data by device - <code>timestamp</code>: Index for time-based queries - <code>deviceId_timestamp</code>: Compound index for efficient queries by device and time - <code>location.farmId</code>: Index for querying temperature data by farm - <code>location.barnId</code>: Index for querying temperature data by barn - <code>location.stallId</code>: Index for querying temperature data by stall</p>"},{"location":"database/database-schema/#activitylog-collection","title":"ActivityLog Collection","text":"<p>Stores system activity logs.</p> <pre><code>{\n  _id: ObjectId,                // MongoDB generated ID\n  type: String,                 // Activity type (user, pig, farm, etc.)\n  action: String,               // Action performed (created, updated, deleted, login, etc.)\n  description: String,          // Human-readable description of the activity\n  timestamp: Date,              // When the activity occurred\n  userId: ObjectId,             // Reference to User collection (who performed the action)\n  entityId: ObjectId,           // Reference to the affected entity (if applicable)\n  ipAddress: String,            // IP address of the user (for user actions)\n  metadata: Object              // Additional metadata about the activity\n}\n</code></pre> <p>Indexes: - <code>timestamp</code>: Index for time-based queries - <code>type</code>: Index for filtering by activity type - <code>action</code>: Index for filtering by action - <code>userId</code>: Index for querying activities by user - <code>entityId</code>: Index for querying activities by affected entity</p>"},{"location":"database/database-schema/#relationships","title":"Relationships","text":"<p>The database schema includes several relationships between collections:</p>"},{"location":"database/database-schema/#one-to-many-relationships","title":"One-to-Many Relationships","text":"<ul> <li>Farm to Barns: One farm can have many barns</li> <li> <p>Implemented via the <code>farmId</code> field in the Barns collection</p> </li> <li> <p>Barn to Stalls: One barn can have many stalls</p> </li> <li> <p>Implemented via the <code>barnId</code> field in the Stalls collection</p> </li> <li> <p>Farm to Users: One farm can have many assigned users</p> </li> <li> <p>Implemented via the <code>assignedFarm</code> field in the Users collection</p> </li> <li> <p>Pig to PostureData: One pig can have many posture measurements</p> </li> <li> <p>Implemented via the <code>pigId</code> field in the PostureData collection</p> </li> <li> <p>Pig to PigHealthStatus: One pig can have many health status records</p> </li> <li> <p>Implemented via the <code>pigId</code> field in the PigHealthStatus collection</p> </li> <li> <p>Pig to PigBCS: One pig can have many body condition score records</p> </li> <li> <p>Implemented via the <code>pigId</code> field in the PigBCS collection</p> </li> <li> <p>User to ActivityLog: One user can have many activity logs</p> </li> <li>Implemented via the <code>userId</code> field in the ActivityLog collection</li> </ul>"},{"location":"database/database-schema/#many-to-one-relationships","title":"Many-to-One Relationships","text":"<ul> <li>Pig to Farm/Barn/Stall: Many pigs can be in one farm/barn/stall</li> <li> <p>Implemented via the <code>currentLocation</code> object in the Pigs collection</p> </li> <li> <p>Device to Farm/Barn/Stall: Many devices can be in one farm/barn/stall</p> </li> <li> <p>Implemented via the <code>location</code> object in the Devices collection</p> </li> <li> <p>TemperatureData to Device: Many temperature measurements can come from one device</p> </li> <li>Implemented via the <code>deviceId</code> field in the TemperatureData collection</li> </ul>"},{"location":"database/database-schema/#indexing-strategy","title":"Indexing Strategy","text":"<p>The database employs a comprehensive indexing strategy to optimize query performance while balancing write performance and storage requirements. This section details the types of indexes used, their purposes, and the considerations that went into their design.</p>"},{"location":"database/database-schema/#index-types-and-usage","title":"Index Types and Usage","text":""},{"location":"database/database-schema/#single-field-indexes","title":"Single Field Indexes","text":"<p>Single field indexes are used for simple equality queries, range queries, sorting, and existence checks.</p> Collection Index Purpose Example Query <code>Pigs</code> <code>{ pigId: 1 }</code> Lookup by pig ID <code>db.pigs.findOne({ pigId: 1001 })</code> <code>Farms</code> <code>{ name: 1 }</code> Search farms by name <code>db.farms.find({ name: \"Farm 1\" })</code> <code>Users</code> <code>{ email: 1 }</code> Lookup user by email <code>db.users.findOne({ email: \"user@example.com\" })</code> <code>PostureData</code> <code>{ timestamp: -1 }</code> Sort by timestamp descending <code>db.postureData.find().sort({ timestamp: -1 })</code> <code>Devices</code> <code>{ status: 1 }</code> Filter devices by status <code>db.devices.find({ status: \"active\" })</code>"},{"location":"database/database-schema/#compound-indexes","title":"Compound Indexes","text":"<p>Compound indexes support queries that filter or sort on multiple fields, optimizing complex query patterns.</p> Collection Index Purpose Example Query <code>PostureData</code> <code>{ pigId: 1, timestamp: -1 }</code> Find posture data for a pig, sorted by time <code>db.postureData.find({ pigId: 1001 }).sort({ timestamp: -1 })</code> <code>Pigs</code> <code>{ \"currentLocation.farmId\": 1, active: 1 }</code> Find active pigs in a farm <code>db.pigs.find({ \"currentLocation.farmId\": farmId, active: true })</code> <code>ActivityLog</code> <code>{ type: 1, timestamp: -1 }</code> Find activities by type, sorted by time <code>db.activityLog.find({ type: \"pig\" }).sort({ timestamp: -1 })</code> <code>TemperatureData</code> <code>{ deviceId: 1, timestamp: -1 }</code> Find temperature data for a device, sorted by time <code>db.temperatureData.find({ deviceId: \"DEV-001\" }).sort({ timestamp: -1 })</code> <code>PigHealthStatus</code> <code>{ pigId: 1, status: 1, timestamp: -1 }</code> Find health records by pig and status <code>db.pigHealthStatus.find({ pigId: 1001, status: \"at risk\" }).sort({ timestamp: -1 })</code>"},{"location":"database/database-schema/#text-indexes","title":"Text Indexes","text":"<p>Text indexes enable full-text search capabilities across text fields.</p> Collection Index Purpose Example Query <code>Farms</code> <code>{ name: \"text\", description: \"text\" }</code> Search farms by name or description <code>db.farms.find({ $text: { $search: \"organic dairy\" } })</code> <code>Pigs</code> <code>{ notes: \"text\" }</code> Search pig notes for keywords <code>db.pigs.find({ $text: { $search: \"breeding candidate\" } })</code> <code>ActivityLog</code> <code>{ description: \"text\" }</code> Search activity descriptions <code>db.activityLog.find({ $text: { $search: \"health check\" } })</code>"},{"location":"database/database-schema/#geospatial-indexes","title":"Geospatial Indexes","text":"<p>Geospatial indexes support location-based queries (for future farm mapping features).</p> Collection Index Purpose Example Query <code>Farms</code> <code>{ geoLocation: \"2dsphere\" }</code> Find farms near a location <code>db.farms.find({ geoLocation: { $near: { $geometry: { type: \"Point\", coordinates: [ -73.9667, 40.78 ] }, $maxDistance: 5000 } } })</code>"},{"location":"database/database-schema/#partial-indexes","title":"Partial Indexes","text":"<p>Partial indexes only index a subset of documents, reducing index size and improving performance.</p> Collection Index Purpose Example Query <code>Pigs</code> <code>{ healthRisk: -1 }</code> with filter <code>{ active: true }</code> Index only active pigs by health risk <code>db.pigs.find({ active: true }).sort({ healthRisk: -1 })</code> <code>Devices</code> <code>{ lastSeen: -1 }</code> with filter <code>{ status: \"active\" }</code> Index only active devices by last seen time <code>db.devices.find({ status: \"active\" }).sort({ lastSeen: -1 })</code>"},{"location":"database/database-schema/#index-design-considerations","title":"Index Design Considerations","text":""},{"location":"database/database-schema/#query-pattern-analysis","title":"Query Pattern Analysis","text":"<p>Indexes are designed based on a thorough analysis of application query patterns:</p> <ol> <li>Frequency Analysis: Indexes prioritize the most frequently executed queries</li> <li>Performance Profiling: Slow queries are identified and optimized with appropriate indexes</li> <li>Query Shape Analysis: Queries with similar shapes share indexes where possible</li> </ol>"},{"location":"database/database-schema/#performance-balancing","title":"Performance Balancing","text":"<p>The indexing strategy balances several performance considerations:</p> <ol> <li>Read vs. Write Performance:</li> <li>Each index improves read performance but adds overhead to write operations</li> <li>Collections with high write-to-read ratios have fewer indexes</li> <li> <p>Collections with high read-to-write ratios have more comprehensive indexing</p> </li> <li> <p>Index Size and Memory Usage:</p> </li> <li>Total index size is monitored to ensure it fits within available RAM</li> <li>Compound indexes are designed to support multiple query patterns where possible</li> <li> <p>Partial indexes are used to reduce index size for large collections</p> </li> <li> <p>Index Selectivity:</p> </li> <li>More selective fields (with higher cardinality) are placed first in compound indexes</li> <li>Low-selectivity fields (like boolean flags) are typically not indexed alone</li> <li>Exception: When low-selectivity fields are frequently used in queries that return small result sets</li> </ol>"},{"location":"database/database-schema/#index-maintenance","title":"Index Maintenance","text":"<p>The indexing strategy includes ongoing maintenance procedures:</p> <ol> <li>Index Usage Monitoring:</li> <li>Regular monitoring of index usage statistics</li> <li>Unused indexes are identified and removed</li> <li> <p>Missing indexes are identified through query performance analysis</p> </li> <li> <p>Index Build Strategy:</p> </li> <li>New indexes are built during low-traffic periods</li> <li>Background index builds are used for production environments</li> <li> <p>Index builds are staggered to minimize impact on system performance</p> </li> <li> <p>Index Optimization:</p> </li> <li>Periodic review and optimization of existing indexes</li> <li>Consolidation of overlapping indexes</li> <li>Reindexing when necessary to reduce fragmentation</li> </ol>"},{"location":"database/database-schema/#index-implementation-example","title":"Index Implementation Example","text":"<p>Here's an example of how indexes are created for the Pigs collection:</p> <pre><code>// Create single field indexes\ndb.pigs.createIndex({ pigId: 1 }, { unique: true });\ndb.pigs.createIndex({ tag: 1 }, { unique: true });\ndb.pigs.createIndex({ \"currentLocation.farmId\": 1 });\ndb.pigs.createIndex({ \"currentLocation.barnId\": 1 });\ndb.pigs.createIndex({ \"currentLocation.stallId\": 1 });\ndb.pigs.createIndex({ active: 1 });\ndb.pigs.createIndex({ breed: 1 });\n\n// Create compound indexes\ndb.pigs.createIndex({ \"currentLocation.farmId\": 1, active: 1 });\ndb.pigs.createIndex({ healthRisk: -1, updatedAt: -1 });\n\n// Create text index\ndb.pigs.createIndex({ notes: \"text\" });\n\n// Create partial index\ndb.pigs.createIndex(\n  { healthRisk: -1 },\n  { partialFilterExpression: { active: true } }\n);\n</code></pre>"},{"location":"database/database-schema/#index-performance-monitoring","title":"Index Performance Monitoring","text":"<p>The system includes tools for monitoring index performance:</p> <ol> <li>Query Profiling:    ```javascript    // Enable profiling for slow queries    db.setProfilingLevel(1, { slowms: 100 });</li> </ol> <p>// Analyze slow queries    db.system.profile.find({ millis: { $gt: 100 } }).sort({ ts: -1 });    ```</p> <ol> <li>Index Statistics:    ```javascript    // Get index statistics for a collection    db.pigs.stats().indexSizes;</li> </ol> <p>// Get detailed index usage statistics    db.pigs.aggregate([      { $indexStats: {} }    ]);    ```</p> <ol> <li>Explain Plans:    <code>javascript    // Analyze query execution plan    db.pigs.find({ \"currentLocation.farmId\": farmId, active: true })      .sort({ healthRisk: -1 })      .explain(\"executionStats\");</code></li> </ol>"},{"location":"database/database-schema/#data-validation","title":"Data Validation","text":"<p>MongoDB schema validation is used to ensure data integrity:</p> <pre><code>db.createCollection(\"pigs\", {\n  validator: {\n    $jsonSchema: {\n      bsonType: \"object\",\n      required: [\"pigId\", \"tag\", \"currentLocation\", \"active\"],\n      properties: {\n        pigId: {\n          bsonType: \"int\",\n          description: \"must be an integer and is required\"\n        },\n        tag: {\n          bsonType: \"string\",\n          description: \"must be a string and is required\"\n        },\n        breed: {\n          bsonType: \"string\",\n          description: \"must be a string if the field exists\"\n        },\n        age: {\n          bsonType: \"int\",\n          minimum: 0,\n          description: \"must be a non-negative integer if the field exists\"\n        },\n        currentLocation: {\n          bsonType: \"object\",\n          required: [\"farmId\"],\n          properties: {\n            farmId: {\n              bsonType: \"objectId\",\n              description: \"must be an objectId and is required\"\n            },\n            barnId: {\n              bsonType: \"objectId\",\n              description: \"must be an objectId if the field exists\"\n            },\n            stallId: {\n              bsonType: \"objectId\",\n              description: \"must be an objectId if the field exists\"\n            }\n          }\n        },\n        active: {\n          bsonType: \"bool\",\n          description: \"must be a boolean and is required\"\n        }\n      }\n    }\n  }\n});\n</code></pre>"},{"location":"database/database-schema/#data-migration-and-versioning","title":"Data Migration and Versioning","text":"<p>As the application evolves, the database schema needs to change to accommodate new features, fix issues, or improve performance. This section details the comprehensive strategy for managing schema changes and data migrations.</p>"},{"location":"database/database-schema/#schema-versioning","title":"Schema Versioning","text":"<p>The system maintains a dedicated <code>schemaVersion</code> collection to track the current version of each collection's schema:</p> <pre><code>// Example document in the schemaVersion collection\n{\n  \"_id\": \"pigs\",                // Collection name\n  \"version\": 3,                 // Current schema version\n  \"description\": \"Added health risk calculation fields\",  // Description of latest change\n  \"updatedAt\": ISODate(\"2023-06-15T10:30:00.000Z\"),      // When the schema was last updated\n  \"updatedBy\": \"migration-script-v3\",                    // What updated the schema\n  \"history\": [                  // History of schema changes\n    {\n      \"version\": 1,\n      \"description\": \"Initial schema\",\n      \"updatedAt\": ISODate(\"2022-01-10T09:00:00.000Z\")\n    },\n    {\n      \"version\": 2,\n      \"description\": \"Added metadata fields\",\n      \"updatedAt\": ISODate(\"2022-08-22T14:45:00.000Z\")\n    },\n    {\n      \"version\": 3,\n      \"description\": \"Added health risk calculation fields\",\n      \"updatedAt\": ISODate(\"2023-06-15T10:30:00.000Z\")\n    }\n  ]\n}\n</code></pre>"},{"location":"database/database-schema/#migration-types","title":"Migration Types","text":"<p>The system supports several types of migrations:</p>"},{"location":"database/database-schema/#1-additive-migrations","title":"1. Additive Migrations","text":"<p>Adding new fields or indexes without modifying existing data:</p> <pre><code>// Add a new field to all pigs with a default value\ndb.pigs.updateMany(\n  {}, // Match all documents\n  {\n    $set: {\n      \"healthRisk\": 0  // Default value\n    }\n  }\n);\n\n// Add a new index for the new field\ndb.pigs.createIndex({ healthRisk: -1 });\n</code></pre>"},{"location":"database/database-schema/#2-transformative-migrations","title":"2. Transformative Migrations","text":"<p>Modifying existing data to conform to new schema requirements:</p> <pre><code>// Transform string age values to numbers\ndb.pigs.find({ age: { $type: \"string\" } }).forEach(function(pig) {\n  db.pigs.updateOne(\n    { _id: pig._id },\n    { $set: { age: parseInt(pig.age) } }\n  );\n});\n</code></pre>"},{"location":"database/database-schema/#3-structural-migrations","title":"3. Structural Migrations","text":"<p>Changing the structure of documents:</p> <pre><code>// Restructure location data from flat fields to nested object\ndb.pigs.find({\n  farmId: { $exists: true },\n  barnId: { $exists: true },\n  stallId: { $exists: true }\n}).forEach(function(pig) {\n  db.pigs.updateOne(\n    { _id: pig._id },\n    {\n      $set: {\n        \"currentLocation\": {\n          farmId: pig.farmId,\n          barnId: pig.barnId,\n          stallId: pig.stallId\n        }\n      },\n      $unset: {\n        farmId: \"\",\n        barnId: \"\",\n        stallId: \"\"\n      }\n    }\n  );\n});\n</code></pre>"},{"location":"database/database-schema/#4-collection-migrations","title":"4. Collection Migrations","text":"<p>Moving data between collections:</p> <pre><code>// Move temperature data to a new collection\ndb.deviceData.find({ type: \"temperature\" }).forEach(function(data) {\n  db.temperatureData.insertOne({\n    deviceId: data.deviceId,\n    timestamp: data.timestamp,\n    temperature: data.value,\n    location: data.location\n  });\n});\n</code></pre>"},{"location":"database/database-schema/#migration-framework","title":"Migration Framework","text":"<p>The system uses a custom migration framework to manage and execute migrations:</p> <pre><code>// Migration script structure\nconst migration = {\n  version: 3,\n  collection: \"pigs\",\n  description: \"Add health risk calculation fields\",\n  up: async function(db) {\n    // Add new fields\n    await db.collection(\"pigs\").updateMany(\n      {},\n      {\n        $set: {\n          \"healthRisk\": 0,\n          \"healthFactors\": {\n            \"posture\": 0,\n            \"temperature\": 0,\n            \"feeding\": 0\n          }\n        }\n      }\n    );\n\n    // Create new indexes\n    await db.collection(\"pigs\").createIndex({ healthRisk: -1 });\n\n    // Update schema version\n    await db.collection(\"schemaVersion\").updateOne(\n      { _id: \"pigs\" },\n      {\n        $set: {\n          version: this.version,\n          description: this.description,\n          updatedAt: new Date(),\n          updatedBy: \"migration-script-v3\"\n        },\n        $push: {\n          history: {\n            version: this.version,\n            description: this.description,\n            updatedAt: new Date()\n          }\n        }\n      },\n      { upsert: true }\n    );\n  },\n  down: async function(db) {\n    // Remove fields\n    await db.collection(\"pigs\").updateMany(\n      {},\n      {\n        $unset: {\n          \"healthRisk\": \"\",\n          \"healthFactors\": \"\"\n        }\n      }\n    );\n\n    // Remove indexes\n    await db.collection(\"pigs\").dropIndex({ healthRisk: -1 });\n\n    // Update schema version\n    await db.collection(\"schemaVersion\").updateOne(\n      { _id: \"pigs\" },\n      {\n        $set: {\n          version: this.version - 1,\n          updatedAt: new Date(),\n          updatedBy: \"migration-rollback-v3\"\n        }\n      }\n    );\n  }\n};\n</code></pre>"},{"location":"database/database-schema/#migration-execution-process","title":"Migration Execution Process","text":"<p>Migrations are executed through a controlled process:</p> <ol> <li>Development:</li> <li>Migrations are developed and tested in development environments</li> <li>Each migration is stored as a separate JavaScript file with up/down methods</li> <li> <p>Migrations are version-controlled in the codebase</p> </li> <li> <p>Testing:</p> </li> <li>Migrations are tested on copies of production data</li> <li>Both up and down migrations are verified</li> <li> <p>Performance impact is assessed</p> </li> <li> <p>Deployment:</p> </li> <li>Migrations are deployed during scheduled maintenance windows</li> <li>A backup is taken before running migrations</li> <li>Migrations are run in a transaction where possible</li> <li> <p>Application is put in maintenance mode during complex migrations</p> </li> <li> <p>Verification:</p> </li> <li>Data integrity is verified after migration</li> <li>Application functionality is tested with migrated data</li> <li>Performance is monitored after migration</li> </ol>"},{"location":"database/database-schema/#migration-command-line-tool","title":"Migration Command Line Tool","text":"<p>The system includes a command-line tool for managing migrations:</p> <pre><code># List all migrations and their status\nnode scripts/migrate.js list\n\n# Run pending migrations\nnode scripts/migrate.js up\n\n# Run specific migration\nnode scripts/migrate.js up --version 3 --collection pigs\n\n# Rollback last migration\nnode scripts/migrate.js down\n\n# Rollback to specific version\nnode scripts/migrate.js down --version 2 --collection pigs\n</code></pre>"},{"location":"database/database-schema/#schema-evolution-examples","title":"Schema Evolution Examples","text":"<p>Here are examples of how the schema has evolved over time:</p>"},{"location":"database/database-schema/#pigs-collection-evolution","title":"Pigs Collection Evolution","text":"Version Changes Migration Script 1 Initial schema with basic fields N/A 2 Added metadata fields for tracking pig sources <code>migrations/pigs_v2.js</code> 3 Added health risk calculation fields <code>migrations/pigs_v3.js</code> 4 Restructured location data to support hierarchical queries <code>migrations/pigs_v4.js</code>"},{"location":"database/database-schema/#example-migration-script","title":"Example Migration Script","text":"<pre><code>// migrations/pigs_v3.js\nmodule.exports = {\n  version: 3,\n  collection: \"pigs\",\n  description: \"Add health risk calculation fields\",\n\n  up: async function(db) {\n    console.log(`Running migration: ${this.collection} v${this.version} - ${this.description}`);\n\n    // Step 1: Add new fields with default values\n    await db.collection(\"pigs\").updateMany(\n      {},\n      {\n        $set: {\n          \"healthRisk\": 0,\n          \"healthFactors\": {\n            \"posture\": 0,\n            \"temperature\": 0,\n            \"feeding\": 0\n          }\n        }\n      }\n    );\n    console.log(\"Added health risk fields to all pigs\");\n\n    // Step 2: Calculate initial health risk values based on existing data\n    const pigs = await db.collection(\"pigs\").find({}).toArray();\n\n    for (const pig of pigs) {\n      // Get latest posture data\n      const postureData = await db.collection(\"postureData\")\n        .find({ pigId: pig.pigId })\n        .sort({ timestamp: -1 })\n        .limit(10)\n        .toArray();\n\n      // Calculate health factors based on posture data\n      let postureRisk = 0;\n      if (postureData.length &gt; 0) {\n        // Calculate lying percentage\n        const lyingCount = postureData.filter(p =&gt; p.score === 2 || p.score === 3).length;\n        const lyingPercentage = (lyingCount / postureData.length) * 100;\n\n        // Higher risk if pig is lying down too much\n        if (lyingPercentage &gt; 70) {\n          postureRisk = 0.3;\n        } else if (lyingPercentage &gt; 50) {\n          postureRisk = 0.1;\n        }\n      }\n\n      // Update pig with calculated risk\n      await db.collection(\"pigs\").updateOne(\n        { _id: pig._id },\n        {\n          $set: {\n            \"healthFactors.posture\": postureRisk,\n            \"healthRisk\": postureRisk // Simple calculation for now\n          }\n        }\n      );\n    }\n    console.log(\"Calculated initial health risk values\");\n\n    // Step 3: Create new indexes\n    await db.collection(\"pigs\").createIndex({ healthRisk: -1 });\n    console.log(\"Created index on healthRisk field\");\n\n    // Step 4: Update schema version\n    await db.collection(\"schemaVersion\").updateOne(\n      { _id: \"pigs\" },\n      {\n        $set: {\n          version: this.version,\n          description: this.description,\n          updatedAt: new Date(),\n          updatedBy: \"migration-script-v3\"\n        },\n        $push: {\n          history: {\n            version: this.version,\n            description: this.description,\n            updatedAt: new Date()\n          }\n        }\n      },\n      { upsert: true }\n    );\n    console.log(\"Updated schema version\");\n  },\n\n  down: async function(db) {\n    console.log(`Rolling back migration: ${this.collection} v${this.version}`);\n\n    // Step 1: Remove indexes\n    await db.collection(\"pigs\").dropIndex({ healthRisk: -1 });\n    console.log(\"Dropped index on healthRisk field\");\n\n    // Step 2: Remove fields\n    await db.collection(\"pigs\").updateMany(\n      {},\n      {\n        $unset: {\n          \"healthRisk\": \"\",\n          \"healthFactors\": \"\"\n        }\n      }\n    );\n    console.log(\"Removed health risk fields from all pigs\");\n\n    // Step 3: Update schema version\n    await db.collection(\"schemaVersion\").updateOne(\n      { _id: \"pigs\" },\n      {\n        $set: {\n          version: this.version - 1,\n          updatedAt: new Date(),\n          updatedBy: \"migration-rollback-v3\"\n        }\n      }\n    );\n    console.log(\"Updated schema version\");\n  }\n};\n</code></pre>"},{"location":"database/database-schema/#backup-and-recovery","title":"Backup and Recovery","text":"<p>The PAAL system implements a comprehensive backup and recovery strategy to ensure data durability and availability. This section details the backup procedures, recovery processes, and disaster recovery planning.</p>"},{"location":"database/database-schema/#backup-strategy","title":"Backup Strategy","text":"<p>The backup strategy employs multiple approaches to ensure data safety:</p>"},{"location":"database/database-schema/#1-full-backups","title":"1. Full Backups","text":"<p>Full backups capture the entire database state:</p> <pre><code># Daily full backup script\n#!/bin/bash\nDATE=$(date +%Y%m%d)\nBACKUP_DIR=\"/backup/mongodb/full/$DATE\"\nLOG_FILE=\"/var/log/mongodb/backup_$DATE.log\"\n\n# Create backup directory\nmkdir -p $BACKUP_DIR\n\n# Perform backup with compression\nmongodump \\\n  --host mongodb.example.com \\\n  --port 27017 \\\n  --username backup_user \\\n  --password \"$BACKUP_PASSWORD\" \\\n  --authenticationDatabase admin \\\n  --db paal \\\n  --out $BACKUP_DIR \\\n  --gzip \\\n  &gt;&gt; $LOG_FILE 2&gt;&amp;1\n\n# Verify backup\necho \"Verifying backup...\" &gt;&gt; $LOG_FILE\nmongorestore \\\n  --host mongodb-verify.example.com \\\n  --port 27017 \\\n  --username verify_user \\\n  --password \"$VERIFY_PASSWORD\" \\\n  --authenticationDatabase admin \\\n  --db paal_verify \\\n  --drop \\\n  --gzip \\\n  $BACKUP_DIR/paal \\\n  --dryRun \\\n  &gt;&gt; $LOG_FILE 2&gt;&amp;1\n\n# Rotate backups (keep last 30 days)\nfind /backup/mongodb/full -type d -mtime +30 -exec rm -rf {} \\;\n</code></pre> <p>Schedule: Daily at 1:00 AM UTC Retention: 30 days</p>"},{"location":"database/database-schema/#2-incremental-backups","title":"2. Incremental Backups","text":"<p>Incremental backups capture changes since the last backup using the MongoDB oplog:</p> <pre><code># Hourly incremental backup script\n#!/bin/bash\nDATE=$(date +%Y%m%d_%H)\nBACKUP_DIR=\"/backup/mongodb/incremental/$DATE\"\nLOG_FILE=\"/var/log/mongodb/incremental_$DATE.log\"\nLAST_TIMESTAMP_FILE=\"/var/lib/mongodb-backup/last_oplog_timestamp\"\n\n# Create backup directory\nmkdir -p $BACKUP_DIR\n\n# Get last oplog timestamp\nif [ -f $LAST_TIMESTAMP_FILE ]; then\n  LAST_TIMESTAMP=$(cat $LAST_TIMESTAMP_FILE)\n  QUERY=\"{\\\"ts\\\":{\\\"\\\\$gt\\\":{\\\"\\\\$timestamp\\\":{\\\"t\\\":$LAST_TIMESTAMP,\\\"i\\\":1}}}}\"\nelse\n  # If no timestamp file exists, get all oplog entries from the last hour\n  ONE_HOUR_AGO=$(date -d \"1 hour ago\" +%s)\n  QUERY=\"{\\\"ts\\\":{\\\"\\\\$gt\\\":{\\\"\\\\$timestamp\\\":{\\\"t\\\":$ONE_HOUR_AGO,\\\"i\\\":1}}}}\"\nfi\n\n# Perform oplog backup\nmongodump \\\n  --host mongodb.example.com \\\n  --port 27017 \\\n  --username backup_user \\\n  --password \"$BACKUP_PASSWORD\" \\\n  --authenticationDatabase admin \\\n  --db local \\\n  --collection oplog.rs \\\n  --query \"$QUERY\" \\\n  --out $BACKUP_DIR \\\n  --gzip \\\n  &gt;&gt; $LOG_FILE 2&gt;&amp;1\n\n# Get and save the latest oplog timestamp\nLATEST_TIMESTAMP=$(mongo \\\n  --host mongodb.example.com \\\n  --port 27017 \\\n  --username backup_user \\\n  --password \"$BACKUP_PASSWORD\" \\\n  --authenticationDatabase admin \\\n  --quiet \\\n  --eval \"db.getSiblingDB('local').oplog.rs.find({}, {ts:1}).sort({ts:-1}).limit(1).next().ts.t\")\n\necho $LATEST_TIMESTAMP &gt; $LAST_TIMESTAMP_FILE\n\n# Rotate incremental backups (keep last 48 hours)\nfind /backup/mongodb/incremental -type d -mtime +2 -exec rm -rf {} \\;\n</code></pre> <p>Schedule: Hourly Retention: 48 hours</p>"},{"location":"database/database-schema/#3-replica-set-replication","title":"3. Replica Set Replication","text":"<p>The MongoDB deployment uses a replica set configuration for real-time data redundancy:</p> <pre><code>// Replica set configuration\n{\n  \"_id\": \"paal-rs\",\n  \"members\": [\n    {\n      \"_id\": 0,\n      \"host\": \"mongodb-primary.example.com:27017\",\n      \"priority\": 2\n    },\n    {\n      \"_id\": 1,\n      \"host\": \"mongodb-secondary-1.example.com:27017\",\n      \"priority\": 1\n    },\n    {\n      \"_id\": 2,\n      \"host\": \"mongodb-secondary-2.example.com:27017\",\n      \"priority\": 1\n    },\n    {\n      \"_id\": 3,\n      \"host\": \"mongodb-arbiter.example.com:27017\",\n      \"arbiterOnly\": true\n    }\n  ],\n  \"settings\": {\n    \"chainingAllowed\": true,\n    \"heartbeatTimeoutSecs\": 10,\n    \"electionTimeoutMillis\": 10000,\n    \"catchUpTimeoutMillis\": 60000\n  }\n}\n</code></pre>"},{"location":"database/database-schema/#4-cloud-backup-storage","title":"4. Cloud Backup Storage","text":"<p>Backups are stored in multiple locations:</p> <ol> <li>Local Storage: For fast recovery from common failures</li> <li>Off-site Storage: For disaster recovery</li> <li>Cloud Storage: Encrypted backups in AWS S3 with lifecycle policies</li> </ol> <pre><code># Script to upload backups to AWS S3\n#!/bin/bash\nDATE=$(date +%Y%m%d)\nBACKUP_DIR=\"/backup/mongodb/full/$DATE\"\nS3_BUCKET=\"paal-mongodb-backups\"\nS3_PREFIX=\"full/$DATE\"\n\n# Encrypt backup files\ntar -czf - $BACKUP_DIR | \\\n  openssl enc -aes-256-cbc -salt -pass file:/etc/mongodb-backup/encryption_key \\\n  &gt; /tmp/mongodb_backup_$DATE.tar.gz.enc\n\n# Upload to S3\naws s3 cp \\\n  /tmp/mongodb_backup_$DATE.tar.gz.enc \\\n  s3://$S3_BUCKET/$S3_PREFIX/mongodb_backup_$DATE.tar.gz.enc \\\n  --storage-class STANDARD_IA\n\n# Clean up\nrm /tmp/mongodb_backup_$DATE.tar.gz.enc\n\n# Verify upload\naws s3api head-object \\\n  --bucket $S3_BUCKET \\\n  --key $S3_PREFIX/mongodb_backup_$DATE.tar.gz.enc\n</code></pre>"},{"location":"database/database-schema/#recovery-procedures","title":"Recovery Procedures","text":"<p>The system supports multiple recovery scenarios:</p>"},{"location":"database/database-schema/#1-point-in-time-recovery","title":"1. Point-in-Time Recovery","text":"<p>Restore the database to a specific point in time:</p> <pre><code>#!/bin/bash\n# Point-in-Time Recovery Script\n\n# Parameters\nTARGET_DATE=\"2023-06-15\"\nTARGET_TIME=\"14:30:00\"\nRESTORE_DB=\"paal\"\nTEMP_DB=\"paal_restore\"\n\n# Convert target date/time to timestamp\nTARGET_TIMESTAMP=$(date -d \"$TARGET_DATE $TARGET_TIME\" +%s)\n\n# Step 1: Find the most recent full backup before the target time\nBACKUP_DIR=$(find /backup/mongodb/full -type d -name \"2023*\" | sort | grep -v \"$TARGET_DATE\" | tail -1)\nif [ -z \"$BACKUP_DIR\" ]; then\n  echo \"No suitable full backup found before $TARGET_DATE\"\n  exit 1\nfi\n\n# Step 2: Restore the full backup to a temporary database\nmongorestore \\\n  --host mongodb-restore.example.com \\\n  --port 27017 \\\n  --username restore_user \\\n  --password \"$RESTORE_PASSWORD\" \\\n  --authenticationDatabase admin \\\n  --db $TEMP_DB \\\n  --gzip \\\n  $BACKUP_DIR/$RESTORE_DB\n\n# Step 3: Find all incremental backups between the full backup and target time\nFULL_BACKUP_DATE=$(basename $BACKUP_DIR)\nINCREMENTAL_DIRS=$(find /backup/mongodb/incremental -type d -name \"$FULL_BACKUP_DATE*\" -o -name \"$TARGET_DATE*\" | sort)\n\n# Step 4: Apply oplog entries up to the target timestamp\nfor DIR in $INCREMENTAL_DIRS; do\n  if [ -d \"$DIR/local\" ]; then\n    echo \"Applying oplog entries from $DIR...\"\n\n    # Extract and filter oplog entries\n    mongorestore \\\n      --host mongodb-restore.example.com \\\n      --port 27017 \\\n      --username restore_user \\\n      --password \"$RESTORE_PASSWORD\" \\\n      --authenticationDatabase admin \\\n      --db $TEMP_DB \\\n      --oplogReplay \\\n      --oplogLimit $TARGET_TIMESTAMP \\\n      --gzip \\\n      $DIR/local\n  fi\ndone\n\n# Step 5: Verify the restored data\nmongo \\\n  --host mongodb-restore.example.com \\\n  --port 27017 \\\n  --username restore_user \\\n  --password \"$RESTORE_PASSWORD\" \\\n  --authenticationDatabase admin \\\n  --eval \"db.getSiblingDB('$TEMP_DB').stats()\"\n\n# Step 6: Rename the temporary database to the target database\nmongo \\\n  --host mongodb-restore.example.com \\\n  --port 27017 \\\n  --username restore_user \\\n  --password \"$RESTORE_PASSWORD\" \\\n  --authenticationDatabase admin \\\n  --eval \"db.adminCommand({renameCollection: '$TEMP_DB.pigs', to: '$RESTORE_DB.pigs'})\"\n</code></pre>"},{"location":"database/database-schema/#2-single-collection-recovery","title":"2. Single Collection Recovery","text":"<p>Restore a specific collection without affecting others:</p> <pre><code>#!/bin/bash\n# Single Collection Recovery Script\n\n# Parameters\nCOLLECTION=\"pigs\"\nBACKUP_DATE=\"20230615\"\nRESTORE_DB=\"paal\"\n\n# Step 1: Restore only the specified collection\nmongorestore \\\n  --host mongodb-restore.example.com \\\n  --port 27017 \\\n  --username restore_user \\\n  --password \"$RESTORE_PASSWORD\" \\\n  --authenticationDatabase admin \\\n  --db $RESTORE_DB \\\n  --collection $COLLECTION \\\n  --gzip \\\n  /backup/mongodb/full/$BACKUP_DATE/$RESTORE_DB/$COLLECTION.bson.gz\n</code></pre>"},{"location":"database/database-schema/#3-document-level-recovery","title":"3. Document-Level Recovery","text":"<p>Restore specific documents based on query criteria:</p> <pre><code>// Document-Level Recovery Process\n\n// Step 1: Restore the collection to a temporary collection\n// (Using mongorestore command from previous example, but with a different target collection)\n\n// Step 2: Identify and copy the documents to recover\ndb.getSiblingDB('paal_restore').pigs.find({\n  pigId: { $in: [1001, 1002, 1003] }\n}).forEach(function(doc) {\n  // Check if document exists in the target collection\n  const existingDoc = db.getSiblingDB('paal').pigs.findOne({ _id: doc._id });\n\n  if (existingDoc) {\n    // Document exists, update it\n    db.getSiblingDB('paal').pigs.updateOne(\n      { _id: doc._id },\n      { $set: doc }\n    );\n  } else {\n    // Document doesn't exist, insert it\n    db.getSiblingDB('paal').pigs.insertOne(doc);\n  }\n});\n\n// Step 3: Clean up the temporary collection\ndb.getSiblingDB('paal_restore').pigs.drop();\n</code></pre>"},{"location":"database/database-schema/#backup-verification","title":"Backup Verification","text":"<p>All backups are verified to ensure they can be successfully restored:</p>"},{"location":"database/database-schema/#1-automated-verification","title":"1. Automated Verification","text":"<pre><code>#!/bin/bash\n# Backup Verification Script\n\n# Parameters\nBACKUP_DATE=\"20230615\"\nVERIFY_DB=\"paal_verify\"\n\n# Step 1: Restore the backup to a verification database\nmongorestore \\\n  --host mongodb-verify.example.com \\\n  --port 27017 \\\n  --username verify_user \\\n  --password \"$VERIFY_PASSWORD\" \\\n  --authenticationDatabase admin \\\n  --db $VERIFY_DB \\\n  --drop \\\n  --gzip \\\n  /backup/mongodb/full/$BACKUP_DATE/paal\n\n# Step 2: Run verification queries\nmongo \\\n  --host mongodb-verify.example.com \\\n  --port 27017 \\\n  --username verify_user \\\n  --password \"$VERIFY_PASSWORD\" \\\n  --authenticationDatabase admin \\\n  --eval \"\n    // Check document counts\n    const pigCount = db.getSiblingDB('$VERIFY_DB').pigs.countDocuments();\n    const farmCount = db.getSiblingDB('$VERIFY_DB').farms.countDocuments();\n    const userCount = db.getSiblingDB('$VERIFY_DB').users.countDocuments();\n\n    // Check specific important documents\n    const adminUser = db.getSiblingDB('$VERIFY_DB').users.findOne({role: 'admin'});\n    const mainFarm = db.getSiblingDB('$VERIFY_DB').farms.findOne({name: 'Main Farm'});\n\n    // Print verification results\n    print('Verification Results:');\n    print('Pig Count: ' + pigCount);\n    print('Farm Count: ' + farmCount);\n    print('User Count: ' + userCount);\n    print('Admin User Found: ' + (adminUser !== null));\n    print('Main Farm Found: ' + (mainFarm !== null));\n\n    // Overall verification status\n    const success = pigCount &gt; 0 &amp;&amp; farmCount &gt; 0 &amp;&amp; userCount &gt; 0 &amp;&amp;\n                   adminUser !== null &amp;&amp; mainFarm !== null;\n    print('Verification ' + (success ? 'PASSED' : 'FAILED'));\n\n    // Exit with appropriate code\n    quit(success ? 0 : 1);\n  \"\n\n# Step 3: Check the verification result\nif [ $? -eq 0 ]; then\n  echo \"Backup verification successful\"\n  # Send success notification\n  curl -X POST -H \"Content-Type: application/json\" \\\n    -d '{\"message\":\"Backup verification successful for '$BACKUP_DATE'\"}' \\\n    https://alerts.example.com/api/notify\nelse\n  echo \"Backup verification failed\"\n  # Send failure alert\n  curl -X POST -H \"Content-Type: application/json\" \\\n    -d '{\"message\":\"ALERT: Backup verification failed for '$BACKUP_DATE'\"}' \\\n    https://alerts.example.com/api/alert\nfi\n\n# Step 4: Clean up verification database\nmongo \\\n  --host mongodb-verify.example.com \\\n  --port 27017 \\\n  --username verify_user \\\n  --password \"$VERIFY_PASSWORD\" \\\n  --authenticationDatabase admin \\\n  --eval \"db.getSiblingDB('$VERIFY_DB').dropDatabase()\"\n</code></pre>"},{"location":"database/database-schema/#2-quarterly-recovery-drills","title":"2. Quarterly Recovery Drills","text":"<p>The team performs quarterly recovery drills to ensure the recovery procedures work as expected:</p> <ol> <li>Full Recovery Drill: Complete restoration of the database to a test environment</li> <li>Point-in-Time Recovery Drill: Restoration to a specific point in time</li> <li>Disaster Recovery Drill: Simulation of a complete data center failure</li> </ol>"},{"location":"database/database-schema/#disaster-recovery-plan","title":"Disaster Recovery Plan","text":"<p>The disaster recovery plan outlines the procedures for recovering from catastrophic failures:</p>"},{"location":"database/database-schema/#1-recovery-time-objectives-rto","title":"1. Recovery Time Objectives (RTO)","text":"<ul> <li>Tier 1 (Critical): &lt; 1 hour</li> <li>Tier 2 (Important): &lt; 4 hours</li> <li>Tier 3 (Normal): &lt; 24 hours</li> </ul>"},{"location":"database/database-schema/#2-recovery-point-objectives-rpo","title":"2. Recovery Point Objectives (RPO)","text":"<ul> <li>Tier 1 (Critical): &lt; 5 minutes</li> <li>Tier 2 (Important): &lt; 1 hour</li> <li>Tier 3 (Normal): &lt; 24 hours</li> </ul>"},{"location":"database/database-schema/#3-disaster-recovery-procedure","title":"3. Disaster Recovery Procedure","text":"<pre><code># Disaster Recovery Procedure\n\n## Phase 1: Assessment and Declaration\n1. Assess the extent of the disaster\n2. Declare disaster recovery if primary data center is unavailable\n3. Notify all stakeholders\n\n## Phase 2: Infrastructure Provisioning\n1. Activate standby infrastructure in secondary region\n2. Verify network connectivity\n3. Configure MongoDB servers\n\n## Phase 3: Data Recovery\n1. Restore the most recent full backup from cloud storage\n2. Apply incremental backups to reach the latest possible state\n3. Verify data integrity\n\n## Phase 4: Application Recovery\n1. Update application configuration to point to the recovered database\n2. Restart application services\n3. Verify application functionality\n\n## Phase 5: Validation and Monitoring\n1. Run validation tests to ensure system integrity\n2. Monitor system performance\n3. Verify all critical business functions\n\n## Phase 6: Communication and Reporting\n1. Communicate recovery status to stakeholders\n2. Document the incident and recovery process\n3. Conduct post-incident review\n</code></pre>"},{"location":"database/database-schema/#backup-and-recovery-monitoring","title":"Backup and Recovery Monitoring","text":"<p>The backup and recovery processes are continuously monitored:</p>"},{"location":"database/database-schema/#1-monitoring-metrics","title":"1. Monitoring Metrics","text":"<ul> <li>Backup Success Rate: Percentage of successful backups</li> <li>Backup Duration: Time taken to complete backups</li> <li>Backup Size: Size of backup files</li> <li>Verification Success Rate: Percentage of successful verifications</li> <li>Recovery Time: Time taken to recover in drills</li> </ul>"},{"location":"database/database-schema/#2-alerting","title":"2. Alerting","text":"<p>Alerts are configured for backup and recovery issues:</p> <ul> <li>Failed Backups: Immediate alert if a backup fails</li> <li>Backup Size Anomalies: Alert if backup size changes significantly</li> <li>Verification Failures: Alert if backup verification fails</li> <li>Missed Backups: Alert if scheduled backups are missed</li> </ul>"},{"location":"database/database-schema/#3-reporting","title":"3. Reporting","text":"<p>Regular reports are generated to track backup and recovery health:</p> <ul> <li>Daily Backup Report: Summary of all backups in the last 24 hours</li> <li>Weekly Backup Analysis: Trends and anomalies in backup metrics</li> <li>Quarterly Recovery Drill Report: Results of recovery drills</li> <li>Annual Disaster Recovery Test Report: Comprehensive assessment of DR capabilities</li> </ul>"},{"location":"database/database-schema/#conclusion","title":"Conclusion","text":"<p>The PAAL system's database schema is designed to efficiently store and retrieve data related to pig monitoring and farm management. The schema uses MongoDB's document-oriented approach to provide flexibility while maintaining data integrity through validation rules. Relationships between collections are implemented through reference fields, and indexes are strategically placed to optimize query performance.</p>"},{"location":"deployment/deployment-process/","title":"Deployment Process","text":""},{"location":"deployment/deployment-process/#overview","title":"Overview","text":"<p>This document outlines the deployment process for the PAAL system, including environments, CI/CD pipeline configuration, deployment procedures, and rollback strategies.</p>"},{"location":"deployment/deployment-process/#deployment-environments","title":"Deployment Environments","text":"<p>The PAAL system uses multiple environments to ensure quality and stability:</p> Environment Purpose Access Update Frequency Development Active development and testing Developers only Continuous Staging Pre-production testing and validation Internal team After feature completion Production Live system for end users End users Scheduled releases"},{"location":"deployment/deployment-process/#infrastructure-architecture","title":"Infrastructure Architecture","text":"<p>The system is deployed using a containerized architecture:</p> <pre><code>                   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                   \u2502   Load Balancer \u2502\n                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2502\n                 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                 \u2502                     \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502  Frontend Server \u2502  \u2502  Frontend Server \u2502\n        \u2502    (Node.js)     \u2502  \u2502    (Node.js)     \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                 \u2502                     \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502  Backend Server  \u2502  \u2502  Backend Server  \u2502\n        \u2502    (Node.js)     \u2502  \u2502    (Node.js)     \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                 \u2502                     \u2502\n                 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2502\n                   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                   \u2502   MongoDB Atlas  \u2502\n                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"deployment/deployment-process/#infrastructure-components","title":"Infrastructure Components","text":"<ul> <li>Frontend: Next.js application deployed on Node.js servers</li> <li>Backend: Express.js API deployed on Node.js servers</li> <li>Database: MongoDB Atlas (managed MongoDB service)</li> <li>Load Balancer: Nginx for traffic distribution</li> <li>Container Orchestration: Kubernetes for container management</li> <li>Container Registry: Docker Hub for container images</li> <li>CDN: Cloudflare for static asset delivery</li> </ul>"},{"location":"deployment/deployment-process/#cicd-pipeline","title":"CI/CD Pipeline","text":"<p>The CI/CD pipeline automates building, testing, and deploying the application:</p>"},{"location":"deployment/deployment-process/#pipeline-overview","title":"Pipeline Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Code   \u2502\u2500\u2500\u2500\u2500\u25b6\u2502  Build  \u2502\u2500\u2500\u2500\u2500\u25b6\u2502   Test   \u2502\u2500\u2500\u2500\u2500\u25b6\u2502  Deploy   \u2502\u2500\u2500\u2500\u2500\u25b6\u2502  Monitor   \u2502\n\u2502 Commit  \u2502     \u2502         \u2502     \u2502          \u2502     \u2502           \u2502     \u2502            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"deployment/deployment-process/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<pre><code># .github/workflows/ci-cd.yml\nname: CI/CD Pipeline\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16'\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Lint\n        run: npm run lint\n\n      - name: Build\n        run: npm run build\n\n      - name: Upload build artifacts\n        uses: actions/upload-artifact@v2\n        with:\n          name: build\n          path: .next/\n\n  test:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '16'\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Unit tests\n        run: npm run test:unit\n\n      - name: Integration tests\n        run: npm run test:integration\n\n  deploy-staging:\n    if: github.ref == 'refs/heads/develop'\n    needs: test\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Download build artifacts\n        uses: actions/download-artifact@v2\n        with:\n          name: build\n          path: .next/\n\n      - name: Setup Docker Buildx\n        uses: docker/setup-buildx-action@v1\n\n      - name: Login to DockerHub\n        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v2\n        with:\n          context: .\n          push: true\n          tags: paal/frontend:staging-${{ github.sha }}\n\n      - name: Deploy to Staging\n        uses: appleboy/ssh-action@master\n        with:\n          host: ${{ secrets.STAGING_HOST }}\n          username: ${{ secrets.STAGING_USERNAME }}\n          key: ${{ secrets.STAGING_SSH_KEY }}\n          script: |\n            kubectl set image deployment/paal-frontend frontend=paal/frontend:staging-${{ github.sha }}\n            kubectl rollout status deployment/paal-frontend\n\n  deploy-production:\n    if: github.ref == 'refs/heads/main'\n    needs: test\n    runs-on: ubuntu-latest\n    environment: production\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Download build artifacts\n        uses: actions/download-artifact@v2\n        with:\n          name: build\n          path: .next/\n\n      - name: Setup Docker Buildx\n        uses: docker/setup-buildx-action@v1\n\n      - name: Login to DockerHub\n        uses: docker/login-action@v1\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v2\n        with:\n          context: .\n          push: true\n          tags: paal/frontend:production-${{ github.sha }}\n\n      - name: Deploy to Production\n        uses: appleboy/ssh-action@master\n        with:\n          host: ${{ secrets.PRODUCTION_HOST }}\n          username: ${{ secrets.PRODUCTION_USERNAME }}\n          key: ${{ secrets.PRODUCTION_SSH_KEY }}\n          script: |\n            kubectl set image deployment/paal-frontend frontend=paal/frontend:production-${{ github.sha }}\n            kubectl rollout status deployment/paal-frontend\n</code></pre>"},{"location":"deployment/deployment-process/#deployment-procedures","title":"Deployment Procedures","text":""},{"location":"deployment/deployment-process/#development-deployment","title":"Development Deployment","text":"<p>Development deployments occur automatically when code is pushed to the <code>develop</code> branch:</p> <ol> <li>Developer pushes code to <code>develop</code> branch</li> <li>CI/CD pipeline builds and tests the code</li> <li>If tests pass, the code is deployed to the development environment</li> <li>Developers verify changes in the development environment</li> </ol>"},{"location":"deployment/deployment-process/#staging-deployment","title":"Staging Deployment","text":"<p>Staging deployments occur after feature completion and QA approval:</p> <ol> <li>QA team approves features in development environment</li> <li>Release manager creates a release branch from <code>develop</code></li> <li>CI/CD pipeline builds and tests the code</li> <li>If tests pass, the code is deployed to the staging environment</li> <li>QA team performs regression testing in staging</li> <li>If testing passes, the release branch is merged to <code>main</code></li> </ol>"},{"location":"deployment/deployment-process/#production-deployment","title":"Production Deployment","text":"<p>Production deployments follow a scheduled release cycle:</p> <ol> <li>Release manager initiates deployment from the <code>main</code> branch</li> <li>CI/CD pipeline builds and tests the code</li> <li>If tests pass, a manual approval step is required</li> <li>After approval, the code is deployed to production</li> <li>Deployment is performed using a rolling update strategy</li> <li>Monitoring systems verify the health of the new deployment</li> <li>If issues are detected, automatic rollback is triggered</li> </ol>"},{"location":"deployment/deployment-process/#step-by-step-deployment-procedure","title":"Step-by-Step Deployment Procedure","text":""},{"location":"deployment/deployment-process/#1-pre-deployment-checklist","title":"1. Pre-Deployment Checklist","text":"<ul> <li>[ ] All feature branches are merged to <code>develop</code></li> <li>[ ] All tests are passing in the CI/CD pipeline</li> <li>[ ] QA team has approved the release</li> <li>[ ] Release notes are prepared</li> <li>[ ] Database migration scripts are reviewed</li> <li>[ ] Rollback plan is in place</li> </ul>"},{"location":"deployment/deployment-process/#2-database-migration","title":"2. Database Migration","text":"<p>Database migrations are performed before code deployment:</p> <pre><code># Connect to the database server\nssh db-admin@db-server\n\n# Run database migrations\ncd /opt/paal/scripts\n./run-migrations.sh --env=production\n</code></pre>"},{"location":"deployment/deployment-process/#3-code-deployment","title":"3. Code Deployment","text":"<p>Code deployment is performed through the CI/CD pipeline:</p> <ol> <li>Trigger the deployment workflow in GitHub Actions</li> <li>Monitor the deployment progress in the GitHub Actions UI</li> <li>Verify the deployment status in Kubernetes:</li> </ol> <pre><code># Check deployment status\nkubectl get deployments\n\n# Check pod status\nkubectl get pods\n\n# Check logs\nkubectl logs deployment/paal-frontend\n</code></pre>"},{"location":"deployment/deployment-process/#4-post-deployment-verification","title":"4. Post-Deployment Verification","text":"<p>After deployment, perform verification steps:</p> <ul> <li>[ ] Application health checks are passing</li> <li>[ ] Key functionality is working as expected</li> <li>[ ] Monitoring systems show normal operation</li> <li>[ ] No errors in application logs</li> <li>[ ] Performance metrics are within expected ranges</li> </ul>"},{"location":"deployment/deployment-process/#rollback-procedures","title":"Rollback Procedures","text":"<p>If issues are detected after deployment, a rollback may be necessary:</p>"},{"location":"deployment/deployment-process/#automatic-rollback","title":"Automatic Rollback","text":"<p>The system is configured for automatic rollback if health checks fail:</p> <pre><code># Kubernetes deployment configuration\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  minReadySeconds: 30\n  revisionHistoryLimit: 10\n</code></pre>"},{"location":"deployment/deployment-process/#manual-rollback","title":"Manual Rollback","text":"<p>For manual rollback, follow these steps:</p> <ol> <li>Identify the previous stable version:</li> </ol> <pre><code># List deployment revisions\nkubectl rollout history deployment/paal-frontend\n</code></pre> <ol> <li>Rollback to the previous version:</li> </ol> <pre><code># Rollback to the previous version\nkubectl rollout undo deployment/paal-frontend\n\n# Or rollback to a specific revision\nkubectl rollout undo deployment/paal-frontend --to-revision=2\n</code></pre> <ol> <li>Verify the rollback:</li> </ol> <pre><code># Check rollback status\nkubectl rollout status deployment/paal-frontend\n\n# Verify the application is running the correct version\nkubectl describe deployment paal-frontend\n</code></pre>"},{"location":"deployment/deployment-process/#database-rollback","title":"Database Rollback","text":"<p>If database migrations need to be rolled back:</p> <pre><code># Connect to the database server\nssh db-admin@db-server\n\n# Run database rollback script\ncd /opt/paal/scripts\n./rollback-migration.sh --env=production --version=previous\n</code></pre>"},{"location":"deployment/deployment-process/#monitoring-and-alerting","title":"Monitoring and Alerting","text":"<p>The deployed application is monitored using several tools:</p>"},{"location":"deployment/deployment-process/#health-checks","title":"Health Checks","text":"<p>Kubernetes performs regular health checks:</p> <pre><code># Health check configuration\nlivenessProbe:\n  httpGet:\n    path: /api/health\n    port: 3000\n  initialDelaySeconds: 30\n  periodSeconds: 10\nreadinessProbe:\n  httpGet:\n    path: /api/ready\n    port: 3000\n  initialDelaySeconds: 5\n  periodSeconds: 10\n</code></pre>"},{"location":"deployment/deployment-process/#logging","title":"Logging","text":"<p>Application logs are collected and centralized:</p> <ul> <li>Log Collection: Fluentd collects logs from all containers</li> <li>Log Storage: Elasticsearch stores logs for analysis</li> <li>Log Visualization: Kibana provides a UI for log analysis</li> </ul>"},{"location":"deployment/deployment-process/#metrics","title":"Metrics","text":"<p>Application and system metrics are collected and monitored:</p> <ul> <li>Metric Collection: Prometheus collects metrics from all components</li> <li>Metric Visualization: Grafana provides dashboards for metrics</li> <li>Alerting: Alertmanager sends alerts based on metric thresholds</li> </ul>"},{"location":"deployment/deployment-process/#alerting-rules","title":"Alerting Rules","text":"<p>Alerts are configured for critical issues:</p> <pre><code># Prometheus alerting rules\ngroups:\n- name: paal-alerts\n  rules:\n  - alert: HighErrorRate\n    expr: sum(rate(http_requests_total{status=~\"5..\"}[5m])) / sum(rate(http_requests_total[5m])) &gt; 0.05\n    for: 5m\n    labels:\n      severity: critical\n    annotations:\n      summary: High error rate detected\n      description: More than 5% of requests are failing\n\n  - alert: HighResponseTime\n    expr: histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket[5m])) by (le)) &gt; 2\n    for: 5m\n    labels:\n      severity: warning\n    annotations:\n      summary: High response time detected\n      description: 95th percentile of response time is above 2 seconds\n</code></pre>"},{"location":"deployment/deployment-process/#disaster-recovery","title":"Disaster Recovery","text":"<p>The system includes disaster recovery procedures:</p>"},{"location":"deployment/deployment-process/#backup-strategy","title":"Backup Strategy","text":"<ul> <li>Database: Daily automated backups with point-in-time recovery</li> <li>Configuration: Infrastructure as Code (IaC) stored in version control</li> <li>Application: Container images stored in registry with version tags</li> </ul>"},{"location":"deployment/deployment-process/#recovery-procedure","title":"Recovery Procedure","text":"<p>In case of a major outage:</p> <ol> <li>Identify the cause of the outage</li> <li>Restore the most recent database backup</li> <li>Deploy the last known stable version of the application</li> <li>Verify system functionality</li> <li>Gradually restore traffic to the system</li> </ol>"},{"location":"deployment/deployment-process/#security-considerations","title":"Security Considerations","text":"<p>Deployments follow security best practices:</p> <ul> <li>Secrets Management: Kubernetes Secrets for sensitive information</li> <li>Network Security: Network policies restrict communication between components</li> <li>Image Security: Container images are scanned for vulnerabilities</li> <li>Access Control: RBAC controls access to deployment resources</li> </ul>"},{"location":"deployment/deployment-process/#continuous-improvement","title":"Continuous Improvement","text":"<p>The deployment process is continuously improved:</p> <ul> <li>Post-Deployment Reviews: After each deployment, the team reviews the process</li> <li>Metrics Collection: Deployment metrics (duration, success rate, etc.) are collected</li> <li>Automation: Manual steps are identified and automated where possible</li> <li>Documentation: Deployment documentation is updated based on lessons learned</li> </ul>"},{"location":"frontend/api-interactions/","title":"API Interactions","text":""},{"location":"frontend/api-interactions/#overview","title":"Overview","text":"<p>The frontend interacts with the backend through a RESTful API and WebSocket connections. This document details the API endpoints used, request/response formats, and the purpose of each interaction.</p>"},{"location":"frontend/api-interactions/#api-client-configuration","title":"API Client Configuration","text":"<p>The application uses Axios for HTTP requests, configured in <code>src/lib/axios.ts</code>:</p> <pre><code>import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: `${process.env.NEXT_PUBLIC_API_URL}/api`,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include auth token\napi.interceptors.request.use((config) =&gt; {\n  // Only add token for browser environment\n  if (typeof window !== 'undefined') {\n    // Get token from localStorage\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n  }\n\n  return config;\n});\n\n// Add a response interceptor to handle authentication errors\napi.interceptors.response.use(\n  (response) =&gt; {\n    return response;\n  },\n  (error) =&gt; {\n    // If the error is due to authentication (401) or authorization (403)\n    if (error.response &amp;&amp; (error.response.status === 401 || error.response.status === 403)) {\n      // Redirect to login page if not already there\n      if (typeof window !== 'undefined' &amp;&amp; !window.location.pathname.includes('/login')) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        window.location.href = '/login';\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default api;\n</code></pre>"},{"location":"frontend/api-interactions/#authentication-endpoints","title":"Authentication Endpoints","text":""},{"location":"frontend/api-interactions/#login","title":"Login","text":"<ul> <li>Endpoint: <code>POST /api/auth/login</code></li> <li>Purpose: Authenticate a user and receive an access token</li> <li>Request:   <code>json   {     \"email\": \"user@example.com\",     \"password\": \"password123\"   }</code></li> <li>Response:   <code>json   {     \"token\": \"jwt-token-string\",     \"user\": {       \"id\": \"user-id\",       \"email\": \"user@example.com\",       \"firstName\": \"John\",       \"lastName\": \"Doe\",       \"role\": \"admin\"     }   }</code></li> </ul>"},{"location":"frontend/api-interactions/#verify-token","title":"Verify Token","text":"<ul> <li>Endpoint: <code>GET /api/auth/token</code></li> <li>Purpose: Verify if the current token is valid and get user information</li> <li>Headers: <code>Authorization: Bearer {token}</code></li> <li>Response:   <code>json   {     \"user\": {       \"id\": \"user-id\",       \"email\": \"user@example.com\",       \"firstName\": \"John\",       \"lastName\": \"Doe\",       \"role\": \"admin\",       \"assignedFarm\": {         \"id\": \"farm-id\",         \"name\": \"Farm Name\"       }     },     \"token\": \"jwt-token-string\"   }</code></li> </ul>"},{"location":"frontend/api-interactions/#pig-management-endpoints","title":"Pig Management Endpoints","text":""},{"location":"frontend/api-interactions/#get-all-pigs","title":"Get All Pigs","text":"<ul> <li>Endpoint: <code>GET /api/pigs</code></li> <li>Purpose: Retrieve a list of all pigs in the system</li> <li>Headers: <code>Authorization: Bearer {token}</code></li> <li>Response:   <code>json   [     {       \"owner\": \"PIG-001\",       \"status\": \"healthy\",       \"costs\": \"12\",       \"region\": \"Stall A\",       \"stability\": 0.8,       \"lastEdited\": \"01/01/2023, 12:00\",       \"breed\": \"Yorkshire\",       \"active\": true     },     // More pigs...   ]</code></li> </ul>"},{"location":"frontend/api-interactions/#get-pig-overview","title":"Get Pig Overview","text":"<ul> <li>Endpoint: <code>GET /api/pigs/overview</code></li> <li>Purpose: Get aggregated pig data for dashboard</li> <li>Headers: <code>Authorization: Bearer {token}</code></li> <li>Query Parameters: </li> <li><code>filter</code>: Optional filter (e.g., \"breeding\", \"new\", \"healthy\")</li> <li>Response:   <code>json   {     \"success\": true,     \"data\": [       {         \"name\": \"Breeding\",         \"Farm 1\": 10,         \"Farm 2\": 5,         \"averageWeight\": 120       },       // More categories...     ],     \"stats\": {       \"totalPigs\": 150,       \"categories\": [\"Breeding\", \"Healthy\", \"At Risk\"],       \"locations\": [\"Farm 1\", \"Farm 2\"]     }   }</code></li> </ul>"},{"location":"frontend/api-interactions/#get-single-pig","title":"Get Single Pig","text":"<ul> <li>Endpoint: <code>GET /api/pigs/{id}</code></li> <li>Purpose: Get detailed information about a specific pig</li> <li>Headers: <code>Authorization: Bearer {token}</code></li> <li>Response:   <code>json   {     \"pigId\": 123,     \"tag\": \"PIG-123\",     \"breed\": \"Yorkshire\",     \"age\": 12,     \"currentLocation\": {       \"farmId\": {         \"_id\": \"farm-id\",         \"name\": \"Farm 1\"       },       \"barnId\": {         \"_id\": \"barn-id\",         \"name\": \"Barn A\"       },       \"stallId\": {         \"_id\": \"stall-id\",         \"name\": \"Stall 1\"       }     },     \"active\": true   }</code></li> </ul>"},{"location":"frontend/api-interactions/#get-pig-posture-data","title":"Get Pig Posture Data","text":"<ul> <li>Endpoint: <code>GET /api/pigs/{id}/posture/aggregated</code></li> <li>Purpose: Get aggregated posture data for a specific pig</li> <li>Headers: <code>Authorization: Bearer {token}</code></li> <li>Query Parameters:</li> <li><code>start</code>: Start date (YYYY-MM-DD)</li> <li><code>end</code>: End date (YYYY-MM-DD)</li> <li>Response:   <code>json   [     {       \"date\": \"2022-08-01\",       \"standing\": 45,       \"sitting\": 30,       \"lying\": 25     },     // More dates...   ]</code></li> </ul>"},{"location":"frontend/api-interactions/#create-pig","title":"Create Pig","text":"<ul> <li>Endpoint: <code>POST /api/pigs</code></li> <li>Purpose: Create a new pig in the system</li> <li>Headers: <code>Authorization: Bearer {token}</code></li> <li>Request:   <code>json   {     \"pigId\": 123,     \"tag\": \"PIG-123\",     \"breed\": \"Yorkshire\",     \"age\": 12,     \"currentLocation\": {       \"farmId\": \"farm-id\",       \"barnId\": \"barn-id\",       \"stallId\": \"stall-id\"     }   }</code></li> <li>Response:   <code>json   {     \"success\": true,     \"pig\": {       \"pigId\": 123,       \"tag\": \"PIG-123\",       \"breed\": \"Yorkshire\",       \"age\": 12,       \"currentLocation\": {         \"farmId\": \"farm-id\",         \"barnId\": \"barn-id\",         \"stallId\": \"stall-id\"       },       \"active\": true,       \"_id\": \"pig-mongodb-id\"     }   }</code></li> </ul>"},{"location":"frontend/api-interactions/#farm-management-endpoints","title":"Farm Management Endpoints","text":""},{"location":"frontend/api-interactions/#get-all-farms","title":"Get All Farms","text":"<ul> <li>Endpoint: <code>GET /api/farms</code></li> <li>Purpose: Retrieve a list of all farms</li> <li>Headers: <code>Authorization: Bearer {token}</code></li> <li>Response:   <code>json   [     {       \"_id\": \"farm-id-1\",       \"name\": \"Farm 1\",       \"location\": \"Location 1\",       \"description\": \"Description for Farm 1\",       \"isActive\": true,       \"counts\": {         \"barns\": 5,         \"stalls\": 20,         \"pigs\": 100       }     },     // More farms...   ]</code></li> </ul>"},{"location":"frontend/api-interactions/#get-single-farm","title":"Get Single Farm","text":"<ul> <li>Endpoint: <code>GET /api/farms/{id}</code></li> <li>Purpose: Get detailed information about a specific farm</li> <li>Headers: <code>Authorization: Bearer {token}</code></li> <li>Response:   <code>json   {     \"_id\": \"farm-id-1\",     \"name\": \"Farm 1\",     \"location\": \"Location 1\",     \"description\": \"Description for Farm 1\",     \"isActive\": true,     \"counts\": {       \"barns\": 5,       \"stalls\": 20,       \"pigs\": 100,       \"devices\": 15     },     \"healthStatus\": {       \"healthy\": 80,       \"atRisk\": 15,       \"critical\": 5     },     \"barns\": [       // Barn objects...     ],     \"recentPigs\": [       // Recent pig objects...     ],     \"devices\": [       // Device objects...     ]   }</code></li> </ul>"},{"location":"frontend/api-interactions/#user-management-endpoints","title":"User Management Endpoints","text":""},{"location":"frontend/api-interactions/#get-all-users","title":"Get All Users","text":"<ul> <li>Endpoint: <code>GET /api/users</code></li> <li>Purpose: Retrieve a list of all users</li> <li>Headers: <code>Authorization: Bearer {token}</code></li> <li>Response:   <code>json   [     {       \"_id\": \"user-id-1\",       \"email\": \"user1@example.com\",       \"firstName\": \"John\",       \"lastName\": \"Doe\",       \"role\": \"admin\",       \"isActive\": true,       \"lastLogin\": \"2023-01-01T12:00:00.000Z\"     },     // More users...   ]</code></li> </ul>"},{"location":"frontend/api-interactions/#create-user","title":"Create User","text":"<ul> <li>Endpoint: <code>POST /api/auth/register</code></li> <li>Purpose: Create a new user</li> <li>Headers: <code>Authorization: Bearer {token}</code></li> <li>Request:   <code>json   {     \"email\": \"newuser@example.com\",     \"password\": \"password123\",     \"firstName\": \"Jane\",     \"lastName\": \"Smith\",     \"role\": \"farmer\",     \"permissions\": [\"read:farms\", \"write:pigs\"],     \"restrictedFarms\": [\"farm-id-1\"],     \"restrictedStalls\": [\"stall-id-1\"]   }</code></li> <li>Response:   <code>json   {     \"_id\": \"new-user-id\",     \"email\": \"newuser@example.com\",     \"firstName\": \"Jane\",     \"lastName\": \"Smith\",     \"role\": \"farmer\",     \"permissions\": [\"read:farms\", \"write:pigs\"],     \"restrictedFarms\": [\"farm-id-1\"],     \"restrictedStalls\": [\"stall-id-1\"],     \"isActive\": true   }</code></li> </ul>"},{"location":"frontend/api-interactions/#real-time-data-with-socketio","title":"Real-time Data with Socket.IO","text":"<p>The frontend server for the application uses Socket.IO for real-time updates, configured in <code>src/lib/socket.ts</code>:</p> <p>Note: the socket.io implementation is really only a concept. (No implmentation for serialized data) Further development for live-time updates will need to be implemented. </p> <pre><code>import { io } from 'socket.io-client'\n\nconst SOCKET_URL = `http://localhost:8080`\n\nexport const socket = io(SOCKET_URL, {\n  path: \"/socket.io\",\n  transports: ['websocket'],\n  autoConnect: true\n})\n\nexport const subscribeToStats = (callback: (stats: any) =&gt; void) =&gt; {\n  socket.on('stats_update', callback)\n  return () =&gt; {\n    socket.off('stats_update', callback)\n  }\n}\n\nexport const subscribeToDevices = (callback: (devices: any) =&gt; void) =&gt; {\n  socket.on('devices_update', callback)\n  return () =&gt; {\n    socket.off('devices_update', callback)\n  }\n}\n\nexport const subscribeToPigs = (callback: (pigs: any) =&gt; void) =&gt; {\n  socket.on('pigs_update', callback)\n  return () =&gt; {\n    socket.off('pigs_update', callback)\n  }\n}\n\nexport const subscribeToActivities = (callback: (activities: any) =&gt; void) =&gt; {\n  socket.on('recent_activities', callback)\n  return () =&gt; {\n    socket.off('recent_activities', callback)\n  }\n}\n\nexport const subscribeToNewActivity = (callback: (activity: any) =&gt; void) =&gt; {\n  socket.on('activity', callback)\n  return () =&gt; {\n    socket.off('activity', callback)\n  }\n}\n</code></pre>"},{"location":"frontend/api-interactions/#socket-events","title":"Socket Events","text":"<ul> <li>stats_update: Receives updated system statistics</li> <li>devices_update: Receives updates about device status changes</li> <li>pigs_update: Receives updates about pig data changes</li> <li>recent_activities: Receives a list of recent system activities</li> <li>activity: Receives a single new activity event</li> </ul>"},{"location":"frontend/api-interactions/#error-handling","title":"Error Handling","text":"<p>API errors are handled consistently throughout the application:</p> <ol> <li>HTTP status codes are used to indicate the type of error</li> <li>Error responses include a descriptive message</li> <li>The API client's interceptor handles authentication errors automatically</li> <li>Component-level error states display appropriate messages to users</li> </ol>"},{"location":"frontend/key-components/","title":"Key Components and Structure","text":""},{"location":"frontend/key-components/#overview","title":"Overview","text":"<p>The PAAL frontend is organized into several key functional areas, each composed of multiple components with specific responsibilities. This document outlines the major areas, their component hierarchies, and how they interact.</p>"},{"location":"frontend/key-components/#dashboard-overview","title":"Dashboard Overview","text":"<p>The dashboard provides a high-level view of the system's status and key metrics.</p>"},{"location":"frontend/key-components/#component-hierarchy","title":"Component Hierarchy","text":"<pre><code>Overview (page.tsx)\n\u251c\u2500\u2500 Filterbar\n\u2502   \u251c\u2500\u2500 DateRangeSelector\n\u2502   \u2514\u2500\u2500 GroupSelector\n\u251c\u2500\u2500 ChartCard\n\u2502   \u251c\u2500\u2500 BarChart\n\u2502   \u2514\u2500\u2500 LineChart\n\u251c\u2500\u2500 ProgressBarCard\n\u251c\u2500\u2500 FertilityProgressCard\n\u251c\u2500\u2500 HeatProgressCard\n\u2514\u2500\u2500 BarnStallCard\n</code></pre>"},{"location":"frontend/key-components/#responsibilities","title":"Responsibilities","text":"<ul> <li>Overview: Container component that manages data fetching and state</li> <li>Filterbar: Handles filtering by date range and group (farm/barn)</li> <li>ChartCard: Displays visualizations of pig data</li> <li>ProgressBarCard: Shows progress metrics with visual indicators</li> <li>FertilityProgressCard: Displays fertility-specific metrics</li> <li>HeatProgressCard: Shows heat cycle information</li> <li>BarnStallCard: Displays barn and stall occupancy information</li> </ul>"},{"location":"frontend/key-components/#data-flow","title":"Data Flow","text":"<ol> <li>The Overview component fetches data from <code>/api/pigs/overview</code> and <code>/api/stats</code></li> <li>Data is passed to child components as props</li> <li>Filter components emit events when filters change</li> <li>The Overview component re-fetches data with updated filter parameters</li> </ol>"},{"location":"frontend/key-components/#pig-details-page","title":"Pig Details Page","text":"<p>Displays detailed information about individual pigs, including health records and posture data.</p>"},{"location":"frontend/key-components/#component-hierarchy_1","title":"Component Hierarchy","text":"<pre><code>PigDashboard (page.tsx)\n\u251c\u2500\u2500 PigHeader\n\u2502   \u251c\u2500\u2500 Badge (status)\n\u2502   \u2514\u2500\u2500 ActionButtons\n\u251c\u2500\u2500 Tabs\n\u2502   \u251c\u2500\u2500 OverviewTab\n\u2502   \u2502   \u251c\u2500\u2500 HealthMetricCard\n\u2502   \u2502   \u251c\u2500\u2500 LocationCard\n\u2502   \u2502   \u2514\u2500\u2500 HistoryTimeline\n\u2502   \u251c\u2500\u2500 PostureTab\n\u2502   \u2502   \u251c\u2500\u2500 DateRangeSelectorWithApply\n\u2502   \u2502   \u251c\u2500\u2500 TransactionChart\n\u2502   \u2502   \u2514\u2500\u2500 PostureDataTable\n\u2502   \u2514\u2500\u2500 HealthTab\n\u2502       \u251c\u2500\u2500 BCSChart\n\u2502       \u2514\u2500\u2500 HealthRecordsTable\n\u251c\u2500\u2500 AddHealthRecordDrawer\n\u2514\u2500\u2500 EditPigDrawer\n</code></pre>"},{"location":"frontend/key-components/#responsibilities_1","title":"Responsibilities","text":"<ul> <li>PigDashboard: Container component that manages data fetching and state</li> <li>PigHeader: Displays pig identification and status information</li> <li>ActionButtons: Provides actions like editing pig details and adding health records</li> <li>OverviewTab: Shows summary information about the pig</li> <li>PostureTab: Displays posture data visualizations and tables</li> <li>HealthTab: Shows health records and body condition score data</li> <li>Drawers: Modal interfaces for adding/editing data</li> </ul>"},{"location":"frontend/key-components/#data-flow_1","title":"Data Flow","text":"<ol> <li>The PigDashboard fetches pig data from <code>/api/pigs/{id}</code></li> <li>Additional data is fetched from endpoints like <code>/api/pigs/{id}/posture/aggregated</code> and <code>/api/pigs/{id}/bcs</code></li> <li>Data is passed to tab components based on the active tab</li> <li>User actions in drawers trigger API calls to update data</li> <li>After successful updates, the main data is refreshed</li> </ol>"},{"location":"frontend/key-components/#admin-farm-management","title":"Admin Farm Management","text":"<p>Manages farms, barns, and stalls in the system.</p>"},{"location":"frontend/key-components/#component-hierarchy_2","title":"Component Hierarchy","text":"<pre><code>FarmManagement (page.tsx)\n\u251c\u2500\u2500 AdminPageHeader\n\u251c\u2500\u2500 Tabs\n\u2502   \u251c\u2500\u2500 GridView\n\u2502   \u2502   \u2514\u2500\u2500 AdminFarmCard\n\u2502   \u2514\u2500\u2500 TableView\n\u2502       \u2514\u2500\u2500 FarmTable\n\u251c\u2500\u2500 CreateFarmModal\n\u2514\u2500\u2500 FarmDetailsModal\n    \u251c\u2500\u2500 BarnList\n    \u2502   \u2514\u2500\u2500 BarnCard\n    \u251c\u2500\u2500 StallList\n    \u2502   \u2514\u2500\u2500 StallCard\n    \u2514\u2500\u2500 DeviceList\n        \u2514\u2500\u2500 DeviceCard\n</code></pre>"},{"location":"frontend/key-components/#responsibilities_2","title":"Responsibilities","text":"<ul> <li>FarmManagement: Container component that manages data fetching and state</li> <li>AdminPageHeader: Displays page title and action buttons</li> <li>GridView/TableView: Different visualizations of farm data</li> <li>AdminFarmCard: Card component displaying farm information</li> <li>CreateFarmModal: Interface for adding new farms</li> <li>FarmDetailsModal: Detailed view of a farm with related entities</li> </ul>"},{"location":"frontend/key-components/#data-flow_2","title":"Data Flow","text":"<ol> <li>The FarmManagement component fetches farm data from <code>/api/farms</code></li> <li>When a farm is selected, detailed data is fetched from <code>/api/farms/{id}</code></li> <li>Create/update actions trigger API calls to modify data</li> <li>After successful operations, the farm list is refreshed</li> </ol>"},{"location":"frontend/key-components/#user-management","title":"User Management","text":"<p>Manages user accounts and permissions.</p>"},{"location":"frontend/key-components/#component-hierarchy_3","title":"Component Hierarchy","text":"<pre><code>UserManagement (page.tsx)\n\u251c\u2500\u2500 AdminPageHeader\n\u251c\u2500\u2500 UserFilters\n\u251c\u2500\u2500 UserTable\n\u2502   \u2514\u2500\u2500 UserRow\n\u251c\u2500\u2500 CreateUserModal\n\u2502   \u251c\u2500\u2500 UserForm\n\u2502   \u2514\u2500\u2500 RoleSelector\n\u2514\u2500\u2500 EditUserModal\n    \u251c\u2500\u2500 UserForm\n    \u251c\u2500\u2500 RoleSelector\n    \u2514\u2500\u2500 PermissionsForm\n</code></pre>"},{"location":"frontend/key-components/#responsibilities_3","title":"Responsibilities","text":"<ul> <li>UserManagement: Container component that manages data fetching and state</li> <li>UserFilters: Filtering options for the user list</li> <li>UserTable: Displays user information in a tabular format</li> <li>CreateUserModal: Interface for adding new users</li> <li>EditUserModal: Interface for modifying existing users</li> </ul>"},{"location":"frontend/key-components/#data-flow_3","title":"Data Flow","text":"<ol> <li>The UserManagement component fetches user data from <code>/api/users</code></li> <li>When a user is selected for editing, detailed data is fetched from <code>/api/users/{id}</code></li> <li>Create/update actions trigger API calls to modify data</li> <li>After successful operations, the user list is refreshed</li> </ol>"},{"location":"frontend/key-components/#common-components","title":"Common Components","text":"<p>Several reusable components are used throughout the application:</p>"},{"location":"frontend/key-components/#ui-components","title":"UI Components","text":"<ul> <li>Card: Container component with consistent styling</li> <li>Button: Various button styles (primary, secondary, etc.)</li> <li>Tabs: Tabbed interface component</li> <li>Select: Dropdown selection component</li> <li>DatePicker: Date selection component</li> <li>Table: Data table component with sorting and pagination</li> <li>Modal/Drawer: Overlay components for forms and detailed views</li> <li>Skeleton: Loading placeholder components</li> </ul>"},{"location":"frontend/key-components/#layout-components","title":"Layout Components","text":"<ul> <li>Sidebar: Main navigation sidebar</li> <li>Header: Page header with user information and actions</li> <li>ConditionalLayout: Layout wrapper that adapts based on authentication state</li> <li>AuthProvider: Authentication context provider</li> </ul>"},{"location":"frontend/key-components/#data-visualization","title":"Data Visualization","text":"<ul> <li>BarChart: Bar chart visualization</li> <li>LineChart: Line chart visualization</li> <li>ProgressCircle: Circular progress indicator</li> <li>CategoryBar: Horizontal category-based progress bar</li> </ul>"},{"location":"frontend/overall-architecture/","title":"Frontend Overall Architecture","text":""},{"location":"frontend/overall-architecture/#architecture-type","title":"Architecture Type","text":"<p>The PAAL system frontend is built as a monolithic single-page application (SPA) using Next.js, a React framework that enables server-side rendering and static site generation. This architecture provides a balance between developer experience, performance, and SEO capabilities.</p>"},{"location":"frontend/overall-architecture/#core-technologies","title":"Core Technologies","text":""},{"location":"frontend/overall-architecture/#framework-and-libraries","title":"Framework and Libraries","text":"<ul> <li>Next.js 14: Provides the foundation for the application with features like file-based routing, API routes, and server components</li> <li>React 18: Component-based UI library for building the user interface</li> <li>TypeScript: Adds static typing to JavaScript for improved developer experience and code quality</li> <li>Tailwind CSS: Utility-first CSS framework for styling components</li> </ul>"},{"location":"frontend/overall-architecture/#state-management","title":"State Management","text":"<ul> <li>React Context API: Used for global state management across the application</li> <li>React Query: Handles server state, data fetching, caching, and synchronization</li> <li>Local component state: Managed using React's useState and useReducer hooks for component-specific state</li> </ul>"},{"location":"frontend/overall-architecture/#ui-component-libraries","title":"UI Component Libraries","text":"<ul> <li>Tremor: Used for data visualization components like charts and dashboards</li> <li>Shadcn/UI: Collection of reusable UI components built with Radix UI and Tailwind CSS</li> <li>Lucide Icons: Icon library used throughout the application</li> </ul>"},{"location":"frontend/overall-architecture/#application-structure","title":"Application Structure","text":"<p>The frontend application follows Next.js's file-based routing structure:</p> <pre><code>src/\n\u251c\u2500\u2500 app/                 # Next.js app directory (routes and pages)\n\u2502   \u251c\u2500\u2500 (auth)/          # Authentication-related routes\n\u2502   \u251c\u2500\u2500 (main)/          # Main application routes\n\u2502   \u2502   \u251c\u2500\u2500 overview/    # Dashboard overview page\n\u2502   \u2502   \u251c\u2500\u2500 details/     # Detailed data views\n\u2502   \u2502   \u251c\u2500\u2500 admin/       # Admin panel pages\n\u2502   \u2502   \u2514\u2500\u2500 pigs/        # Pig management pages\n\u2502   \u251c\u2500\u2500 api/             # API routes for server-side operations\n\u2502   \u2514\u2500\u2500 layout.tsx       # Root layout component\n\u251c\u2500\u2500 components/          # Reusable UI components\n\u2502   \u251c\u2500\u2500 ui/              # Basic UI components\n\u2502   \u2514\u2500\u2500 [feature]/       # Feature-specific components\n\u251c\u2500\u2500 lib/                 # Utility functions and shared code\n\u2502   \u251c\u2500\u2500 axios.ts         # API client configuration\n\u2502   \u2514\u2500\u2500 utils.ts         # General utility functions\n\u251c\u2500\u2500 hooks/               # Custom React hooks\n\u2514\u2500\u2500 types/               # TypeScript type definitions\n</code></pre>"},{"location":"frontend/overall-architecture/#rendering-strategy","title":"Rendering Strategy","text":"<p>The application uses a hybrid rendering approach:</p> <ul> <li>Server-side rendering (SSR): For pages that require dynamic data on initial load</li> <li>Static site generation (SSG): For pages with static content that can be pre-rendered</li> <li>Client-side rendering: For highly interactive components after initial page load</li> </ul>"},{"location":"frontend/overall-architecture/#data-flow","title":"Data Flow","text":"<ol> <li>Data Fetching: API requests are made using the axios client configured in <code>lib/axios.ts</code></li> <li>State Management: Data is stored in React Query cache or Context API stores</li> <li>Component Rendering: Components consume data from these stores and render the UI</li> <li>User Interactions: User actions trigger state updates or API calls</li> <li>Real-time Updates: Socket.io is used for real-time data updates from the server</li> </ol>"},{"location":"frontend/overall-architecture/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Code splitting via Next.js's automatic chunking</li> <li>Image optimization using Next.js Image component</li> <li>Lazy loading of components and routes</li> <li>Memoization of expensive calculations and renders</li> </ul>"},{"location":"frontend/state-management/","title":"State Management","text":""},{"location":"frontend/state-management/#overview","title":"Overview","text":"<p>The PAAL frontend uses a combination of state management approaches to handle different types of state. This document outlines those said states: </p>"},{"location":"frontend/state-management/#state-categories","title":"State Categories","text":"<p>The application's state is divided into several categories:</p> <ol> <li>Server State: Data fetched from the backend API</li> <li>UI State: Visual state like open/closed modals, active tabs, etc.</li> <li>Form State: User input in forms and validation state</li> <li>Authentication State: User authentication information</li> <li>Application State: Cross-cutting concerns like theme preferences</li> </ol>"},{"location":"frontend/state-management/#server-state-management","title":"Server State Management","text":""},{"location":"frontend/state-management/#react-query","title":"React Query","text":"<p>React Query is the primary tool for managing server state. It provides:</p> <ul> <li>Data fetching with automatic caching</li> <li>Background refetching for stale data</li> <li>Pagination and infinite scrolling support</li> <li>Mutation capabilities for updating data</li> <li>Optimistic updates for a responsive UI</li> </ul>"},{"location":"frontend/state-management/#example-usage","title":"Example Usage:","text":"<pre><code>import { useQuery, useMutation, useQueryClient } from 'react-query';\nimport api from '@/lib/axios';\n\n// Fetch pigs\nconst usePigs = (filters) =&gt; {\n  return useQuery(\n    ['pigs', filters],\n    async () =&gt; {\n      const response = await api.get('/pigs', { params: filters });\n      return response.data;\n    },\n    {\n      staleTime: 5 * 60 * 1000, // 5 minutes\n      refetchOnWindowFocus: true,\n    }\n  );\n};\n\n// Update a pig\nconst useUpdatePig = () =&gt; {\n  const queryClient = useQueryClient();\n\n  return useMutation(\n    async (pigData) =&gt; {\n      const response = await api.put(`/pigs/${pigData.pigId}`, pigData);\n      return response.data;\n    },\n    {\n      onSuccess: (data, variables) =&gt; {\n        // Invalidate and refetch\n        queryClient.invalidateQueries(['pigs']);\n        queryClient.invalidateQueries(['pig', variables.pigId]);\n      },\n    }\n  );\n};\n</code></pre>"},{"location":"frontend/state-management/#custom-hooks-for-api-interactions","title":"Custom Hooks for API Interactions","text":"<p>For complex data requirements, custom hooks encapsulate the data fetching logic:</p> <pre><code>// src/hooks/usePigDetails.ts\nimport { useQuery } from 'react-query';\nimport api from '@/lib/axios';\n\nexport const usePigDetails = (pigId) =&gt; {\n  const { data: pig, isLoading: pigLoading, error: pigError } = useQuery(\n    ['pig', pigId],\n    async () =&gt; {\n      const response = await api.get(`/pigs/${pigId}`);\n      return response.data;\n    },\n    {\n      enabled: !!pigId,\n    }\n  );\n\n  const { data: postureData, isLoading: postureLoading, error: postureError } = useQuery(\n    ['pig-posture', pigId],\n    async () =&gt; {\n      const response = await api.get(`/pigs/${pigId}/posture/aggregated`);\n      return response.data;\n    },\n    {\n      enabled: !!pigId,\n    }\n  );\n\n  return {\n    pig,\n    postureData,\n    isLoading: pigLoading || postureLoading,\n    error: pigError || postureError,\n  };\n};\n</code></pre>"},{"location":"frontend/state-management/#ui-state-management","title":"UI State Management","text":""},{"location":"frontend/state-management/#react-context-api","title":"React Context API","text":"<p>For UI state that needs to be shared across components, React Context is used:</p> <pre><code>// src/components/Sidebar/SidebarContext.tsx\nimport React, { createContext, useContext, useState } from 'react';\n\ntype SidebarContextType = {\n  isOpen: boolean;\n  toggle: () =&gt; void;\n  close: () =&gt; void;\n  open: () =&gt; void;\n};\n\nconst SidebarContext = createContext&lt;SidebarContextType | undefined&gt;(undefined);\n\nexport const SidebarProvider: React.FC&lt;{\n  children: React.ReactNode;\n  defaultOpen?: boolean;\n}&gt; = ({ children, defaultOpen = false }) =&gt; {\n  const [isOpen, setIsOpen] = useState(defaultOpen);\n\n  const toggle = () =&gt; setIsOpen(!isOpen);\n  const close = () =&gt; setIsOpen(false);\n  const open = () =&gt; setIsOpen(true);\n\n  return (\n    &lt;SidebarContext.Provider value={{ isOpen, toggle, close, open }}&gt;\n      {children}\n    &lt;/SidebarContext.Provider&gt;\n  );\n};\n\nexport const useSidebar = () =&gt; {\n  const context = useContext(SidebarContext);\n  if (context === undefined) {\n    throw new Error('useSidebar must be used within a SidebarProvider');\n  }\n  return context;\n};\n</code></pre>"},{"location":"frontend/state-management/#component-level-state","title":"Component-Level State","text":"<p>For UI state specific to a component, React's <code>useState</code> and <code>useReducer</code> hooks are used:</p> <pre><code>// Tab state example\nconst [activeTab, setActiveTab] = useState('overview');\n\n// Modal state example\nconst [isModalOpen, setIsModalOpen] = useState(false);\n\n// Complex state with useReducer\ntype State = {\n  isLoading: boolean;\n  error: string | null;\n  data: any[];\n  page: number;\n};\n\ntype Action =\n  | { type: 'FETCH_START' }\n  | { type: 'FETCH_SUCCESS'; payload: any[] }\n  | { type: 'FETCH_ERROR'; payload: string }\n  | { type: 'SET_PAGE'; payload: number };\n\nconst reducer = (state: State, action: Action): State =&gt; {\n  switch (action.type) {\n    case 'FETCH_START':\n      return { ...state, isLoading: true, error: null };\n    case 'FETCH_SUCCESS':\n      return { ...state, isLoading: false, data: action.payload };\n    case 'FETCH_ERROR':\n      return { ...state, isLoading: false, error: action.payload };\n    case 'SET_PAGE':\n      return { ...state, page: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst [state, dispatch] = useReducer(reducer, {\n  isLoading: false,\n  error: null,\n  data: [],\n  page: 1,\n});\n</code></pre>"},{"location":"frontend/state-management/#form-state-management","title":"Form State Management","text":""},{"location":"frontend/state-management/#react-hook-form","title":"React Hook Form","text":"<p>For managing form state, validation, and submission, React Hook Form is used:</p> <pre><code>import { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\n\n// Define validation schema\nconst schema = z.object({\n  name: z.string().min(1, 'Name is required'),\n  location: z.string().min(1, 'Location is required'),\n  description: z.string().optional(),\n});\n\ntype FormValues = z.infer&lt;typeof schema&gt;;\n\nconst CreateFarmForm = () =&gt; {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n    reset,\n  } = useForm&lt;FormValues&gt;({\n    resolver: zodResolver(schema),\n    defaultValues: {\n      name: '',\n      location: '',\n      description: '',\n    },\n  });\n\n  const onSubmit = async (data: FormValues) =&gt; {\n    try {\n      await api.post('/farms', data);\n      reset();\n      // Show success notification\n    } catch (error) {\n      // Handle error\n    }\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit(onSubmit)}&gt;\n      {/* Form fields */}\n    &lt;/form&gt;\n  );\n};\n</code></pre>"},{"location":"frontend/state-management/#authentication-state","title":"Authentication State","text":"<p>Authentication state is managed using a custom AuthProvider context:</p> <pre><code>// src/components/AuthProvider.tsx\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport api from '@/lib/axios';\n\ntype User = {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n};\n\ntype AuthContextType = {\n  user: User | null;\n  isLoading: boolean;\n  login: (email: string, password: string) =&gt; Promise&lt;void&gt;;\n  logout: () =&gt; void;\n  isAuthenticated: boolean;\n};\n\nconst AuthContext = createContext&lt;AuthContextType | undefined&gt;(undefined);\n\nexport const AuthProvider: React.FC&lt;{ children: React.ReactNode }&gt; = ({ children }) =&gt; {\n  const [user, setUser] = useState&lt;User | null&gt;(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const router = useRouter();\n\n  // Check if user is authenticated on mount\n  useEffect(() =&gt; {\n    const checkAuth = async () =&gt; {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          setIsLoading(false);\n          return;\n        }\n\n        const response = await api.get('/auth/token');\n        setUser(response.data.user);\n      } catch (error) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkAuth();\n  }, []);\n\n  const login = async (email: string, password: string) =&gt; {\n    setIsLoading(true);\n    try {\n      const response = await api.post('/auth/login', { email, password });\n      const { token, user } = response.data;\n\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n\n      setUser(user);\n      router.push('/overview');\n    } catch (error) {\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = () =&gt; {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUser(null);\n    router.push('/login');\n  };\n\n  return (\n    &lt;AuthContext.Provider\n      value={{\n        user,\n        isLoading,\n        login,\n        logout,\n        isAuthenticated: !!user,\n      }}\n    &gt;\n      {children}\n    &lt;/AuthContext.Provider&gt;\n  );\n};\n\nexport const useAuth = () =&gt; {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n</code></pre>"},{"location":"frontend/state-management/#application-state","title":"Application State","text":""},{"location":"frontend/state-management/#theme-and-preferences","title":"Theme and Preferences","text":"<p>Theme and other user preferences are managed using the <code>next-themes</code> library and local storage:</p> <pre><code>// src/app/layout.tsx\nimport { ThemeProvider } from 'next-themes';\n\nexport default function RootLayout({ children }) {\n  return (\n    &lt;html lang=\"en\" suppressHydrationWarning&gt;\n      &lt;body&gt;\n        &lt;ThemeProvider\n          attribute=\"class\"\n          defaultTheme=\"light\"\n          disableTransitionOnChange\n        &gt;\n          {children}\n        &lt;/ThemeProvider&gt;\n      &lt;/body&gt;\n    &lt;/html&gt;\n  );\n}\n\n// Usage in components\nimport { useTheme } from 'next-themes';\n\nconst ThemeToggle = () =&gt; {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    &lt;button onClick={() =&gt; setTheme(theme === 'dark' ? 'light' : 'dark')}&gt;\n      Toggle Theme\n    &lt;/button&gt;\n  );\n};\n</code></pre>"},{"location":"frontend/state-management/#url-state","title":"URL State","text":"<p>For state that should be reflected in the URL (for bookmarking and sharing), the <code>useSearchParams</code> hook and <code>nuqs</code> library are used:</p> <pre><code>import { useSearchParams, usePathname, useRouter } from 'next/navigation';\nimport { useQueryState } from 'nuqs';\n\nconst FilterComponent = () =&gt; {\n  const router = useRouter();\n  const pathname = usePathname();\n  const searchParams = useSearchParams();\n\n  // Using Next.js built-in hooks\n  const handleFilterChange = (filter) =&gt; {\n    const params = new URLSearchParams(searchParams.toString());\n    params.set('filter', filter);\n    router.push(`${pathname}?${params.toString()}`);\n  };\n\n  // Using nuqs for type-safe URL state\n  const [dateRange, setDateRange] = useQueryState('dateRange', {\n    defaultValue: '30d',\n    parse: (value) =&gt; value as '7d' | '30d' | '90d',\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;select\n        value={searchParams.get('filter') || ''}\n        onChange={(e) =&gt; handleFilterChange(e.target.value)}\n      &gt;\n        &lt;option value=\"\"&gt;All&lt;/option&gt;\n        &lt;option value=\"healthy\"&gt;Healthy&lt;/option&gt;\n        &lt;option value=\"at-risk\"&gt;At Risk&lt;/option&gt;\n      &lt;/select&gt;\n\n      &lt;select\n        value={dateRange}\n        onChange={(e) =&gt; setDateRange(e.target.value as any)}\n      &gt;\n        &lt;option value=\"7d\"&gt;Last 7 days&lt;/option&gt;\n        &lt;option value=\"30d\"&gt;Last 30 days&lt;/option&gt;\n        &lt;option value=\"90d\"&gt;Last 90 days&lt;/option&gt;\n      &lt;/select&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"frontend/state-management/#cache-invalidation-strategies","title":"Cache Invalidation Strategies","text":"<p>Effective cache invalidation is crucial for maintaining data consistency while optimizing performance. The PAAL system implements several cache invalidation strategies:</p>"},{"location":"frontend/state-management/#time-based-invalidation","title":"Time-Based Invalidation","text":"<p>Data is automatically considered stale after a specified time period:</p> <pre><code>// Configure stale time for queries\nconst { data: pigs } = useQuery({\n  queryKey: ['pigs'],\n  queryFn: fetchPigs,\n  staleTime: 5 * 60 * 1000, // Data becomes stale after 5 minutes\n  cacheTime: 30 * 60 * 1000 // Cached data is removed after 30 minutes of inactivity\n});\n</code></pre> <p>Different data types have different staleness configurations:</p> Data Type Stale Time Cache Time Rationale Reference Data (farms, barns) 1 hour 24 hours Changes infrequently Entity Data (pigs, users) 5 minutes 1 hour Moderate change frequency Real-time Data (posture readings) 30 seconds 5 minutes Changes frequently User Preferences 1 hour 24 hours User-specific, changes infrequently"},{"location":"frontend/state-management/#event-based-invalidation","title":"Event-Based Invalidation","text":"<p>Cache is invalidated when specific events occur:</p> <pre><code>// Invalidate cache after mutation\nconst queryClient = useQueryClient();\n\nconst mutation = useMutation({\n  mutationFn: createPig,\n  onSuccess: (newPig) =&gt; {\n    // Invalidate all pig queries\n    queryClient.invalidateQueries({ queryKey: ['pigs'] });\n\n    // Update farm counts\n    queryClient.invalidateQueries({\n      queryKey: ['farms', newPig.currentLocation.farmId]\n    });\n  }\n});\n</code></pre>"},{"location":"frontend/state-management/#selective-updates","title":"Selective Updates","text":"<p>Instead of invalidating entire queries, specific items in the cache can be updated:</p> <pre><code>const updatePigMutation = useMutation({\n  mutationFn: updatePig,\n  onSuccess: (updatedPig) =&gt; {\n    // Update the specific pig in the cache\n    queryClient.setQueryData(['pig', updatedPig.pigId], updatedPig);\n\n    // Update the pig in list queries\n    queryClient.setQueriesData(['pigs'], (oldData) =&gt; {\n      if (!oldData) return oldData;\n      return oldData.map(pig =&gt;\n        pig.pigId === updatedPig.pigId ? updatedPig : pig\n      );\n    });\n  }\n});\n</code></pre>"},{"location":"frontend/state-management/#optimistic-updates","title":"Optimistic Updates","text":"<p>UI is updated immediately before server confirmation to improve perceived performance:</p> <pre><code>const addPigMutation = useMutation({\n  mutationFn: createPig,\n  // Optimistically update the cache\n  onMutate: async (newPig) =&gt; {\n    // Cancel outgoing refetches\n    await queryClient.cancelQueries({ queryKey: ['pigs'] });\n\n    // Snapshot the previous value\n    const previousPigs = queryClient.getQueryData(['pigs']);\n\n    // Optimistically update the cache\n    queryClient.setQueryData(['pigs'], (old) =&gt; {\n      return [...(old || []), { ...newPig, id: 'temp-id' }];\n    });\n\n    // Return context with the snapshotted value\n    return { previousPigs };\n  },\n  // If the mutation fails, use the context we returned above\n  onError: (err, newPig, context) =&gt; {\n    queryClient.setQueryData(['pigs'], context.previousPigs);\n  },\n  // Always refetch after error or success\n  onSettled: () =&gt; {\n    queryClient.invalidateQueries({ queryKey: ['pigs'] });\n  }\n});\n</code></pre>"},{"location":"frontend/state-management/#cache-persistence","title":"Cache Persistence","text":"<p>Cache is persisted to localStorage to improve performance across page refreshes:</p> <pre><code>// src/lib/queryClient.ts\nimport { QueryClient } from 'react-query';\nimport { createWebStoragePersistor } from 'react-query/persistQueryClient-experimental';\nimport { persistQueryClient } from 'react-query/persistQueryClient-experimental';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 5 * 60 * 1000,\n      cacheTime: 30 * 60 * 1000,\n    },\n  },\n});\n\nconst localStoragePersistor = createWebStoragePersistor({\n  storage: window.localStorage,\n  key: 'paal-cache',\n});\n\npersistQueryClient({\n  queryClient,\n  persistor: localStoragePersistor,\n  maxAge: 24 * 60 * 60 * 1000, // 24 hours\n});\n\nexport default queryClient;\n</code></pre>"},{"location":"frontend/state-management/#performance-optimization-techniques","title":"Performance Optimization Techniques","text":"<p>The PAAL system implements several performance optimization techniques:</p>"},{"location":"frontend/state-management/#component-optimization","title":"Component Optimization","text":""},{"location":"frontend/state-management/#memoization","title":"Memoization","text":"<p>Components are memoized to prevent unnecessary re-renders:</p> <pre><code>// Memoize a component\nconst PigCard = React.memo(({ pig }) =&gt; {\n  return (\n    &lt;div className=\"card\"&gt;\n      &lt;h3&gt;{pig.tag}&lt;/h3&gt;\n      &lt;p&gt;Breed: {pig.breed}&lt;/p&gt;\n      &lt;p&gt;Age: {pig.age}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n});\n\n// Memoize expensive calculations\nconst PigStatistics = ({ pigs }) =&gt; {\n  // This calculation only runs when pigs array changes\n  const statistics = useMemo(() =&gt; {\n    return {\n      total: pigs.length,\n      averageAge: pigs.reduce((sum, pig) =&gt; sum + pig.age, 0) / pigs.length,\n      breedDistribution: pigs.reduce((acc, pig) =&gt; {\n        acc[pig.breed] = (acc[pig.breed] || 0) + 1;\n        return acc;\n      }, {})\n    };\n  }, [pigs]);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Total: {statistics.total}&lt;/p&gt;\n      &lt;p&gt;Average Age: {statistics.averageAge.toFixed(1)}&lt;/p&gt;\n      {/* Render breed distribution */}\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"frontend/state-management/#callback-memoization","title":"Callback Memoization","text":"<p>Event handlers are memoized to prevent unnecessary re-renders:</p> <pre><code>const PigActions = ({ pigId, onView, onEdit, onDelete }) =&gt; {\n  // These callbacks only change when pigId changes\n  const handleView = useCallback(() =&gt; {\n    onView(pigId);\n  }, [pigId, onView]);\n\n  const handleEdit = useCallback(() =&gt; {\n    onEdit(pigId);\n  }, [pigId, onEdit]);\n\n  const handleDelete = useCallback(() =&gt; {\n    onDelete(pigId);\n  }, [pigId, onDelete]);\n\n  return (\n    &lt;div className=\"actions\"&gt;\n      &lt;button onClick={handleView}&gt;View&lt;/button&gt;\n      &lt;button onClick={handleEdit}&gt;Edit&lt;/button&gt;\n      &lt;button onClick={handleDelete}&gt;Delete&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"frontend/state-management/#rendering-optimization","title":"Rendering Optimization","text":""},{"location":"frontend/state-management/#virtualized-lists","title":"Virtualized Lists","text":"<p>Long lists are rendered using virtualization to improve performance:</p> <pre><code>import { useVirtualizer } from '@tanstack/react-virtual';\n\nconst VirtualizedPigList = ({ pigs }) =&gt; {\n  const parentRef = useRef(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: pigs.length,\n    getScrollElement: () =&gt; parentRef.current,\n    estimateSize: () =&gt; 60, // estimated row height\n    overscan: 5, // number of items to render outside of the visible area\n  });\n\n  return (\n    &lt;div\n      ref={parentRef}\n      className=\"list-container\"\n      style={{ height: '500px', overflow: 'auto' }}\n    &gt;\n      &lt;div\n        style={{\n          height: `${rowVirtualizer.getTotalSize()}px`,\n          width: '100%',\n          position: 'relative',\n        }}\n      &gt;\n        {rowVirtualizer.getVirtualItems().map((virtualRow) =&gt; (\n          &lt;div\n            key={virtualRow.index}\n            style={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: `${virtualRow.size}px`,\n              transform: `translateY(${virtualRow.start}px)`,\n            }}\n          &gt;\n            &lt;PigCard pig={pigs[virtualRow.index]} /&gt;\n          &lt;/div&gt;\n        ))}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"frontend/state-management/#windowed-pagination","title":"Windowed Pagination","text":"<p>For large datasets, windowed pagination is used instead of loading all data at once:</p> <pre><code>const PigTable = ({ farmId }) =&gt; {\n  const [page, setPage] = useState(1);\n  const [pageSize, setPageSize] = useState(20);\n\n  const { data, isLoading } = useQuery({\n    queryKey: ['pigs', { farmId, page, pageSize }],\n    queryFn: () =&gt; fetchPigs({ farmId, page, pageSize }),\n    keepPreviousData: true, // Keep previous data while loading new data\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;table&gt;{/* Render table */}&lt;/table&gt;\n\n      &lt;Pagination\n        currentPage={page}\n        totalPages={data?.totalPages || 1}\n        onPageChange={setPage}\n      /&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"frontend/state-management/#data-fetching-optimization","title":"Data Fetching Optimization","text":""},{"location":"frontend/state-management/#parallel-queries","title":"Parallel Queries","text":"<p>Related data is fetched in parallel to reduce loading time:</p> <pre><code>const FarmDetails = ({ farmId }) =&gt; {\n  // Fetch farm details and pigs in parallel\n  const { data: farm } = useQuery({\n    queryKey: ['farm', farmId],\n    queryFn: () =&gt; fetchFarm(farmId),\n  });\n\n  const { data: pigs } = useQuery({\n    queryKey: ['pigs', { farmId }],\n    queryFn: () =&gt; fetchPigs({ farmId }),\n  });\n\n  const { data: barns } = useQuery({\n    queryKey: ['barns', { farmId }],\n    queryFn: () =&gt; fetchBarns({ farmId }),\n  });\n\n  // Render farm details, pigs, and barns\n};\n</code></pre>"},{"location":"frontend/state-management/#prefetching","title":"Prefetching","text":"<p>Data is prefetched to improve perceived performance:</p> <pre><code>const FarmList = ({ farms }) =&gt; {\n  const queryClient = useQueryClient();\n\n  // Prefetch farm details when hovering over a farm\n  const prefetchFarm = (farmId) =&gt; {\n    queryClient.prefetchQuery({\n      queryKey: ['farm', farmId],\n      queryFn: () =&gt; fetchFarm(farmId),\n    });\n  };\n\n  return (\n    &lt;ul&gt;\n      {farms.map((farm) =&gt; (\n        &lt;li\n          key={farm.id}\n          onMouseEnter={() =&gt; prefetchFarm(farm.id)}\n        &gt;\n          &lt;Link to={`/farms/${farm.id}`}&gt;{farm.name}&lt;/Link&gt;\n        &lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n};\n</code></pre>"},{"location":"frontend/state-management/#selective-data-loading","title":"Selective Data Loading","text":"<p>Only necessary data is loaded to reduce payload size:</p> <pre><code>// API supports field selection\nconst { data: pigs } = useQuery({\n  queryKey: ['pigs', { fields: 'pigId,tag,breed,age' }],\n  queryFn: () =&gt; fetchPigs({ fields: 'pigId,tag,breed,age' }),\n});\n</code></pre>"},{"location":"frontend/state-management/#code-splitting","title":"Code Splitting","text":"<p>The application uses code splitting to reduce initial bundle size:</p> <pre><code>// Dynamic import for code splitting\nimport { lazy, Suspense } from 'react';\n\nconst PigDetails = lazy(() =&gt; import('./PigDetails'));\nconst FarmDetails = lazy(() =&gt; import('./FarmDetails'));\n\nconst App = () =&gt; {\n  return (\n    &lt;Routes&gt;\n      &lt;Route path=\"/\" element={&lt;Dashboard /&gt;} /&gt;\n      &lt;Route\n        path=\"/pigs/:id\"\n        element={\n          &lt;Suspense fallback={&lt;LoadingSpinner /&gt;}&gt;\n            &lt;PigDetails /&gt;\n          &lt;/Suspense&gt;\n        }\n      /&gt;\n      &lt;Route\n        path=\"/farms/:id\"\n        element={\n          &lt;Suspense fallback={&lt;LoadingSpinner /&gt;}&gt;\n            &lt;FarmDetails /&gt;\n          &lt;/Suspense&gt;\n        }\n      /&gt;\n    &lt;/Routes&gt;\n  );\n};\n</code></pre>"},{"location":"frontend/state-management/#state-management-best-practices","title":"State Management Best Practices","text":"<ol> <li>Colocation: Keep state as close as possible to where it's used</li> <li>Use component state for component-specific state</li> <li>Use context for shared state within a subtree</li> <li> <p>Use global state only when necessary</p> </li> <li> <p>Single Source of Truth: Avoid duplicating state across different stores</p> </li> <li>Define clear ownership of each piece of state</li> <li> <p>Derive state from a single source when needed in multiple places</p> </li> <li> <p>Immutability: Always update state immutably to prevent bugs</p> </li> <li>Use spread operators or libraries like Immer for immutable updates</li> <li> <p>Avoid direct mutation of objects and arrays</p> </li> <li> <p>Derived State: Calculate derived state on-the-fly rather than storing it</p> </li> <li>Use selectors or memoized functions to compute derived state</li> <li> <p>Avoid storing calculated values that can be derived from existing state</p> </li> <li> <p>Persistence: Use localStorage for state that should persist across sessions</p> </li> <li>Only persist essential state (user preferences, authentication tokens)</li> <li> <p>Implement proper serialization and deserialization</p> </li> <li> <p>Separation of Concerns: Separate UI state from server state</p> </li> <li>Use React Query for server state</li> <li> <p>Use React Context or component state for UI state</p> </li> <li> <p>Error Handling: Include error states in all data fetching operations</p> </li> <li>Handle loading, success, and error states consistently</li> <li> <p>Provide meaningful error messages to users</p> </li> <li> <p>Optimistic Updates: Update UI before server confirmation for better UX</p> </li> <li>Implement proper rollback mechanisms for failed operations</li> <li> <p>Show pending state for ongoing operations</p> </li> <li> <p>Minimize Re-renders: Optimize components to prevent unnecessary re-renders</p> </li> <li>Use memoization techniques (React.memo, useMemo, useCallback)</li> <li> <p>Structure component tree to isolate frequent updates</p> </li> <li> <p>State Documentation: Document state structure and management patterns</p> <ul> <li>Create clear interfaces for state objects</li> <li>Document state update patterns for complex state</li> </ul> </li> </ol>"},{"location":"internal/code-structure/","title":"Code Structure and Conventions","text":""},{"location":"internal/code-structure/#overview","title":"Overview","text":"<p>This document outlines the code organization, naming conventions, and coding style guidelines for the PAAL system. Following these conventions ensures consistency across the codebase and makes it easier for developers to understand and maintain the code.</p>"},{"location":"internal/code-structure/#repository-structure","title":"Repository Structure","text":"<p>The PAAL system is organized as a monorepo with separate directories for the frontend and backend components:</p> <pre><code>paal/\n\u251c\u2500\u2500 documentation/        # Project documentation\n\u251c\u2500\u2500 server/               # Backend server code\n\u2514\u2500\u2500 src/                  # Frontend application code\n</code></pre>"},{"location":"internal/code-structure/#backend-code-structure","title":"Backend Code Structure","text":"<p>The backend code is organized in a modular structure by feature and responsibility:</p> <pre><code>server/\n\u251c\u2500\u2500 config/               # Configuration settings\n\u2502   \u2514\u2500\u2500 index.js          # Exports configuration objects\n\u251c\u2500\u2500 db/                   # Database connection and models\n\u2502   \u251c\u2500\u2500 connection.js     # Manages MongoDB connection\n\u2502   \u2514\u2500\u2500 models.js         # Registers all Mongoose models\n\u251c\u2500\u2500 middleware/           # Express middleware\n\u2502   \u251c\u2500\u2500 authMiddleware.js # Authentication middleware\n\u2502   \u251c\u2500\u2500 role.js           # Role-based access control\n\u2502   \u2514\u2500\u2500 index.js          # Configures middleware\n\u251c\u2500\u2500 models/               # Mongoose models\n\u2502   \u251c\u2500\u2500 Pig.js            # Pig data model\n\u2502   \u251c\u2500\u2500 Farm.js           # Farm data model\n\u2502   \u251c\u2500\u2500 Barn.js           # Barn data model\n\u2502   \u251c\u2500\u2500 Stall.js          # Stall data model\n\u2502   \u251c\u2500\u2500 User.js           # User data model\n\u2502   \u251c\u2500\u2500 PostureData.js    # Pig posture data model\n\u2502   \u2514\u2500\u2500 ...               # Other data models\n\u251c\u2500\u2500 routes/               # API routes\n\u2502   \u251c\u2500\u2500 pig.js            # Pig-related endpoints\n\u2502   \u251c\u2500\u2500 farm.js           # Farm-related endpoints\n\u2502   \u251c\u2500\u2500 auth.js           # Authentication endpoints\n\u2502   \u251c\u2500\u2500 user.js           # User management endpoints\n\u2502   \u2514\u2500\u2500 ...               # Other route files\n\u251c\u2500\u2500 scripts/              # Utility scripts\n\u2502   \u251c\u2500\u2500 seed-all.js       # Database seeding script\n\u2502   \u2514\u2500\u2500 ...               # Other scripts\n\u251c\u2500\u2500 services/             # Business logic services\n\u2502   \u251c\u2500\u2500 activityLogger.js # Activity logging service\n\u2502   \u2514\u2500\u2500 ...               # Other services\n\u251c\u2500\u2500 socket/               # Socket.IO related code\n\u2502   \u251c\u2500\u2500 events.js         # Socket event handlers\n\u2502   \u251c\u2500\u2500 stats.js          # Statistics emission\n\u2502   \u2514\u2500\u2500 index.js          # Socket.IO initialization\n\u251c\u2500\u2500 utils/                # Utility functions\n\u2502   \u2514\u2500\u2500 routeValidator.js # Route validation utility\n\u251c\u2500\u2500 .env                  # Environment variables (not in version control)\n\u251c\u2500\u2500 .env.example          # Example environment variables\n\u251c\u2500\u2500 index.js              # Legacy entry point\n\u251c\u2500\u2500 server.js             # Main entry point\n\u251c\u2500\u2500 package.json          # Node.js dependencies\n\u2514\u2500\u2500 README.md             # Backend documentation\n</code></pre>"},{"location":"internal/code-structure/#frontend-code-structure","title":"Frontend Code Structure","text":"<p>The frontend code follows Next.js's file-based routing structure with additional organization by feature:</p> <pre><code>src/\n\u251c\u2500\u2500 app/                  # Next.js app directory (routes and pages)\n\u2502   \u251c\u2500\u2500 (auth)/           # Authentication-related routes\n\u2502   \u2502   \u251c\u2500\u2500 login/        # Login page\n\u2502   \u2502   \u2514\u2500\u2500 ...           # Other auth pages\n\u2502   \u251c\u2500\u2500 (main)/           # Main application routes\n\u2502   \u2502   \u251c\u2500\u2500 overview/     # Dashboard overview page\n\u2502   \u2502   \u251c\u2500\u2500 details/      # Detailed data views\n\u2502   \u2502   \u251c\u2500\u2500 admin/        # Admin panel pages\n\u2502   \u2502   \u251c\u2500\u2500 pigs/         # Pig management pages\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 [id]/     # Dynamic route for pig details\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 ...       # Other pig pages\n\u2502   \u2502   \u2514\u2500\u2500 ...           # Other main pages\n\u2502   \u251c\u2500\u2500 api/              # API routes for server-side operations\n\u2502   \u2514\u2500\u2500 layout.tsx        # Root layout component\n\u251c\u2500\u2500 components/           # Reusable UI components\n\u2502   \u251c\u2500\u2500 ui/               # Basic UI components\n\u2502   \u2502   \u251c\u2500\u2500 Button.tsx    # Button component\n\u2502   \u2502   \u251c\u2500\u2500 Card.tsx      # Card component\n\u2502   \u2502   \u2514\u2500\u2500 ...           # Other UI components\n\u2502   \u2514\u2500\u2500 [feature]/        # Feature-specific components\n\u2502       \u251c\u2500\u2500 PigCard.tsx   # Pig card component\n\u2502       \u2514\u2500\u2500 ...           # Other feature components\n\u251c\u2500\u2500 hooks/                # Custom React hooks\n\u2502   \u251c\u2500\u2500 useAuth.ts        # Authentication hook\n\u2502   \u2514\u2500\u2500 ...               # Other hooks\n\u251c\u2500\u2500 lib/                  # Utility functions and shared code\n\u2502   \u251c\u2500\u2500 axios.ts          # API client configuration\n\u2502   \u2514\u2500\u2500 utils.ts          # General utility functions\n\u251c\u2500\u2500 types/                # TypeScript type definitions\n\u2502   \u251c\u2500\u2500 pig.ts            # Pig-related types\n\u2502   \u2514\u2500\u2500 ...               # Other type definitions\n\u251c\u2500\u2500 public/               # Static assets\n\u251c\u2500\u2500 .env.local            # Environment variables (not in version control)\n\u251c\u2500\u2500 .env.example          # Example environment variables\n\u251c\u2500\u2500 next.config.mjs       # Next.js configuration\n\u251c\u2500\u2500 package.json          # Node.js dependencies\n\u2514\u2500\u2500 README.md             # Frontend documentation\n</code></pre>"},{"location":"internal/code-structure/#naming-conventions","title":"Naming Conventions","text":""},{"location":"internal/code-structure/#files-and-directories","title":"Files and Directories","text":"<ul> <li>Backend:</li> <li>Use PascalCase for model files: <code>Pig.js</code>, <code>Farm.js</code></li> <li>Use camelCase for route files: <code>pig.js</code>, <code>farm.js</code></li> <li> <p>Use camelCase for utility and service files: <code>activityLogger.js</code></p> </li> <li> <p>Frontend:</p> </li> <li>Use PascalCase for component files: <code>Button.tsx</code>, <code>PigCard.tsx</code></li> <li>Use camelCase for utility and hook files: <code>useAuth.ts</code>, <code>axios.ts</code></li> <li>Use kebab-case for CSS module files: <code>button-styles.module.css</code></li> </ul>"},{"location":"internal/code-structure/#variables-and-functions","title":"Variables and Functions","text":"<ul> <li> <p>Use camelCase for variables and function names:   <code>javascript   const pigCount = 10;   function calculateTotal() { ... }</code></p> </li> <li> <p>Use PascalCase for React components and classes:   <code>javascript   function PigCard() { ... }   class PigModel { ... }</code></p> </li> <li> <p>Use UPPER_SNAKE_CASE for constants:   <code>javascript   const MAX_PIGS_PER_PAGE = 20;   const API_BASE_URL = 'http://localhost:8080/api';</code></p> </li> </ul>"},{"location":"internal/code-structure/#database","title":"Database","text":"<ul> <li>Use PascalCase for collection names: <code>Pigs</code>, <code>Farms</code></li> <li>Use camelCase for field names: <code>pigId</code>, <code>currentLocation</code></li> </ul>"},{"location":"internal/code-structure/#coding-style-guidelines","title":"Coding Style Guidelines","text":""},{"location":"internal/code-structure/#javascripttypescript","title":"JavaScript/TypeScript","text":"<ul> <li>Use ES6+ features where appropriate</li> <li>Prefer <code>const</code> over <code>let</code> when variables are not reassigned</li> <li>Avoid using <code>var</code></li> <li>Use arrow functions for callbacks and anonymous functions</li> <li>Use async/await for asynchronous operations</li> <li>Use destructuring for object and array access</li> <li>Use template literals for string interpolation</li> <li>Use optional chaining and nullish coalescing operators</li> </ul> <pre><code>// Good\nconst { name, age } = pig;\nconst formattedName = `Pig: ${name}`;\nconst displayAge = age ?? 'Unknown';\nconst location = pig?.currentLocation?.stallId?.name || 'Unknown Location';\n\n// Avoid\nconst name = pig.name;\nconst age = pig.age;\nconst formattedName = 'Pig: ' + name;\nconst displayAge = age !== null &amp;&amp; age !== undefined ? age : 'Unknown';\nconst location = pig &amp;&amp; pig.currentLocation &amp;&amp; pig.currentLocation.stallId &amp;&amp; pig.currentLocation.stallId.name ? pig.currentLocation.stallId.name : 'Unknown Location';\n</code></pre>"},{"location":"internal/code-structure/#react","title":"React","text":"<ul> <li>Use functional components with hooks</li> <li>Use the React Context API for global state management</li> <li>Use React Query for server state management</li> <li>Break down complex components into smaller, reusable components</li> <li>Use prop destructuring in component parameters</li> <li>Use the <code>useCallback</code> hook for memoizing functions</li> <li>Use the <code>useMemo</code> hook for memoizing expensive calculations</li> <li>Use the <code>useEffect</code> hook for side effects</li> </ul> <pre><code>// Good\nfunction PigCard({ pig, onEdit }) {\n  const { name, age, breed } = pig;\n\n  const handleEdit = useCallback(() =&gt; {\n    onEdit(pig.id);\n  }, [onEdit, pig.id]);\n\n  return (\n    &lt;Card&gt;\n      &lt;CardHeader&gt;{name}&lt;/CardHeader&gt;\n      &lt;CardBody&gt;\n        &lt;p&gt;Age: {age}&lt;/p&gt;\n        &lt;p&gt;Breed: {breed}&lt;/p&gt;\n      &lt;/CardBody&gt;\n      &lt;CardFooter&gt;\n        &lt;Button onClick={handleEdit}&gt;Edit&lt;/Button&gt;\n      &lt;/CardFooter&gt;\n    &lt;/Card&gt;\n  );\n}\n</code></pre>"},{"location":"internal/code-structure/#cssstyling","title":"CSS/Styling","text":"<ul> <li>Use Tailwind CSS for styling components</li> <li>Use CSS modules for component-specific styles</li> <li>Follow a mobile-first approach for responsive design</li> <li>Use CSS variables for theme colors and spacing</li> </ul> <pre><code>// Using Tailwind CSS\nfunction Button({ children, variant = 'primary' }) {\n  const baseClasses = 'px-4 py-2 rounded font-medium focus:outline-none';\n  const variantClasses = {\n    primary: 'bg-blue-500 text-white hover:bg-blue-600',\n    secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300',\n    danger: 'bg-red-500 text-white hover:bg-red-600'\n  };\n\n  return (\n    &lt;button className={`${baseClasses} ${variantClasses[variant]}`}&gt;\n      {children}\n    &lt;/button&gt;\n  );\n}\n</code></pre>"},{"location":"internal/code-structure/#backend","title":"Backend","text":"<ul> <li>Use async/await for asynchronous operations</li> <li>Use try/catch blocks for error handling</li> <li>Use middleware for cross-cutting concerns</li> <li>Use environment variables for configuration</li> <li>Use meaningful variable and function names</li> <li>Add comments for complex logic</li> </ul> <pre><code>// Good\nrouter.get('/:id', async (req, res) =&gt; {\n  try {\n    const id = parseInt(req.params.id, 10);\n\n    // Validate ID\n    if (isNaN(id)) {\n      return res.status(400).json({ error: 'Invalid pig ID' });\n    }\n\n    // Find pig by ID\n    const pig = await Pig.findOne({ pigId: id })\n      .populate('currentLocation.farmId')\n      .populate('currentLocation.barnId')\n      .populate('currentLocation.stallId');\n\n    // Check if pig exists\n    if (!pig) {\n      return res.status(404).json({ error: 'Pig not found' });\n    }\n\n    res.json(pig);\n  } catch (error) {\n    console.error('Error fetching pig:', error);\n    res.status(500).json({ error: 'Failed to fetch pig' });\n  }\n});\n</code></pre>"},{"location":"internal/code-structure/#documentation-guidelines","title":"Documentation Guidelines","text":""},{"location":"internal/code-structure/#code-comments","title":"Code Comments","text":"<ul> <li>Use JSDoc comments for functions and classes</li> <li>Add inline comments for complex logic</li> <li>Keep comments up-to-date with code changes</li> <li>Focus on why, not what (the code should be self-explanatory)</li> </ul> <pre><code>/**\n * Calculate health risk score for a pig\n * @param {Object} pigData - Pig data including health metrics\n * @returns {number} Risk score between 0 and 1\n */\nfunction calculateHealthRisk(pigData) {\n  // Initialize with base risk\n  let riskScore = 0;\n\n  // Factor 1: Recent posture data\n  if (pigData.recentPosture) {\n    // Higher risk if pig is lying down too much\n    const lyingPercentage = pigData.recentPosture.lying || 0;\n    if (lyingPercentage &gt; 70) {\n      riskScore += 0.3;\n    } else if (lyingPercentage &gt; 50) {\n      riskScore += 0.1;\n    }\n  }\n\n  // Cap risk score at 1\n  return Math.min(riskScore, 1);\n}\n</code></pre>"},{"location":"internal/code-structure/#readme-files","title":"README Files","text":"<ul> <li>Each major directory should have a README.md file</li> <li>READMEs should explain the purpose of the directory and its contents</li> <li>Include setup instructions, usage examples, and other relevant information</li> </ul>"},{"location":"internal/code-structure/#error-handling","title":"Error Handling","text":""},{"location":"internal/code-structure/#frontend","title":"Frontend","text":"<ul> <li>Use try/catch blocks for async operations</li> <li>Use error boundaries for React components</li> <li>Display user-friendly error messages</li> <li>Log errors to the console in development</li> </ul> <pre><code>async function fetchPigData(id) {\n  try {\n    const response = await api.get(`/pigs/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching pig data:', error);\n\n    // Return user-friendly error message\n    if (error.response) {\n      if (error.response.status === 404) {\n        throw new Error('Pig not found');\n      } else if (error.response.status === 401) {\n        throw new Error('You must be logged in to view this information');\n      }\n    }\n\n    throw new Error('Failed to load pig data. Please try again later.');\n  }\n}\n</code></pre>"},{"location":"internal/code-structure/#backend_1","title":"Backend","text":"<ul> <li>Use try/catch blocks for async operations</li> <li>Return appropriate HTTP status codes</li> <li>Provide meaningful error messages</li> <li>Log errors with context information</li> </ul> <pre><code>router.post('/', async (req, res) =&gt; {\n  try {\n    const { pigId, tag, breed, age, currentLocation } = req.body;\n\n    // Validate input\n    if (!pigId || !tag) {\n      return res.status(400).json({ error: 'Pig ID and tag are required' });\n    }\n\n    // Create pig\n    const newPig = await Pig.create({\n      pigId,\n      tag,\n      breed,\n      age,\n      currentLocation,\n      active: true\n    });\n\n    res.status(201).json({\n      success: true,\n      pig: newPig\n    });\n  } catch (error) {\n    console.error('Error creating pig:', error);\n\n    // Handle specific errors\n    if (error.name === 'ValidationError') {\n      return res.status(400).json({ error: error.message });\n    } else if (error.code === 11000) {\n      return res.status(409).json({ error: 'Pig with this ID or tag already exists' });\n    }\n\n    res.status(500).json({ error: 'Failed to create pig' });\n  }\n});\n</code></pre>"},{"location":"internal/code-structure/#testing-conventions","title":"Testing Conventions","text":""},{"location":"internal/code-structure/#test-file-organization","title":"Test File Organization","text":"<ul> <li>Place test files adjacent to the files they test</li> <li>Use <code>.test.js</code> or <code>.spec.js</code> suffix for test files</li> <li>Group tests by feature or component</li> </ul> <pre><code>components/\n\u251c\u2500\u2500 Button.tsx\n\u251c\u2500\u2500 Button.test.tsx\n\u251c\u2500\u2500 Card.tsx\n\u2514\u2500\u2500 Card.test.tsx\n</code></pre>"},{"location":"internal/code-structure/#test-naming","title":"Test Naming","text":"<ul> <li>Use descriptive test names that explain what is being tested</li> <li>Follow the pattern: <code>describe('Component/Function', () =&gt; { it('should do something', () =&gt; {}) })</code></li> </ul> <pre><code>describe('PigCard', () =&gt; {\n  it('should render pig name and breed', () =&gt; {\n    // Test code\n  });\n\n  it('should call onEdit when edit button is clicked', () =&gt; {\n    // Test code\n  });\n});\n</code></pre>"},{"location":"internal/code-structure/#test-structure","title":"Test Structure","text":"<ul> <li>Follow the Arrange-Act-Assert pattern</li> <li>Use setup and teardown functions for common test setup</li> <li>Mock external dependencies</li> </ul> <pre><code>describe('PigService', () =&gt; {\n  // Setup\n  beforeEach(() =&gt; {\n    jest.clearAllMocks();\n  });\n\n  it('should fetch pig by ID', async () =&gt; {\n    // Arrange\n    const mockPig = { pigId: 1, name: 'Test Pig' };\n    jest.spyOn(Pig, 'findOne').mockResolvedValue(mockPig);\n\n    // Act\n    const result = await PigService.getPigById(1);\n\n    // Assert\n    expect(Pig.findOne).toHaveBeenCalledWith({ pigId: 1 });\n    expect(result).toEqual(mockPig);\n  });\n});\n</code></pre>"},{"location":"internal/code-structure/#git-workflow","title":"Git Workflow","text":""},{"location":"internal/code-structure/#branch-naming","title":"Branch Naming","text":"<ul> <li>Use feature branches for new features: <code>feature/add-pig-filter</code></li> <li>Use bugfix branches for bug fixes: <code>bugfix/fix-login-error</code></li> <li>Use hotfix branches for urgent fixes: <code>hotfix/critical-security-fix</code></li> </ul>"},{"location":"internal/code-structure/#commit-messages","title":"Commit Messages","text":"<ul> <li>Use present tense, imperative style: \"Add feature\" not \"Added feature\"</li> <li>Start with a capital letter</li> <li>Keep the first line under 50 characters</li> <li>Add more details in the commit body if needed</li> <li>Reference issue numbers when applicable</li> </ul> <pre><code>Add pig filtering by health status\n\n- Add filter component to pig list page\n- Implement filter logic in API endpoint\n- Update tests for new filtering functionality\n\nFixes #123\n</code></pre>"},{"location":"internal/code-structure/#pull-requests","title":"Pull Requests","text":"<ul> <li>Use descriptive titles</li> <li>Include a summary of changes</li> <li>Reference related issues</li> <li>Add screenshots for UI changes</li> <li>Ensure all tests pass before requesting review</li> </ul>"},{"location":"internal/code-structure/#conclusion","title":"Conclusion","text":"<p>Following these code structure and convention guidelines ensures consistency across the PAAL codebase and makes it easier for developers to understand, maintain, and extend the system. These conventions should be followed for all new code and applied to existing code during refactoring.</p>"}]}